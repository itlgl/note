https://api.github.com/repos/itlgl/note/issues?per_page=1000&page=1
headers Authorization: myToken

[
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/50",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/50/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/50/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/50/events",
        "html_url": "https://github.com/itlgl/note/issues/50",
        "id": 908203598,
        "node_id": "MDU6SXNzdWU5MDgyMDM1OTg=",
        "number": 50,
        "title": "Android不同分辨率图片实际显示大小的计算",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2021-06-01T11:41:52Z",
        "updated_at": "2021-09-22T07:12:38Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "### 屏幕密度DPI\r\n\r\n单位尺寸（英寸）内像素点的个数称为屏幕密度（DPI），通常水平和垂直的DPI是近乎相等或者极其接近的。\r\n比如一款MacBook Pro，13.3x8.3英寸屏，最大分辨率2560x1600，那它的水平、垂直DPI到达了192，因为2560/13.3=192.48，1600/8.3=192.77。\r\n\r\n### 获取手机DPI\r\n\r\n1. 命令行获取\r\n```cmd\r\nadb shell wm density\r\nPhysical density: 225\r\n```\r\n2. 代码获取\r\n```java\r\nfloat xdpi = getResources().getDisplayMetrics().xdpi;\r\nfloat ydpi = getResources().getDisplayMetrics().ydpi;\r\n```\r\n\r\n### 屏幕密度和图片文件夹对应规则\r\n\r\n|\t密度区间\t|\tldpi\t|\tmdpi\t|\thdpi\t|\txhdpi\t|\txxhdpi\t|\txxxhdpi\t|\r\n|\t---\t\t\t|\t---\t\t|\t---\t\t|\t---\t\t|\t---\t\t|\t---\t\t|\t---\t\t|\r\n|\tdpi\t\t\t|\t120\t\t|\t160\t\t|\t240\t\t|\t320\t\t|\t480\t\t|\t640\t\t|\r\n|\t1dp对应像素数 |\t0.75\t|\t1.0\t\t|\t1.5\t\t|\t2.0\t\t|\t3.0\t\t|\t4.0\t\t|\r\n\r\n比如设备dpi为160时，就会优先从mdpi文件夹选取图片；如果选取不到，再从其他文件夹选取并进行缩放操作。\r\n\r\n### 当手机不是标准dpi时，选取图片的规则\r\n\r\n|\tdpi范围\t|\t密度\t|\r\n|\t--- \t|\t---\t\t|\r\n|\t0dpi ~ 120dpi\t|\tldpi\t|\r\n|\t120dpi ~ 160dpi\t|\tmdpi\t|\r\n|\t160dpi ~ 240dpi\t|\thdpi\t|\r\n|\t240dpi ~ 320dpi\t|\txhdpi\t|\r\n|\t320dpi ~ 480dpi\t|\txxhdpi\t|\r\n|\t480dpi ~ 640dpi\t|\txxxhdpi\t|\r\n\r\n### 图片选取后大小计算\r\n\r\n**手机显示像素 =  图片实际像素尺寸 × 机型DPI / 所在资源目录DPI**\r\n\r\n比如，一张100x100的图片放在xhdpi下，当前手机dpi为225：\r\n1. 首先，225dpi落在hdpi范围内，hdpi文件夹下没有对应文件，尝试从其他分辨率文件夹查找\r\n2. xdpi找到文件，系统对图片进行缩放，缩放后宽度和高度都是100*225/320 = 70.31，四舍五入为70\r\n\r\n### 图片放置规则\r\n\r\n可以看出，图片放在机型对应dpi文件夹下最好，这样缩放操作会变少甚至没有缩放。\r\n如果一张宽高较小的图片放置在高分辨率文件夹下，而显示的ImageView写成设计图上的固定尺寸的话，就会导致系统获取的图片像素被缩小，又因为ImageView尺寸较大被拉伸，造成失真。\r\n**实际项目碰到一个类似问题，一张图片放在xhdpi下，设备为hdpi机型，系统获取的图片被缩小，但是ImageView写成了蓝湖上的固定尺寸，导致图片失真。**\r\n\r\n### 参考资料\r\n\r\n - [Android不同分辨率图片实际显示大小的计算](https://blog.csdn.net/b_neck/article/details/52062385)\r\n - [Android drawable微技巧，你所不知道的drawable的那些细节](https://blog.csdn.net/guolin_blog/article/details/50727753)\r\n - [HDPI](https://zhuanlan.zhihu.com/p/25087744)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/50/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/49",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/49/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/49/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/49/events",
        "html_url": "https://github.com/itlgl/note/issues/49",
        "id": 864768321,
        "node_id": "MDU6SXNzdWU4NjQ3NjgzMjE=",
        "number": 49,
        "title": "Activity生命周期",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2021-04-22T10:00:53Z",
        "updated_at": "2021-04-22T11:02:49Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "对Android中Activity的生命周期做个记录。\r\n先看Activity的生命周期流程图：\r\n\r\n![activity_lifecycle](https://developer.android.google.cn/guide/components/images/activity_lifecycle.png)\r\n\r\n#### 1、A启动B，再点返回键返回A，生命周期回调\r\n\r\nA启动B：\r\n**(A)onPause** → (B)onCreate → (B)onStart → (B)onResume → **(A)onStop**\r\n在B点击返回键返回到A：\r\n(B)onPause → **(A)onRestart → (A)onStart → (A)onResume** → (B)onStop → (B)onDestroy\r\n\r\n#### 2、A启动透明Activity C，再点返回键返回A，生命周期回调\r\n\r\nA启动透明C：\r\n**(A)onPause** → (C)onCreate → (C)onStart → (C)onResume\r\n在C点击返回键返回到A：\r\n(C)onPause → **(A)onResume** → (C)onStop → (C)onDestroy\r\n\r\n#### 3、当横竖屏切换时的生命周期\r\n\r\n当切换到横屏时，A+表示新的activity实例：\r\n(A)onPause → (A)onStop → (A)onDestory → (A+)onCreate → (A+)onStart → (A+)onResume\r\n当切换回竖屏时：\r\n(A)onPause → (A)onStop → (A)onDestory → (A+)onCreate → (A+)onStart → (A+)onResume\r\n\r\n疑问：网上有blog写切回竖屏时会执行两遍生命周期方法，是由于Android版本不同？待确认\r\n\r\n#### 4、 点击home/点击最近任务的生命周期\r\n\r\n点击home/最近任务：\r\n(A)onPause → (A)onStop\r\n返回到A界面：\r\n(A)onRestart → (A)onStart → (A)onResume\r\n\r\n#### 5、各个生命周期的理解\r\n\r\nonCreate：这是Activity生命周期的第一个方法，此时Activity在后台，还不可见\r\nonStart：此时Activity已经可见，但是还没有到前台，不能进行交互操作\r\nonResume： 此时Activity出现在前台并可见，此时可以进行独占的操作（比如打开相机）\r\nonPause：此时Activity仍然在前台并可见，可以进行一些轻量级的释放操作，android中指定如果onPause在500ms即0.5秒内没有执行完毕的话就会强制关闭Activity\r\nonStop：此时Activity已经不可见，但是Activity对象还在内存中，没有被销毁\r\nonDestory：此阶段Activity对象即将销毁，不可见，可以进行一些资源释放操作\r\nonRestart：当Activity重新恢复可见时的回调，比如从其他Activity返回或者按Home键后回到应用，一般用不到这个回调\r\n\r\n综上，onCreate、onDestory表示Activity的创建和销毁，onStart、onStop表示Activity的可见和不可见，onResume、onPause表示Activity是否可进行交互和编辑\r\n\r\n#### 参考资料：\r\n\r\n- [了解 Activity 生命周期](https://developer.android.google.cn/guide/components/activities/activity-lifecycle?hl=zh-cn) \r\n- [深入理解Activity的生命周期](https://www.jianshu.com/p/fb44584daee3) ",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/49/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/48",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/48/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/48/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/48/events",
        "html_url": "https://github.com/itlgl/note/issues/48",
        "id": 855293032,
        "node_id": "MDU6SXNzdWU4NTUyOTMwMzI=",
        "number": 48,
        "title": "阿里云服务器(Centos 8.1)初始化设置",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2021-04-11T12:20:12Z",
        "updated_at": "2021-04-12T15:35:36Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "### 1、添加操作用户itlgl，设置便捷登录方式\r\n\r\n#### 1.1 服务端命令\r\n\r\n```cmd\r\n// 创建新用户itlgl\r\nadduser itlgl\r\n\r\n// 设置itlgl的密码\r\npasswd itlgl\r\n\r\n// 给用户itlgl增加sudo权限\r\n// visudo命令默认会使用vi编辑器，在文件中\r\nvisudo\r\n```\r\n\r\n`visudo`命令默认使用vi编辑器编辑，在文件中找到如下位置，仿照root用户，给普通用户添加权限，保存\r\n<br/>\r\n![visudo修改位置](https://user-images.githubusercontent.com/7078104/114302676-9e1bf300-9afc-11eb-80df-4f672cc33bba.PNG)\r\n<br/>\r\n\r\n```cmd\r\n// 切换到用户itlgl\r\nsu itlgl\r\n\r\n// 生成sshkey，在默认位置生成rsa的sshkey\r\nssh-keygen -t rsa\r\n```\r\n\r\n这里打断一下，用`WinSCP`用户名密码登录itlgl账户，将`.ssh/id_rsa`下载下来，使用putty下的`PuTTYgen`工具转换一下sshkey\r\n选择`Conversions -> Import Key`选择刚下载下来的`id_rsa`文件，工具会自动解析；\r\n选择`File -> Save Private Key`将转换完成的ppk文件保存到本地，用于putty的后续设置。\r\n\r\n```cmd\r\n// 复制pubkey为文件~/.ssh/authorized_keys\r\ncp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys\r\n\r\n// 设置.ssh文件夹只有itlgl用户有权限操作，否则sshkey不能使用\r\nchmod 600 ~/.ssh/authorized_keys\r\nchmod 700 ~/.ssh\r\n\r\n// 修改ssh配置文件\r\nvim /etc/ssh/sshd_config\r\n// 修改以下三个位置\r\n  PubkeyAuthentication yes //允许pubkey验证登录\r\n  PermitRootLogin no // 禁止root用户登录\r\n  PasswordAuthentication no //禁止密码验证登录\r\n\r\n// 重启ssh服务\r\nsudo service sshd restart\r\n```\r\n\r\n到这里服务端已经设置好了。\r\n\r\n#### 1.2 putty免密登录设置\r\n\r\n接下来是**putty**的免密登录设置：\r\n<br/>\r\n![putty-setting-1](https://user-images.githubusercontent.com/7078104/114303733-323c8900-9b02-11eb-9f4c-ffa487e8884d.PNG)\r\n<br/>\r\n![putty-setting-2](https://user-images.githubusercontent.com/7078104/114303737-35d01000-9b02-11eb-92bb-d4ce6159e952.PNG)\r\n<br/>\r\n![putty-setting-3](https://user-images.githubusercontent.com/7078104/114303742-38cb0080-9b02-11eb-92ae-b01904ed2296.PNG)\r\n<br/>\r\n**最后回到`Session`标签页，再点击`Save`保存一次即可。**\r\n\r\n#### 1.3 putty设置快捷登录方式\r\n\r\n桌面新建putty快捷方式，编辑`属性 -> 常规 -> 目标(T):` ，修改为`\"C:\\Program Files\\PuTTY\\putty.exe\" -load aliyun_server`，最后的`aliyun_server`是上面你自定义的session名字，这样直接双击快捷方式可以直接登录到服务器，不用做任何输入操作。\r\n\r\n### To be continued...\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/48/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/47",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/47/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/47/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/47/events",
        "html_url": "https://github.com/itlgl/note/issues/47",
        "id": 829806847,
        "node_id": "MDU6SXNzdWU4Mjk4MDY4NDc=",
        "number": 47,
        "title": "Android中的Handler",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2021-03-12T06:38:26Z",
        "updated_at": "2021-03-12T06:38:26Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "Handler是Android中最常用的消息机制，具体指示涉及到Looper、MessageQueue、ThreadLocal、binder、epoll的知识。\r\n\r\n## 0、先说自己的总结\r\n\r\n- Looper负责从MessageQueue中循环取消息并分发，通过ThreadLocal机制保证每个线程只有一个Looper实例，Looper.getMainLooper()所在的线程就是主线程\r\n- MessageQueue存储维护了一个有序链表，并通过epoll机制实现消息实时处理\r\n- Handler负责发送Message，并在Looper取到消息后进行消息实际回调处理\r\n\r\n以下基于android-30的源码进行分析。\r\n\r\n## 1、从Looper说起\r\nLooper中常用的是两个方法：`prepare()`和`loop()`\r\n\r\n### prepare()方法\r\n`prepare()`方法很简单，将Looper实例加入到ThreadLocal线程变量副本中，如果已经初始化过，会抛出运行时异常`Only one Looper may be created per thread`：\r\n```java\r\n// 在线程中初始化looper的常用方法\r\npublic static void prepare() {\r\n    prepare(true);\r\n}\r\n\r\nprivate static void prepare(boolean quitAllowed) {\r\n    // 通过ThreadLocal的机制，保证每个线程只有一个Looper实例\r\n    if (sThreadLocal.get() != null) {\r\n        throw new RuntimeException(\"Only one Looper may be created per thread\");\r\n    }\r\n    sThreadLocal.set(new Looper(quitAllowed));\r\n}\r\n...\r\n// 初始化主线程looper的方法，这个方法不需要我们手动调用，在App启动阶段已经有ActivityThread调用过\r\npublic static void prepareMainLooper() {\r\n    prepare(false);\r\n    synchronized (Looper.class) {\r\n        if (sMainLooper != null) {\r\n            throw new IllegalStateException(\"The main Looper has already been prepared.\");\r\n        }\r\n        sMainLooper = myLooper();\r\n    }\r\n}\r\n...\r\npublic static @Nullable Looper myLooper() {\r\n    return sThreadLocal.get();\r\n}\r\n\r\n// 私有的构造方法，在这里初始化了Looper对应的MessageQ对象，保证一一对应\r\nprivate Looper(boolean quitAllowed) {\r\n    mQueue = new MessageQueue(quitAllowed);\r\n    mThread = Thread.currentThread();\r\n}\r\n```\r\n\r\n可以看到，Looper内通过ThreadLocal机制保证每个线程只能由一个Looper实例和一个MessageQueue实例。\r\n关于ThreadLocal机制，这个不是本文的重点，可以参考文章：[Java并发编程：深入剖析ThreadLocal](https://cnblogs.com/dolphin0520/p/3920407.html)。\r\n\r\n### loop()方法\r\n`loop()`就是开启循环的地方，循环读取消息并分发，调用这个方法后当前线程会进入阻塞状态，在它后面的代码不会被执行到：\r\n```java\r\n/**\r\n * Run the message queue in this thread. Be sure to call\r\n * {@link #quit()} to end the loop.\r\n */\r\npublic static void loop() {\r\n    // 获取当前线程的looper实例，基于前面的ThreadLocal原理\r\n    final Looper me = myLooper();\r\n    if (me == null) {\r\n        throw new RuntimeException(\"No Looper; Looper.prepare() wasn't called on this thread.\");\r\n    }\r\n    if (me.mInLoop) {\r\n        Slog.w(TAG, \"Loop again would have the queued messages be executed\"\r\n                + \" before this one completed.\");\r\n    }\r\n\r\n    me.mInLoop = true;\r\n    // 每一个Looper都有唯一的一个MessageQueue\r\n    final MessageQueue queue = me.mQueue;\r\n\r\n    // Make sure the identity of this thread is that of the local process,\r\n    // and keep track of what that identity token actually is.\r\n    Binder.clearCallingIdentity();\r\n    final long ident = Binder.clearCallingIdentity();\r\n\r\n    // Allow overriding a threshold with a system prop. e.g.\r\n    // adb shell 'setprop log.looper.1000.main.slow 1 && stop && start'\r\n    final int thresholdOverride =\r\n            SystemProperties.getInt(\"log.looper.\"\r\n                    + Process.myUid() + \".\"\r\n                    + Thread.currentThread().getName()\r\n                    + \".slow\", 0);\r\n\r\n    boolean slowDeliveryDetected = false;\r\n\r\n    // 开启死循环\r\n    for (;;) {\r\n        // 从MessageQueue中取下一条消息，next()方法实际是epoll的机制保证没有消息时的线程挂起状态\r\n        Message msg = queue.next(); // might block\r\n        if (msg == null) {\r\n            // No message indicates that the message queue is quitting.\r\n            return;\r\n        }\r\n\r\n        // This must be in a local variable, in case a UI event sets the logger\r\n        // 如果我们手动给Handler设置logging回调，可以通过监听Dispatching和Finished之间的间隔判断是否发生ANR\r\n        final Printer logging = me.mLogging;\r\n        if (logging != null) {\r\n            logging.println(\">>>>> Dispatching to \" + msg.target + \" \" +\r\n                    msg.callback + \": \" + msg.what);\r\n        }\r\n        // Make sure the observer won't change while processing a transaction.\r\n        final Observer observer = sObserver; // app内不能直接设置observer，hide隐藏方法，这里略过不看\r\n\r\n        final long traceTag = me.mTraceTag;\r\n        long slowDispatchThresholdMs = me.mSlowDispatchThresholdMs;\r\n        long slowDeliveryThresholdMs = me.mSlowDeliveryThresholdMs;\r\n        if (thresholdOverride > 0) {\r\n            slowDispatchThresholdMs = thresholdOverride;\r\n            slowDeliveryThresholdMs = thresholdOverride;\r\n        }\r\n        final boolean logSlowDelivery = (slowDeliveryThresholdMs > 0) && (msg.when > 0);\r\n        final boolean logSlowDispatch = (slowDispatchThresholdMs > 0);\r\n\r\n        final boolean needStartTime = logSlowDelivery || logSlowDispatch;\r\n        final boolean needEndTime = logSlowDispatch;\r\n\r\n        if (traceTag != 0 && Trace.isTagEnabled(traceTag)) {\r\n            Trace.traceBegin(traceTag, msg.target.getTraceName(msg));\r\n        }\r\n\r\n        final long dispatchStart = needStartTime ? SystemClock.uptimeMillis() : 0;\r\n        final long dispatchEnd;\r\n        Object token = null;\r\n        if (observer != null) {\r\n            token = observer.messageDispatchStarting();\r\n        }\r\n        long origWorkSource = ThreadLocalWorkSource.setUid(msg.workSourceUid);\r\n        try {\r\n            // 将msg交给target的Handler去处理消息\r\n            msg.target.dispatchMessage(msg);\r\n            if (observer != null) {\r\n                observer.messageDispatched(token, msg);\r\n            }\r\n            dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : 0;\r\n        } catch (Exception exception) {\r\n            if (observer != null) {\r\n                observer.dispatchingThrewException(token, msg, exception);\r\n            }\r\n            throw exception;\r\n        } finally {\r\n            ThreadLocalWorkSource.restore(origWorkSource);\r\n            if (traceTag != 0) {\r\n                Trace.traceEnd(traceTag);\r\n            }\r\n        }\r\n        if (logSlowDelivery) {\r\n            if (slowDeliveryDetected) {\r\n                if ((dispatchStart - msg.when) <= 10) {\r\n                    Slog.w(TAG, \"Drained\");\r\n                    slowDeliveryDetected = false;\r\n                }\r\n            } else {\r\n                if (showSlowLog(slowDeliveryThresholdMs, msg.when, dispatchStart, \"delivery\",\r\n                        msg)) {\r\n                    // Once we write a slow delivery log, suppress until the queue drains.\r\n                    slowDeliveryDetected = true;\r\n                }\r\n            }\r\n        }\r\n        if (logSlowDispatch) {\r\n            showSlowLog(slowDispatchThresholdMs, dispatchStart, dispatchEnd, \"dispatch\", msg);\r\n        }\r\n\r\n        if (logging != null) {\r\n            logging.println(\"<<<<< Finished to \" + msg.target + \" \" + msg.callback);\r\n        }\r\n\r\n        // Make sure that during the course of dispatching the\r\n        // identity of the thread wasn't corrupted.\r\n        final long newIdent = Binder.clearCallingIdentity();\r\n        if (ident != newIdent) {\r\n            Log.wtf(TAG, \"Thread identity changed from 0x\"\r\n                    + Long.toHexString(ident) + \" to 0x\"\r\n                    + Long.toHexString(newIdent) + \" while dispatching to \"\r\n                    + msg.target.getClass().getName() + \" \"\r\n                    + msg.callback + \" what=\" + msg.what);\r\n        }\r\n\r\n        // 调用msg的回收方法，将Message内的成员变量置空，并将其加入到缓存链表中，下次调用Message.obtain()方法就可以复用\r\n        msg.recycleUnchecked();\r\n    }\r\n}\r\n```\r\n\r\n可以看出，Looper的loop方法开启了一个死循环，循环的将MessageQueue中取到的消息分发到`target`对应的Handler中进行处理。\r\nMessage是一个链表结构，通过`next`变量存储下一个Message，当调用到recycleUnchecked方法时，会将内部变量置空，并加入到Message的静态变量`sPool`的链表中，供缓存使用。\r\n\r\n### MainLooper的初始化时机\r\nApp在启动时，Zygote进程会反射到ActivityThread类的main方法，在这里进行了MainLooper的初始化。\r\n有关App的启动流程不是本文重点，参考文章：[App 启动过程-AndroidOfferKiller](https://github.com/Blankj/AndroidOfferKiller/blob/master/android/App%20%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E5%90%AB%20Activity%20%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%EF%BC%89.md)\r\n```java\r\n// http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/app/ActivityThread.java#6459\r\npublic static void main(String[] args) {\r\n    ...\r\n    Looper.prepareMainLooper();\r\n\r\n    ActivityThread thread = new ActivityThread();\r\n    thread.attach(false);\r\n    ...\r\n    Looper.loop();\r\n    \r\n   throw new RuntimeException(\"Main thread loop unexpectedly exited\");\r\n}\r\n\r\n// http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/app/ActivityThread.java#6315\r\nprivate void attach(boolean system) {\r\n    sCurrentActivityThread = this;\r\n    mSystemThread = system;\r\n    if (!system) {\r\n        ...\r\n        final IActivityManager mgr = ActivityManager.getService();\r\n        try {\r\n            mgr.attachApplication(mAppThread);\r\n        } catch (RemoteException ex) {\r\n            ...\r\n        }\r\n        ...\r\n    }\r\n    ...\r\n}\r\n```\r\n\r\nmain方法很简单，loop方法调用后当前线程会进入阻塞状态，可以认为ActivityThread的main方法执行的线程就是主线程。\r\n在`attach`方法中，和ActivityManagerService(AMS)完成绑定，AMS会在后续中通过binder机制将消息传入到ActivityThread中的内部Handler变量`mH`中，完成生命周期的回调。\r\n由于binder机制有线程池机制，所以ActivityThread接收到的AMS回调是执行在binder线程中的，再通过handler将消息发送到主线程执行。有关binder线程池机制介绍参考：[Binder Driver浅析：Binder线程池](https://www.jianshu.com/p/8af1998a0c84)\r\n\r\n## 2、Handler源码分析\r\nHandler的源码相对简单一点，它负责发送消息和处理消息。\r\n\r\n### Handler的构造方法\r\n```java\r\n// 最常用的构造函数是这个\r\n@Deprecated\r\npublic Handler() {\r\n    this(null, false);\r\n}\r\n\r\n// 这个函数是hide的，不能调用，主要是因为async这个变量，async=true表示handler发送的所有消息都是异步的，不受同步屏障影响\r\n// @hide\r\npublic Handler(@Nullable Callback callback, boolean async) {\r\n    if (FIND_POTENTIAL_LEAKS) {// 默认为false，用来检查非static的Handler实例，防止内存泄漏\r\n        final Class<? extends Handler> klass = getClass();\r\n        if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&\r\n                (klass.getModifiers() & Modifier.STATIC) == 0) {\r\n            Log.w(TAG, \"The following Handler class should be static or leaks might occur: \" +\r\n                klass.getCanonicalName());\r\n        }\r\n    }\r\n\r\n    // 获取当前线程的looper对象，通过ThreadLocal机制\r\n    mLooper = Looper.myLooper();\r\n    if (mLooper == null) {\r\n        throw new RuntimeException(\r\n            \"Can't create handler inside thread \" + Thread.currentThread()\r\n                    + \" that has not called Looper.prepare()\");\r\n    }\r\n    // 获取和looper一一对应的MessageQueue对象\r\n    mQueue = mLooper.mQueue;\r\n    mCallback = callback;\r\n    mAsynchronous = async;\r\n}\r\n```\r\n\r\n### post和postDelayed方法\r\n发送消息最常用的就是post和postDelayed方法：\r\n```java\r\npublic final boolean postDelayed(@NonNull Runnable r, long delayMillis) {\r\n    return sendMessageDelayed(getPostMessage(r), delayMillis);\r\n}\r\n\r\npublic final boolean post(@NonNull Runnable r) {\r\n   // 可以看到，post内部调用的也是sendMessageDelayed方法，和postDelayed一致\r\n   return  sendMessageDelayed(getPostMessage(r), 0);\r\n}\r\n\r\nprivate static Message getPostMessage(Runnable r) {\r\n    // 通过obtain方法复用之前的Message对象\r\n    Message m = Message.obtain();\r\n    m.callback = r;\r\n    return m;\r\n}\r\n\r\npublic final boolean sendMessageDelayed(@NonNull Message msg, long delayMillis) {\r\n    if (delayMillis < 0) {\r\n        delayMillis = 0;\r\n    }\r\n    // 转换为确定时间\r\n    return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);\r\n}\r\n\r\npublic boolean sendMessageAtTime(@NonNull Message msg, long uptimeMillis) {\r\n    // mQueue是在Handler的构造里面初始化的，拿到的是Looper内的queue实例，线程内唯一\r\n    MessageQueue queue = mQueue;\r\n    if (queue == null) {\r\n        RuntimeException e = new RuntimeException(\r\n                this + \" sendMessageAtTime() called with no mQueue\");\r\n        Log.w(\"Looper\", e.getMessage(), e);\r\n        return false;\r\n    }\r\n    return enqueueMessage(queue, msg, uptimeMillis);\r\n}\r\n\r\nprivate boolean enqueueMessage(@NonNull MessageQueue queue, @NonNull Message msg,\r\n        long uptimeMillis) {\r\n    // 将target设置为handler自己，给Looper后面分发消息使用\r\n    msg.target = this;\r\n    msg.workSourceUid = ThreadLocalWorkSource.getUid();\r\n   // 判断是否有异步消息标志，正常开发中这个标志位是不能设置为true的，只有系统函数才能设置，这个可以通过反射或者编译时提供provide jar包的方式调用到\r\n    // 异步消息主要和同步屏障相对应，这个后面MessageQueue中会说到\r\n    if (mAsynchronous) {\r\n        msg.setAsynchronous(true);\r\n    }\r\n   // 调用MessageQueue的enqueueMessage方法，将消息加入到队列中\r\n    return queue.enqueueMessage(msg, uptimeMillis);\r\n}\r\n```\r\n\r\n那Handler是怎么分发消息的呢，通过Looper的loop方法代码可以看到，Looper从MessageQueue中取到消息后，会通过`msg.target.dispatchMessage(msg)`执行Handler的dispatchMessage方法。\r\n那看一下dispatchMessage方法：\r\n```java\r\npublic void dispatchMessage(@NonNull Message msg) {\r\n    // 首先判断msg的callback是否为null，这个就是之前post方法内的Runnable对象\r\n    // handleCallback方法内部其实调用的就是message.callback.run()，直接执行Runnable内的run方法\r\n    if (msg.callback != null) {\r\n        handleCallback(msg);\r\n    } else {\r\n        // 再判断handler本身的callback是否为null，如果不为null，交给callback处理\r\n        if (mCallback != null) {\r\n            if (mCallback.handleMessage(msg)) {\r\n                return;\r\n            }\r\n        }\r\n        // 最后是handler内可重写的方法handleMessage\r\n        handleMessage(msg);\r\n    }\r\n}\r\n```\r\n\r\n### Handler在子线程中的使用\r\n在子线程中使用Handler机制来发送消息，有两种方式。\r\n\r\n第一种就是在子线程中直接初始化Looper，直接用Handler即可：\r\n```java\r\nnew Thread(new Runnable() {\r\n    @Override\r\n    public void run() {\r\n        Looper.prepare();\r\n        Handler handler = new Handler() {\r\n            @Override\r\n            public void handleMessage(@NonNull Message msg) {\r\n                // 在这里处理消息\r\n            }\r\n        };\r\n        \r\n        Looper.loop();\r\n    }\r\n}).start();\r\n```\r\n\r\n第二种方式是使用`HandlerThread`，它其实是对上面代码进行的封装，它本身继承自Thread，并在run方法内调用了Looper.prepare()和Looper.loop();：\r\n```java\r\nHandlerThread handlerThread = new HandlerThread(\"test\");\r\nhandlerThread.start(); // 启动一个HandlerThread线程\r\nHandler handler = new Handler(handlerThread.getLooper()) {\r\n    @Override\r\n    public void handleMessage(@NonNull Message msg) {\r\n        // 在这里处理消息\r\n    }\r\n};\r\n```\r\n\r\n## 3、MessageQueue源码分析\r\nMessageQueue是消息队列存放处，通过epoll机制提供了消息队列的读取功能。\r\n\r\nepoll机制是Linux中kernel常用的IO多路复用机制，参考文章：[Android 消息处理以及epoll机制](https://www.jianshu.com/p/97e6e6c981b6)\r\n\r\n### MessageQueue的构造方法\r\n```java\r\nMessageQueue(boolean quitAllowed) {\r\n    mQuitAllowed = quitAllowed;\r\n    mPtr = nativeInit(); // epoll机制的初始化，通过mPtr拿到fd的引用\r\n}\r\n```\r\n\r\n### enqueueMessage方法\r\n\r\nenqueueMessage方法是放置消息的入口方法，这个方法主要是Handler最终调用，通过前面的Handler可以看到，Message消息自己有target和callback保证回调，另外一个参数when表示确定执行的时间。\r\n\r\n```java\r\nboolean enqueueMessage(Message msg, long when) {\r\n    // 通过handler发送的消息必须有target\r\n    // 没有target的消息是同步屏障消息，这个下面会看到\r\n    if (msg.target == null) {\r\n        throw new IllegalArgumentException(\"Message must have a target.\");\r\n    }\r\n\r\n    // 同步锁\r\n    synchronized (this) {\r\n        if (msg.isInUse()) {\r\n            throw new IllegalStateException(msg + \" This message is already in use.\");\r\n        }\r\n\r\n        // 对于主线程来说，没有退出机制，主线程queue退出也就代表着App无响应或退出了\r\n        if (mQuitting) {\r\n            IllegalStateException e = new IllegalStateException(\r\n                    msg.target + \" sending message to a Handler on a dead thread\");\r\n            Log.w(TAG, e.getMessage(), e);\r\n            msg.recycle();\r\n            return false;\r\n        }\r\n\r\n        // 将Message标为已经使用\r\n        msg.markInUse();\r\n        msg.when = when; // 设置when确定时间\r\n        Message p = mMessages; // mMessages是链表的根Message\r\n        boolean needWake;\r\n        if (p == null || when == 0 || when < p.when) { // 当前消息当做头消息\r\n            // New head, wake up the event queue if blocked.\r\n            msg.next = p;\r\n            mMessages = msg;\r\n            needWake = mBlocked;\r\n        } else {\r\n            // Inserted within the middle of the queue.  Usually we don't have to wake\r\n            // up the event queue unless there is a barrier at the head of the queue\r\n            // and the message is the earliest asynchronous message in the queue.\r\n            needWake = mBlocked && p.target == null && msg.isAsynchronous();\r\n            Message prev;\r\n            for (;;) { // 循环，根据when的先后顺序，找到msg应该插入的位置\r\n                prev = p;\r\n                p = p.next;\r\n                if (p == null || when < p.when) {\r\n                    break;\r\n                }\r\n                if (needWake && p.isAsynchronous()) {\r\n                    needWake = false;\r\n                }\r\n            }\r\n            msg.next = p; // invariant: p == prev.next\r\n            prev.next = msg;\r\n        }\r\n\r\n        // We can assume mPtr != 0 because mQuitting is false.\r\n        if (needWake) {\r\n            nativeWake(mPtr); // epoll机制的唤醒操作\r\n        }\r\n    }\r\n    return true;\r\n}\r\n```\r\n\r\n### next方法\r\n\r\nnext方法是取出下一条Message的方法，主要是Looper.loop方法内调用，循环读取下一条消息。\r\n\r\n```java\r\n@UnsupportedAppUsage\r\nMessage next() {\r\n    // Return here if the message loop has already quit and been disposed.\r\n    // This can happen if the application tries to restart a looper after quit\r\n    // which is not supported.\r\n    final long ptr = mPtr; // mPtr是epoll机制的fd标志\r\n    if (ptr == 0) {\r\n        return null;\r\n    }\r\n\r\n    int pendingIdleHandlerCount = -1; // -1 only during first iteration\r\n    int nextPollTimeoutMillis = 0;\r\n    for (;;) {\r\n        if (nextPollTimeoutMillis != 0) {\r\n            Binder.flushPendingCommands();\r\n        }\r\n\r\n        // epoll的阻塞方法，挂起当前线程，直到超时或者被nativeWake(mPtr)唤醒\r\n        nativePollOnce(ptr, nextPollTimeoutMillis);\r\n\r\n        synchronized (this) {\r\n            // Try to retrieve the next message.  Return if found.\r\n            final long now = SystemClock.uptimeMillis();\r\n            Message prevMsg = null;\r\n            Message msg = mMessages;\r\n            // msg.target如果是null，表示是同步屏障消息\r\n            // 那么，取到第一条异步消息\r\n            // 如果没有同步屏障，那么就取当前第一条消息\r\n            if (msg != null && msg.target == null) {\r\n                // Stalled by a barrier.  Find the next asynchronous message in the queue.\r\n                do {\r\n                    prevMsg = msg;\r\n                    msg = msg.next;\r\n                } while (msg != null && !msg.isAsynchronous());\r\n            }\r\n            if (msg != null) {\r\n                if (now < msg.when) { // 如果当前时间还不到头msg的执行时间，设置下次取消息的休眠时间，进入下一次for循环\r\n                    // Next message is not ready.  Set a timeout to wake up when it is ready.\r\n                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);\r\n                } else { // 否则，直接返回当前消息\r\n                    // Got a message.\r\n                    mBlocked = false; // 将mBlocked置为false，表示不阻塞，和enqueueMessage中对应\r\n                    if (prevMsg != null) {\r\n                        prevMsg.next = msg.next;\r\n                    } else {\r\n                        mMessages = msg.next;\r\n                    }\r\n                    msg.next = null;\r\n                    if (DEBUG) Log.v(TAG, \"Returning message: \" + msg);\r\n                    msg.markInUse();\r\n                    return msg;\r\n                }\r\n            } else {\r\n                // No more messages.\r\n                nextPollTimeoutMillis = -1;\r\n            }\r\n\r\n            // Process the quit message now that all pending messages have been handled.\r\n            if (mQuitting) {\r\n                dispose();\r\n                return null;\r\n            }\r\n\r\n            // 如果当前没有消息需要处理，进入到IdleHandler的处理内\r\n            // 通过pendingIdleHandlerCount这个变量表示是否进行过IdleHandler的处理\r\n            // If first time idle, then get the number of idlers to run.\r\n            // Idle handles only run if the queue is empty or if the first message\r\n            // in the queue (possibly a barrier) is due to be handled in the future.\r\n            if (pendingIdleHandlerCount < 0\r\n                    && (mMessages == null || now < mMessages.when)) {\r\n                pendingIdleHandlerCount = mIdleHandlers.size();\r\n            }\r\n            if (pendingIdleHandlerCount <= 0) {\r\n                // No idle handlers to run.  Loop and wait some more.\r\n                mBlocked = true;\r\n                continue;\r\n            }\r\n\r\n            if (mPendingIdleHandlers == null) {\r\n                mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];\r\n            }\r\n            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);\r\n        } // end synchronized (this)\r\n\r\n        // 如果当前没有消息需要处理，进入到IdleHandler的处理内\r\n        // Run the idle handlers.\r\n        // We only ever reach this code block during the first iteration.\r\n        for (int i = 0; i < pendingIdleHandlerCount; i++) {\r\n            final IdleHandler idler = mPendingIdleHandlers[i];\r\n            mPendingIdleHandlers[i] = null; // release the reference to the handler\r\n\r\n            boolean keep = false;\r\n            try {\r\n                keep = idler.queueIdle();\r\n            } catch (Throwable t) {\r\n                Log.wtf(TAG, \"IdleHandler threw exception\", t);\r\n            }\r\n\r\n            if (!keep) {\r\n                synchronized (this) {\r\n                    mIdleHandlers.remove(idler);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Reset the idle handler count to 0 so we do not run them again.\r\n        pendingIdleHandlerCount = 0;\r\n\r\n        // While calling an idle handler, a new message could have been delivered\r\n        // so go back and look again for a pending message without waiting.\r\n        nextPollTimeoutMillis = 0;\r\n    }\r\n}\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/47/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/46",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/46/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/46/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/46/events",
        "html_url": "https://github.com/itlgl/note/issues/46",
        "id": 782512523,
        "node_id": "MDU6SXNzdWU3ODI1MTI1MjM=",
        "number": 46,
        "title": "TLV编码结构",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2021-01-09T04:50:30Z",
        "updated_at": "2021-01-21T10:33:47Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "## 一、标签\r\n\r\n### 1.B1\r\n\r\n| b8 | b7 | b6 | b5 | b4 | b3 | b2 | b1 | 描述 |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| x | x | 1 | x | x | x | x | x | 复合TLV |\r\n| x | x | x | 1 | 1 | 1 | 1 | 1 | 多字节标签 |\r\n\r\n### 2.B2（存在条件：B1 & 0x1F == 0x1F）\r\n\r\n| b8 | b7 | b6 | b5 | b4 | b3 | b2 | b1 | 描述 |\r\n|  --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| 1 | x | x | x | x | x | x | x | 后面跟随标签第3字节 |\r\n\r\n### 3.B3（存在条件：B2 & 0x80 == 0x80）\r\n\r\n| b8 | b7 | b6 | b5 | b4 | b3 | b2 | b1 | 描述 |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| 1 | x | x | x | x | x | x | x | 后面跟随标签第4字节 |\r\n\r\n### 4.B4（存在条件：B3 & 0x80 == 0x80）\r\n取值任意\r\n\r\n## 二、长度\r\n\r\n### 1.B1\r\n\r\n| b8 | b7 | b6 | b5 | b4 | b3 | b2 | b1 | 描述 |\r\n| --- | --- | --- | --- | --- | --- | --- | --- | --- |\r\n| 0 | x | x | x | x | x | x | x | b7-b1表示长度 |\r\n| 1 | x | x | x | x | x | x | x | b7-b1表示后面长度域字节数 |\r\n\r\n### 2.单字节长度计算\r\n长度 = B1\r\n\r\n### 3.多字节长度计算\r\n长度 = 大端排列的n个后续字节转换为整数。\r\n例如 长度域为0x820120，那么长度 = 0x01*256 + 0x20 = 288。\r\n\r\n## 三、数据\r\n通过前面的长度域，得到数据域的范围。如果是复合TLV，那么数据域应由1个或多个TLV格式的数据拼接而成。\r\n\r\n## 参考\r\n - [TLV-meyunxi CSDN博客](https://blog.csdn.net/meyunxi/article/details/102870585)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/46/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/45",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/45/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/45/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/45/events",
        "html_url": "https://github.com/itlgl/note/issues/45",
        "id": 760874469,
        "node_id": "MDU6SXNzdWU3NjA4NzQ0Njk=",
        "number": 45,
        "title": "centos安装代理，给windows的git配置代理",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-12-10T04:19:53Z",
        "updated_at": "2020-12-10T04:19:53Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "squid可以用来作为代理服务器软件，由于公司网络限制，使用代理来访问github\r\n\r\n### 1. 安装squid\r\n```cmd\r\n# rpm -qa | grep squid\r\nsquid-3.3.8-26.el7_2.4.x86_64            // 表示安装过\r\nyum -y install squid                            // 安装\r\n```\r\n\r\n### squid开机自启动-非必须\r\n```cmd\r\nsystemctl enable squid.service \r\n```\r\n\r\n### 配置squid\r\n```cmd\r\nsudo vim /etc/squid/squid.conf\r\n```\r\n找到\r\n```cmd\r\nhttp_access deny all\r\n```\r\n在之前添加下面数行内容\r\n```cmd\r\n# 使用basic用户名密码验证规则\r\nauth_param basic program /usr/lib64/squid/basic_ncsa_auth /etc/squid/passwd \r\n# 最多用户5个\r\nauth_param basic children 5 \r\n# 连接代理服务器时的回显信息\r\nauth_param basic realm aliyun proxy\r\n# 认证超时时间\r\nauth_param basic credentialsttl 2 hours \r\n# 用户需要认证，用户名为myproxy，用户名可以自己修改\r\nacl myproxy proxy_auth REQUIRED\r\n# myproxy用户放开http访问 \r\nhttp_access allow myproxy\r\n```\r\n增加2句隐藏真实ip变成匿名代理 这是squid 3.1的写法\r\n```cmd\r\nvia off \r\nforwarded_for delete\r\n```\r\n\r\n如果想要修改代理的端口号，在配置文件中找到http_prot配置项，修改端口号即可，默认为3128端口：\r\n```cmd\r\nhttp_port 3128\r\n```\r\n\r\n### squid 用户名密码认证\r\n使用apache 携带的工具htpasswd生成密码文件并添加相应的用户信息\r\n默认htpasswd工具未安装，可以通过指令`yum install httpd-tools`安装以后就有htpasswd工具了\r\n使用命令生成用户名和密码信息，`myproxy`是上面你设置的用户名：\r\n```cmd\r\nhtpasswd -c /etc/squid/passwd  myproxy\r\n```\r\n根据提示输入密码即可，htpasswd会在/etc/squid/passwd文件中写入一行配置信息，用户名和md5过的密码\r\n配置代理时输入密码为原密码，不是md5值\r\n\r\n### 启动服务\r\n```cmd\r\nsudo systemctl start squid.service\r\n```\r\n可以使用命令netstat -ntpl查看服务是否起来了\r\n```cmd\r\n# netstat -ntpl | grep 3128\r\ntcp6       0      0 :::3128                 :::*                    LISTEN      29764/(squid-1)\r\n```\r\n\r\n### 给浏览器firefox设置代理\r\n`选项 -> 常规 -> 网络设置 -> 设置...`，进去选择`手动代理配置`，在`HTTP代理`和`HTTPS 代理`中填上你的ip地址和代理配置的端口号(默认3128)，勾选上底下的`如果密码已保存，不提示身份验证`，即可\r\n随便访问一个网页，会弹出输入密码的窗口，填上你的用户名(上面的例子是myproxy)和密码(明文密码，不是生成的md5值)，即可访问网络\r\n\r\n### 给git bash配置代理\r\n在目录`C:\\Users\\你的用户名\\.ssh`目录下新建config文件，追加上代理指令\r\n```cmd\r\nProxyCommand \"C:\\Program Files\\Git\\mingw64\\bin\\connect.exe\" -H 127.0.0.1:1234 %h %p\r\n```\r\n`C:\\Program Files\\Git\\mingw64\\bin\\connect.exe`是git bash安装路径，`-H`表示使用http代理，`127.0.0.1:1234`是代理服务器的ip地址和端口号\r\n在git bash窗口下使用`ssh git@github.com -vT`可以测试代理服务器是否起作用，v表示显示调试信息\r\n\r\n\r\n### 参考网页：\r\n - [CentOS 7安装squid代理服务器(如何配置)](https://www.cnblogs.com/new_2050/p/7612691.html)\r\n - [使用squid搭建代理服务器(配置含义) ](https://www.hawu.me/operation/852)\r\n - [centos服务器搭建代理](https://blog.csdn.net/Qwertyuiop2016/article/details/90183014)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/45/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/44",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/44/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/44/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/44/events",
        "html_url": "https://github.com/itlgl/note/issues/44",
        "id": 692790428,
        "node_id": "MDU6SXNzdWU2OTI3OTA0Mjg=",
        "number": 44,
        "title": "ubuntu添加新用户并添加到sudo组",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-09-04T06:46:34Z",
        "updated_at": "2020-09-04T06:46:34Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "```cmd\r\nsudo adduser [用户名]\r\nsudo usermod -aG sudo [用户名]\r\n```\r\n\r\nlog:\r\n```cmd\r\nnervos@Lenovo:~$ sudo adduser cita\r\n[sudo] nervos 的密码：\r\n正在添加用户\"cita\"...\r\n正在添加新组\"cita\" (1003)...\r\n正在添加新用户\"cita\" (1003) 到组\"cita\"...\r\n创建主目录\"/home/cita\"...\r\n正在从\"/etc/skel\"复制文件...\r\n输入新的 UNIX 密码：\r\n重新输入新的 UNIX 密码：\r\npasswd：已成功更新密码\r\n正在改变 cita 的用户信息\r\n请输入新值，或直接敲回车键以使用默认值\r\n        全名 []:\r\n        房间号码 []:\r\n        工作电话 []:\r\n        家庭电话 []:\r\n        其它 []:\r\n这些信息是否正确？ [Y/n] y\r\nnervos@Lenovo:~$ sudo usermod -aG sudo cita\r\nnervos@Lenovo:~$\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/44/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/43",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/43/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/43/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/43/events",
        "html_url": "https://github.com/itlgl/note/issues/43",
        "id": 665552585,
        "node_id": "MDU6SXNzdWU2NjU1NTI1ODU=",
        "number": 43,
        "title": "trustwallet api接口",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 1041169574,
                "node_id": "MDU6TGFiZWwxMDQxMTY5NTc0",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E4%BB%A5%E5%A4%AA%E5%9D%8A",
                "name": "以太坊",
                "color": "d4c5f9",
                "default": false,
                "description": "ethereum"
            },
            {
                "id": 1041171311,
                "node_id": "MDU6TGFiZWwxMDQxMTcxMzEx",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E6%AF%94%E7%89%B9%E5%B8%81",
                "name": "比特币",
                "color": "c5def5",
                "default": false,
                "description": "bitcoin"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2020-07-25T09:28:08Z",
        "updated_at": "2021-01-20T10:50:42Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "### token列表\r\n```text\r\nPOST https://api.trustwallet.com/v3/tokens?version=1 HTTP/1.1\r\nclient: com.wallet.crypto.trustapp\r\nclient-build: 5005\r\nclient-version: 1.11.1\r\nclient-locale: zh\r\nclient-id: 9cacd8e8a6dd7e65\r\nUser-Agent: (com.wallet.crypto.trustapp; build:5005; Android: SDK-23 OS-REL-6.0.1) OkHttp\r\nx-api-key: d3713699c4ff91bc2e834c5e36aea57c\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 577\r\nHost: api.trustwallet.com\r\nConnection: Keep-Alive\r\nAccept-Encoding: gzip\r\n\r\n{\"60\":[\"0xcece9a72cD8ef15070FB944f958d413206222Fe8\"],\"820\":[\"0x43edB0E49E6eC898963d76313D6b43c62E8a93eD\"],\"6060\":[\"0xA42E820DB9A516aCb08Be5AfcBE0125295ed27Eb\"],\"61\":[\"0x0295D78dAC2A2cA79A517312f0482c3F3678AD4D\"],\"178\":[\"0x8bc5526Bf569fAf6AAd8bb58201691D329Dc6606\"],\"5718350\":[\"0x86ccf6d7894593c33a3c90dd0d16d94db1c8858f\"],\"195\":[\"TJDFkbGGnT7bk1HKuNcJShcRwSRB8ApaN5\"],\"889\":[\"0x7d83E96B504f93512F6B624fCEb2C9627FeBC2E6\"],\"714\":[\"bnb129ene9pqznrrvd0yv7snlr3jmacrpwrmuzael7\"],\"1001\":[\"0xa84464c6D7f5D7d95ee1586e63e55215346591EB\"],\"5741564\":[\"3PGunvfFZTn1ygSwPZaDpvGSna4XRLMADF9\"]}\r\n```\r\n\r\n```text\r\n{\"total\":4,\"docs\":[{\"address\":\"0x4CC19356f2D37338b9802aa8E8fc58B0373296E7\",\"name\":\"SelfKey\",\"symbol\":\"KEY\",\"type\":\"ERC20\",\"decimals\":18,\"coin\":60,\"token_id\":\"0x4CC19356f2D37338b9802aa8E8fc58B0373296E7\",\"asset_id\":\"c60_t0x4CC19356f2D37338b9802aa8E8fc58B0373296E7\"},{\"address\":\"0xDF2C7238198Ad8B389666574f2d8bc411A4b7428\",\"name\":\"Mainframe Token\",\"symbol\":\"MFT\",\"type\":\"ERC20\",\"decimals\":18,\"coin\":60,\"token_id\":\"0xDF2C7238198Ad8B389666574f2d8bc411A4b7428\",\"asset_id\":\"c60_t0xDF2C7238198Ad8B389666574f2d8bc411A4b7428\"},{\"address\":\"0xC12D1c73eE7DC3615BA4e37E4ABFdbDDFA38907E\",\"name\":\"KickToken\",\"symbol\":\"KICK\",\"type\":\"ERC20\",\"decimals\":8,\"coin\":60,\"token_id\":\"0xC12D1c73eE7DC3615BA4e37E4ABFdbDDFA38907E\",\"asset_id\":\"c60_t0xC12D1c73eE7DC3615BA4e37E4ABFdbDDFA38907E\"},{\"address\":\"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\"name\":\"HEX\",\"symbol\":\"HEX\",\"type\":\"ERC20\",\"decimals\":8,\"coin\":60,\"token_id\":\"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\"asset_id\":\"c60_t0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\"}]}\r\n```\r\n\r\n### 以太坊jsonrpc接口\r\n```text\r\nPOST https://ethereum-rpc.trustwalletapp.com/\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0xcece9a72cd8ef15070fb944f958d413206222fe8\",\"latest\"]}\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x2385cc785f7f9e6\"}\r\n```\r\n\r\n**eth_call多个一块查询的示例**\r\n```text\r\nPOST https://ethereum-rpc.trustwalletapp.com/ HTTP/1.1\r\nclient: com.wallet.crypto.trustapp\r\nclient-build: 5005\r\nclient-version: 1.11.1\r\nclient-locale: zh\r\nclient-id: 9cacd8e8a6dd7e65\r\nUser-Agent: (com.wallet.crypto.trustapp; build:5005; Android: SDK-23 OS-REL-6.0.1) OkHttp\r\nx-api-key: d3713699c4ff91bc2e834c5e36aea57c\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 1017\r\nHost: ethereum-rpc.trustwalletapp.com\r\nConnection: Keep-Alive\r\nAccept-Encoding: gzip\r\n\r\n[{\"id\":11,\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{\"data\":\"0x70a08231000000000000000000000000cece9a72cd8ef15070fb944f958d413206222fe8\",\"from\":\"0xcece9a72cd8ef15070fb944f958d413206222fe8\",\"to\":\"0x4cc19356f2d37338b9802aa8e8fc58b0373296e7\"},\"latest\"]},{\"id\":12,\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{\"data\":\"0x70a08231000000000000000000000000cece9a72cd8ef15070fb944f958d413206222fe8\",\"from\":\"0xcece9a72cd8ef15070fb944f958d413206222fe8\",\"to\":\"0xc12d1c73ee7dc3615ba4e37e4abfdbddfa38907e\"},\"latest\"]},{\"id\":13,\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{\"data\":\"0x70a08231000000000000000000000000cece9a72cd8ef15070fb944f958d413206222fe8\",\"from\":\"0xcece9a72cd8ef15070fb944f958d413206222fe8\",\"to\":\"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\"},\"latest\"]},{\"id\":14,\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{\"data\":\"0x70a08231000000000000000000000000cece9a72cd8ef15070fb944f958d413206222fe8\",\"from\":\"0xcece9a72cd8ef15070fb944f958d413206222fe8\",\"to\":\"0xdf2c7238198ad8b389666574f2d8bc411a4b7428\"},\"latest\"]}]\r\n```\r\n\r\n```text\r\n[{\"jsonrpc\":\"2.0\",\"id\":11,\"result\":\"0x00000000000000000000000000000000000000000000004419f88a8e053fb000\"},{\"jsonrpc\":\"2.0\",\"id\":12,\"result\":\"0x000000000000000000000000000000000000000000000000000050d809593800\"},{\"jsonrpc\":\"2.0\",\"id\":13,\"result\":\"0x00000000000000000000000000000000000000000000000000000002540be400\"},{\"jsonrpc\":\"2.0\",\"id\":14,\"result\":\"0x000000000000000000000000000000000000000000000031b5ecaac746d0c000\"}]\r\n\r\n```\r\n\r\n### bnb rpc接口\r\n```text\r\nGET https://binance-rpc.trustwalletapp.com/v1/account/bnb129ene9pqznrrvd0yv7snlr3jmacrpwrmuzael7\r\n\r\n{\"code\":404,\"message\":\"account not found\"}\r\n```\r\n\r\n### 币种汇率接口\r\n```text\r\nPOST https://blockatlas.trustwallet.com/v1/market/ticker HTTP/1.1\r\nclient: com.wallet.crypto.trustapp\r\nclient-build: 5005\r\nclient-version: 1.11.1\r\nclient-locale: zh\r\nclient-id: 9cacd8e8a6dd7e65\r\nUser-Agent: (com.wallet.crypto.trustapp; build:5005; Android: SDK-23 OS-REL-6.0.1) OkHttp\r\nx-api-key: d3713699c4ff91bc2e834c5e36aea57c\r\nContent-Type: application/json; charset=UTF-8\r\nContent-Length: 1810\r\nHost: blockatlas.trustwallet.com\r\nConnection: Keep-Alive\r\nAccept-Encoding: gzip\r\n\r\n{\"assets\":[{\"coin\":60,\"type\":\"coin\"},{\"coin\":820,\"type\":\"coin\"},{\"coin\":6060,\"type\":\"coin\"},{\"coin\":61,\"type\":\"coin\"},{\"coin\":178,\"type\":\"coin\"},{\"coin\":818,\"token_id\":\"0x0000000000000000000000000000456E65726779\",\"type\":\"token\"},{\"coin\":818,\"type\":\"coin\"},{\"coin\":5718350,\"type\":\"coin\"},{\"coin\":195,\"type\":\"coin\"},{\"coin\":74,\"type\":\"coin\"},{\"coin\":889,\"type\":\"coin\"},{\"coin\":0,\"type\":\"coin\"},{\"coin\":2,\"type\":\"coin\"},{\"coin\":145,\"type\":\"coin\"},{\"coin\":5,\"type\":\"coin\"},{\"coin\":136,\"type\":\"coin\"},{\"coin\":133,\"type\":\"coin\"},{\"coin\":714,\"type\":\"coin\"},{\"coin\":144,\"type\":\"coin\"},{\"coin\":1729,\"type\":\"coin\"},{\"coin\":148,\"type\":\"coin\"},{\"coin\":2017,\"type\":\"coin\"},{\"coin\":425,\"type\":\"coin\"},{\"coin\":242,\"type\":\"coin\"},{\"coin\":1001,\"type\":\"coin\"},{\"coin\":118,\"type\":\"coin\"},{\"coin\":459,\"type\":\"coin\"},{\"coin\":3,\"type\":\"coin\"},{\"coin\":500,\"token_id\":\"tfuel\",\"type\":\"token\"},{\"coin\":500,\"type\":\"coin\"},{\"coin\":1024,\"token_id\":\"ong\",\"type\":\"token\"},{\"coin\":1024,\"type\":\"coin\"},{\"coin\":17,\"type\":\"coin\"},{\"coin\":14,\"type\":\"coin\"},{\"coin\":2301,\"type\":\"coin\"},{\"coin\":19167,\"type\":\"coin\"},{\"coin\":313,\"type\":\"coin\"},{\"coin\":304,\"type\":\"coin\"},{\"coin\":175,\"type\":\"coin\"},{\"coin\":5741564,\"type\":\"coin\"},{\"coin\":457,\"type\":\"coin\"},{\"coin\":2718,\"type\":\"coin\"},{\"coin\":235,\"type\":\"coin\"},{\"coin\":42,\"type\":\"coin\"},{\"coin\":283,\"type\":\"coin\"},{\"coin\":165,\"type\":\"coin\"},{\"coin\":20,\"type\":\"coin\"},{\"coin\":1023,\"type\":\"coin\"},{\"coin\":397,\"type\":\"coin\"},{\"coin\":501,\"type\":\"coin\"},{\"coin\":60,\"token_id\":\"0xC12D1c73eE7DC3615BA4e37E4ABFdbDDFA38907E\",\"type\":\"token\"},{\"coin\":60,\"token_id\":\"0xDF2C7238198Ad8B389666574f2d8bc411A4b7428\",\"type\":\"token\"},{\"coin\":60,\"token_id\":\"0x4CC19356f2D37338b9802aa8E8fc58B0373296E7\",\"type\":\"token\"},{\"coin\":60,\"token_id\":\"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\"type\":\"token\"}],\"currency\":\"USD\"}\r\n```\r\n\r\n```text\r\n{\"currency\":\"USD\",\"docs\":[{\"coin\":60,\"token_id\":\"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\"type\":\"token\",\"price\":{\"change_24h\":1.96974,\"provider\":\"coinmarketcap\",\"value\":0.00352322201708}},{\"coin\":459,\"type\":\"coin\",\"price\":{\"change_24h\":12.7586,\"provider\":\"coinmarketcap\",\"value\":1.84117930046}},...]}\r\n```\r\n\r\n### 比特币余额同步\r\n```text\r\nGET https://bitcoin-rpc.trustwalletapp.com/v2/xpub/zpub6rfFWvovFe2XoRAiM389SH1aLVbqJQz8M4EuQ9B2ApytF3hndrwfx3XytCr9xgN8Lz2r7eMSjFXdPvhGbYoQPTrpKENy6CwzHKpBzjWJ1Gf?tokens=derived HTTP/1.1\r\nclient: com.wallet.crypto.trustapp\r\nclient-build: 5005\r\nclient-version: 1.11.1\r\nclient-locale: zh\r\nclient-id: 9cacd8e8a6dd7e65\r\nUser-Agent: (com.wallet.crypto.trustapp; build:5005; Android: SDK-23 OS-REL-6.0.1) OkHttp\r\nx-api-key: d3713699c4ff91bc2e834c5e36aea57c\r\nHost: bitcoin-rpc.trustwalletapp.com\r\nConnection: Keep-Alive\r\nAccept-Encoding: gzip\r\n```\r\n\r\n```text\r\n{\r\n    \"page\":1,\r\n    \"totalPages\":1,\r\n    \"itemsOnPage\":1000,\r\n    \"address\":\"zpub6rfFWvovFe2XoRAiM389SH1aLVbqJQz8M4EuQ9B2ApytF3hndrwfx3XytCr9xgN8Lz2r7eMSjFXdPvhGbYoQPTrpKENy6CwzHKpBzjWJ1Gf\",\r\n    \"balance\":\"29518\",\r\n    \"totalReceived\":\"7256201\",\r\n    \"totalSent\":\"7226683\",\r\n    \"unconfirmedBalance\":\"0\",\r\n    \"unconfirmedTxs\":0,\r\n    \"txs\":63,\r\n    \"txids\":[\r\n        \"abfc090d8281c026ea43794471dcc17c18a50dd0c15831eb974ae2b28462166b\",\r\n\t\t...\r\n        \"523bce5a63ebcf28ce7b0816cd7f153bb282be34a0dcb8f35396916fe25601a7\"],\r\n    \"usedTokens\":44,\r\n    \"tokens\":[\r\n        {\r\n            \"type\":\"XPUBAddress\",\r\n            \"name\":\"bc1q0hwcnp2adlam0zt4esv90lmt83arkncq4l6sck\",\r\n            \"path\":\"m/84'/0'/0'/0/0\",\r\n            \"transfers\":2,\r\n            \"decimals\":8,\r\n            \"balance\":\"0\",\r\n            \"totalReceived\":\"5460\",\r\n            \"totalSent\":\"5460\"\r\n        },\r\n        ...\r\n        {\r\n            \"type\":\"XPUBAddress\",\r\n            \"name\":\"bc1qs8ukyfua65u30efmv3n5ls5haps0k4n9ervsqd\",\r\n            \"path\":\"m/84'/0'/0'/1/58\",\r\n            \"transfers\":0,\r\n            \"decimals\":8\r\n        }]\r\n}\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/43/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/42",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/42/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/42/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/42/events",
        "html_url": "https://github.com/itlgl/note/issues/42",
        "id": 665512339,
        "node_id": "MDU6SXNzdWU2NjU1MTIzMzk=",
        "number": 42,
        "title": "麦子网页钱包ETH接口",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-07-25T04:29:27Z",
        "updated_at": "2020-08-17T02:30:37Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body":"### jsonrpc接口\r\n```text\r\nPOST https://jsonrpc.maiziqianbao.net/\r\n{jsonrpc: \"2.0\", id: 1, method: \"eth_getBalance\",…}\r\nid: 1\r\njsonrpc: \"2.0\"\r\nmethod: \"eth_getBalance\"\r\nparams: [\"0xdf7a39507e28ec1cadb7efb50cd0751c1b0e5ea1\", \"latest\"]\r\n\r\n{\"jsonrpc\":\"2.0\",\"result\":\"0x0\",\"id\":1}\r\n```\r\n\r\n### 获取token余额\r\n```text\r\nGET https://api.maiziqianbao.net/apiEth/getTokensBalancesByAddress?v=1.0&address=0xa51eea2f9ba9be60c960170012c8632ce7a76e62\r\n\r\n{\r\n    \"success\":true,\r\n    \"data\":{\r\n        \"tokenLists\":[\r\n            {\r\n                \"balance\":\"88888800000000\",\r\n                \"price_cny\":\"0.0000\",\r\n                \"decimals\":8,\r\n                \"symbol\":\"KICK\",\r\n                \"contractAddress\":\"0xc12d1c73ee7dc3615ba4e37e4abfdbddfa38907e\"\r\n            },\r\n            {\r\n                \"balance\":\"217732939377000000000000\",\r\n                \"price_cny\":\"0.0000\",\r\n                \"decimals\":18,\r\n                \"symbol\":\"HOT\",\r\n                \"contractAddress\":\"0x6c6ee5e31d828de241282b9606c8e98ea48526e2\"\r\n            },\r\n            {\r\n                \"balance\":\"300000000000000000000\",\r\n                \"price_cny\":\"53.5439\",\r\n                \"decimals\":18,\r\n                \"symbol\":\"LINK\",\r\n                \"contractAddress\":\"0x514910771af9ca656af840dff83e8264ecf986ca\"\r\n            }]\r\n    },\r\n    \"message\":\"\"\r\n}\r\n```\r\n\r\n### gasPriceOracle\r\n```text\r\nGET https://www.etherchain.org/api/gasPriceOracle\r\n\r\n{\"safeLow\":\"77.0\",\"standard\":\"78.0\",\"fast\":\"81.0\",\"fastest\":\"89.0\"}\r\n```\r\n\r\n### getErc20TransPagingByAddress\r\n```text\r\nPOST https://api.maiziqianbao.net/apiEth/getErc20TransPagingByAddress?v=1.0\r\n{\"address\":\"0xdf7a39507e28ec1cadb7efb50cd0751c1b0e5ea1\"}\r\n\r\n{\"address\":\"0xdf7a39507e28ec1cadb7efb50cd0751c1b0e5ea1\"}\r\n```\r\n\r\n### getEthTransPagingByAddress\r\n```text\r\nPOST https://api.maiziqianbao.net/apiEth/getEthTransPagingByAddress?v=1.0\r\n{\"address\":\"0xdf7a39507e28ec1cadb7efb50cd0751c1b0e5ea1\"}\r\n\r\n{\"success\":true,\"data\":{\"txs\":[],\"total\":0},\"message\":\"\"}\r\n```\r\n\r\n### baseCoinPub\r\n```text\r\nGET https://market.maiziqianbao.net/api/baseCoinPub?v=1.0&code=2275c300e95de840fe9ebc87b3a84f9a&time=1595649416\r\n\r\n{\"success\":true,\"data\":{\"legal\":[{\"name\":\"\人\民\币\",\"alias\":\"CNY\",\"symbol\":\"\￥\",\"rmb\":\"1\",\"point\":\"2\"},{\"name\":\"\美\元\",\"alias\":\"USD\",\"symbol\":\"$\",\"rmb\":\"7.02\",\"point\":\"4\"},{\"name\":\"\韩\元\",\"alias\":\"KRW\",\"symbol\":\"\₩\",\"rmb\":\"0.0058\",\"point\":\"2\"}],\"virtual\":[{\"name\":\"\比\特\币\",\"alias\":\"BTC\",\"symbol\":\"\₿\",\"rmb\":\"67104.5\",\"point\":\"8\"},{\"name\":\"EOS\",\"alias\":\"EOS\",\"symbol\":\"\",\"rmb\":\"18.52\",\"point\":\"2\"},{\"name\":\"\以\太\坊\",\"alias\":\"ETH\",\"symbol\":\"\Ξ\",\"rmb\":\"1981.5\",\"point\":\"6\"},{\"name\":\"MDS\",\"alias\":\"MDS\",\"symbol\":\"\",\"rmb\":\"0.0223\",\"point\":\"2\"},{\"name\":\"NEO\",\"alias\":\"NEO\",\"symbol\":\"NEO\",\"rmb\":\"79.64\",\"point\":\"6\"},{\"name\":\"TRX\",\"alias\":\"TRX\",\"symbol\":\"TRX\",\"rmb\":\"0.1275\",\"point\":\"4\"}]},\"message\":\"\"}\r\n\r\n{\r\n  \"success\":true,\r\n  \"data\":{\r\n    \"legal\":[\r\n      {\"name\":\"人民币\",\"alias\":\"CNY\",\"symbol\":\"￥\",\"rmb\":\"1\",\"point\":\"2\"},\r\n      {\"name\":\"美元\",\"alias\":\"USD\",\"symbol\":\"$\",\"rmb\":\"7.02\",\"point\":\"4\"},\r\n      {\"name\":\"韩元\",\"alias\":\"KRW\",\"symbol\":\"₩\",\"rmb\":\"0.0058\",\"point\":\"2\"}\r\n    ],\r\n    \"virtual\":[\r\n      {\"name\":\"比特币\",\"alias\":\"BTC\",\"symbol\":\"₿\",\"rmb\":\"67104.5\",\"point\":\"8\"},\r\n      {\"name\":\"EOS\",\"alias\":\"EOS\",\"symbol\":\"\",\"rmb\":\"18.52\",\"point\":\"2\"},\r\n      {\"name\":\"以太坊\",\"alias\":\"ETH\",\"symbol\":\"Ξ\",\"rmb\":\"1981.5\",\"point\":\"6\"},\r\n      {\"name\":\"MDS\",\"alias\":\"MDS\",\"symbol\":\"\",\"rmb\":\"0.0223\",\"point\":\"2\"},\r\n      {\"name\":\"NEO\",\"alias\":\"NEO\",\"symbol\":\"NEO\",\"rmb\":\"79.64\",\"point\":\"6\"},\r\n      {\"name\":\"TRX\",\"alias\":\"TRX\",\"symbol\":\"TRX\",\"rmb\":\"0.1275\",\"point\":\"4\"}\r\n    ]},\r\n  \"message\":\"\"}\r\n```\r\n\r\ncode和time字段计算方法：\r\n```text\r\ntime = System.currentTimeMillis() / 1000\r\ncode = md5(time + sha256(\"SQscorK9G1ZnlCPo\" + time) + time)\r\n```\r\n\r\n### tokenListPub\r\n```text\r\nGET https://market.maiziqianbao.net/api/tokenListPub?type=1&code=13b47af2dc549d2058a9bd3fb9ec9312&time=1595649415\r\n\r\n{\"success\":true,\"data\":[{\"ID\":\"1\",\"name\":\"Ethereum\",\"alias\":\"ETH\",\"symbol\":\"ETH\",\"img\":\"http:\/\/doc.xinchain.org\/token-logo\/ETH_Ethereum.png\",\"address\":\"\",\"fixed\":\"1\",\"point\":\"4\",\"decimals\":\"18\",\"type\":\"1\",\"subType\":\"ERC20\",\"gasLimit\":\"25000\",\"last2Rmb\":\"1988.4150\"},{\"ID\":\"2\",\"name\":\"MediShares\",\"alias\":\"MDS\",\"symbol\":\"MDS\",\"img\":\"http:\/\/doc.xinchain.org\/token-logo\/MDS_MediShares.png\",\"address\":\"0x66186008c1050627f979d464eabb258860563dbe\",\"fixed\":\"1\",\"point\":\"4\",\"decimals\":\"18\",\"type\":\"1\",\"subType\":\"ERC20\",\"gasLimit\":\"100000\",\"last2Rmb\":\"0.0238\"},{\"ID\":\"2370\",\"name\":\"MATH Token\",\"alias\":\"MATH\",\"symbol\":\"MATH\",\"img\":\"http:\/\/doc.xinchain.org\/token-logo\/1_MATH_MATH2.png\",\"address\":\"0x08d967bb0134f2d07f7cfb6e246680c53927dd30\",\"fixed\":\"0\",\"point\":\"4\",\"decimals\":\"18\",\"type\":\"1\",\"subType\":\"ERC20\",\"gasLimit\":\"100000\",\"last2Rmb\":\"1.2482\"},...省略一堆...],\"message\":\"\"}\r\n\r\n{\r\n    \"success\":true,\r\n    \"data\":[\r\n        {\r\n            \"ID\":\"1\",\r\n            \"name\":\"Ethereum\",\r\n            \"alias\":\"ETH\",\r\n            \"symbol\":\"ETH\",\r\n            \"img\":\"http:\/\/doc.xinchain.org\/token-logo\/ETH_Ethereum.png\",\r\n            \"address\":\"\",\r\n            \"fixed\":\"1\",\r\n            \"point\":\"4\",\r\n            \"decimals\":\"18\",\r\n            \"type\":\"1\",\r\n            \"subType\":\"ERC20\",\r\n            \"gasLimit\":\"25000\",\r\n            \"last2Rmb\":\"1988.4150\"\r\n        },\r\n        {\r\n            \"ID\":\"2\",\r\n            \"name\":\"MediShares\",\r\n            \"alias\":\"MDS\",\r\n            \"symbol\":\"MDS\",\r\n            \"img\":\"http:\/\/doc.xinchain.org\/token-logo\/MDS_MediShares.png\",\r\n            \"address\":\"0x66186008c1050627f979d464eabb258860563dbe\",\r\n            \"fixed\":\"1\",\r\n            \"point\":\"4\",\r\n            \"decimals\":\"18\",\r\n            \"type\":\"1\",\r\n            \"subType\":\"ERC20\",\r\n            \"gasLimit\":\"100000\",\r\n            \"last2Rmb\":\"0.0238\"\r\n        },\r\n        ...\r\n        ],\r\n    \"message\":\"\"\r\n}\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/42/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/41",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/41/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/41/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/41/events",
        "html_url": "https://github.com/itlgl/note/issues/41",
        "id": 659129611,
        "node_id": "MDU6SXNzdWU2NTkxMjk2MTE=",
        "number": 41,
        "title": "正则表达式：密码必须包含大写字母、小写字母和数字，8-30位",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-07-17T10:37:34Z",
        "updated_at": "2020-07-17T10:38:48Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "参考链接：[https://blog.csdn.net/littlebearGreat/article/details/88748679](https://blog.csdn.net/littlebearGreat/article/details/88748679)\r\n\r\n```java\r\nPattern SOFT_PASSWORD_PATTERN = Pattern.compile(\"^(?![0-9a-z]+$)(?![0-9A-Z]+$)(?![A-Za-z]+$)[0-9a-zA-Z]{8,30}$\");\r\n```\r\n\r\n`^` 匹配字符串开头\r\n`(?![0-9a-z]+$)` 至少存在一位大写字母\r\n`(?![0-9A-Z]+$)` 至少存在一位小写字母\r\n`(?![A-Za-z]+$)` 至少存在一位数字\r\n`[0-9a-zA-Z]{8,30}` 大写字母、小写字母和数字组合8-30位\r\n`$` 匹配字符串末尾",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/41/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/40",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/40/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/40/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/40/events",
        "html_url": "https://github.com/itlgl/note/issues/40",
        "id": 651952081,
        "node_id": "MDU6SXNzdWU2NTE5NTIwODE=",
        "number": 40,
        "title": "atoken网络数据抓包分析",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-07-07T02:53:42Z",
        "updated_at": "2020-07-07T02:53:42Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "网络数据开始有一些jpush的网络请求，略过不看。\r\n### 1. app更新检查\r\n**Request:**\r\n```text\r\nGET https://javaapi.biliangwang.com/nyar/appversion?app_time_zone=GMT%2B08&international=0&sys=1&currencyCode=CNY&version=3.3.33 HTTP/1.1\r\nConnection: close\r\nlanguage: ZH\r\nAuthorization: \r\nchannel: guanwanghb\r\napp_type: android\r\ndevice_id: 00f5c32e_dcb085f569e207e5_5.1.1\r\nversion: 3.3.33\r\nHost: javaapi.biliangwang.com\r\nAccept-Encoding: gzip\r\nUser-Agent: okhttp/3.12.8\r\n```\r\n**Response:**\r\n```text\r\n{\r\n    \"data\": {\r\n        \"title\": null,\r\n        \"app_url\": null,\r\n        \"upgrade_tip\": null,\r\n        \"version_name\": null,\r\n        \"version_code\": null,\r\n        \"update\": 0,\r\n        \"is_review\": 0,\r\n        \"updateTime\": 0\r\n    },\r\n    \"status\": 0\r\n}\r\n```\r\n### 2. 埋点数据(神策数据)\r\nimtoken中也有类似的数据请求，通过imtoken的url中的sensorsdata找到了[神策数据sdk](https://github.com/sensorsdata/sa-sdk-android)，一个开源的埋点监测sdk。\r\n**Request:**\r\n```text\r\nPOST https://sc.biliangwang.com:8106/sa?project=production HTTP/1.1\r\nUser-Agent: Mozilla/5.0 (Linux; Android 5.1.1; V1824A Build/LMY49I; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/52.0.2743.100 Safari/537.36\r\nContent-Length: 1461\r\nHost: sc.biliangwang.com:8106\r\nConnection: Keep-Alive\r\nAccept-Encoding: gzip\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\ncrc=210756152&gzip=1&data_list=H4sIAAAAAAAAAO1ZTYvbRhj%2BL%2FIevUKfI2lvTr9YaGHJluRQipiVXlvTlWbEzMjGhBwCTQshvYRc2p4KLU0I7baHQmCbf7PapP%2BiI8ku1tpZdpt41wmyD5ZfzTsfz%2FPMPK%2FsL%2B5ooeQ4OgxJrO1sW77tB67p%2BX1Nkgy0HdMNHMNHyDcC21TBaa6CWp2h9bWYCEloJOtkLY4ODN8duigAy%2FDAVQ1ScqDt3NG26k9tQGPOVNN%2BHQjHwAVhVN2wdVN3qjDO81ZYve158wxkwqpxIhbDPBiDxCRVwQlOU5D6CDI9Yln9OYFUXYJeEH0%2FT7FIBpEkYyKnvfql3e1rMAYqVfbWIM%2F3JeZS9ZtzlgOXBEQ99RjGJILXrnArU7OpJnDL9C1nUEWYWFiDq5Zmnre0DNNiiCNZcODqxpiMWRUWEQegYQJklKgZBoZR99xGMcKckzrt5Plv5Y8vXv56XD54spA%2BIbFMFIuoTn8N6EvkTMiQaDuSF6C%2BUJATxg%2FDGfW3dz%2FerdpwEEUG4ZCzLDxQahhxVlCF0RCnokojIhwSLmTY6GjW2WxaFFexS3FWjSmJTKu8wefsEKi2OEqMp80gitRwmBYiCdsCDlzfMe%2F223L3bNOwldyDZbmjBbkrRQxJCqEAuVmir1ATQAXjIsYS65jidCpJJNRVPaou4kN9v2nxoWox2Nvt9WoAPqqU3%2Bu17%2Blf4THu9WzkBNXuaO%2BEBIuQZDnjMmyIm5F9KcSdwEc2Ciy0CnG7Q7yFeANzGKmdJVXAuAzSAXLNwDI9YxXQbgd0C%2BgowZRC2ix7VGA6wXSUHGjnAW6dlbZpeQoqa7V3Wu%2B3d94iMNmvz%2FbOQC9ooNdrhWfVa9muo2TquEvite13ufDb45BjDp16r1G9ZzhYh3xNz7Idw7WDZbtzHdt7z%2FX7QUrqVXXSvYh0IYVMYdfgMiuxmrp2LcKeDxcxKhvKyqO%2Fy%2Fu%2F%2FPPoz%2FLh%2Fe3Tx0enD%2B%2BdPD8%2B%2FeteEyofPH31%2Bx%2Bvjr5r2i32MVvJvAJSGI3U7G5CitUM4FM8ZYV888207bq%2BGTimZ67YTM47ZwZNSNF1u766CTjdren%2BpCBx5wxX7wwXI2QtNuEHhm9bCFlLykbKPzZZ2Wt%2BHpqL%2FjMKGaMkagi5UUjJOulfVPpveOyaBnJc9dzurVQn2mR1vu1zt6to%2FndFM%2FuJLqNh%2Bl89sN4zeUWF0y5htsufnpXffF%2F%2B%2FO3J8YuXP3x97RWO8gHkOIHhLD8uIGQHm7zTrsgHGvLnbrCHR9DtxitxAQvZhmWYzvJfEgg57iYr89xjpV1XdEX39RXdq5l4O9X2l%2F8C0DfzgE8eAAA%3D\r\n```\r\n**Response:**\r\n```text\r\n返回数据时hex，不能转为string\r\n0x0D, 0x0A, 0x1F, 0x8B, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\r\n```\r\n请求参数上data_list看着是urlEncode过的base64数据，解码base64以后转String失败。gzip=1表示是gzip数据，将base64解码的hex数据写入本地文件，再用winrar工具解压gzip，得到一个json文件，内容如下：\r\n```json\r\n[{\"_track_id\":-283895178,\"time\":1594086680931,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"wallet.gem.com.gem.welcome.ui.SplashActivity######\"},\"event\":\"$AppStart\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$resume_from_background\":false,\"$is_first_time\":true,\"$screen_name\":\"wallet.gem.com.gem.welcome.ui.SplashActivity\",\"$title\":\"AToken\",\"$is_first_day\":true},\"_flush_time\":1594086695841},{\"_track_id\":-731035179,\"time\":1594086680631,\"type\":\"profile_set\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"com.sensorsdata.analytics.android.sdk.SensorsDataAPI##trackEvent##SensorsDataAPI.java##3649\"},\"properties\":{\"has_import_wallet\":false},\"_flush_time\":1594086695841},{\"_track_id\":-498636926,\"time\":1594086680633,\"type\":\"profile_set\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"com.sensorsdata.analytics.android.sdk.SensorsDataAPI##trackEvent##SensorsDataAPI.java##3649\"},\"properties\":{\"wallet_counts\":0},\"_flush_time\":1594086695841},{\"_track_id\":965192170,\"time\":1594086680635,\"type\":\"profile_set\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"com.sensorsdata.analytics.android.sdk.SensorsDataAPI##trackEvent##SensorsDataAPI.java##3649\"},\"properties\":{\"channel_id\":\"guanwanghb\"},\"_flush_time\":1594086695842},{\"_track_id\":-127569278,\"time\":1594086680932,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"wallet.gem.com.gem.welcome.ui.SplashActivity######\"},\"event\":\"$AppViewScreen\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$screen_name\":\"wallet.gem.com.gem.welcome.ui.SplashActivity\",\"$title\":\"AToken\",\"$is_first_day\":true},\"_flush_time\":1594086695842},{\"_track_id\":235409345,\"time\":1594086683331,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"wallet.gem.com.gem.welcome.ui.PrepareActivity######\"},\"event\":\"$AppViewScreen\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$screen_name\":\"wallet.gem.com.gem.welcome.ui.PrepareActivity\",\"$title\":\"AToken\",\"$is_first_day\":true},\"_flush_time\":1594086695842},{\"_track_id\":1723405390,\"time\":1594086685437,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"wallet.gem.com.gem.welcome.ui.PrepareActivity######\"},\"event\":\"$AppClick\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$element_id\":\"wallet_import\",\"$screen_name\":\"wallet.gem.com.gem.welcome.ui.PrepareActivity\",\"$title\":\"AToken\",\"$element_content\":\"导入钱包-支持主流钱包助记词导入\",\"$element_type\":\"android.widget.RelativeLayout\",\"$is_first_day\":true},\"_flush_time\":1594086695842},{\"_track_id\":-558194171,\"time\":1594086685441,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"wallet.gem.com.gem.wallet.ui.WalletRealImportGuideActivity######\"},\"event\":\"$AppViewScreen\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$screen_name\":\"wallet.gem.com.gem.wallet.ui.WalletRealImportGuideActivity\",\"$title\":\"AToken\",\"$is_first_day\":true},\"_flush_time\":1594086695842},{\"_track_id\":1890832662,\"time\":1594086686340,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"com.sensorsdata.analytics.android.sdk.SensorsDataAPI##trackEvent##SensorsDataAPI.java##3649\"},\"event\":\"MnemonicImportButton\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$is_first_day\":true},\"_flush_time\":1594086695842},{\"_track_id\":-1064596572,\"time\":1594086686346,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"wallet.gem.com.gem.wallet.ui.WalletRealImportGuideActivity######\"},\"event\":\"$AppClick\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$element_id\":\"import_mn_layout\",\"$screen_name\":\"wallet.gem.com.gem.wallet.ui.WalletRealImportGuideActivity\",\"$title\":\"AToken\",\"$element_content\":\"助记词导入-填写备份的助记词导入\",\"$element_type\":\"android.widget.RelativeLayout\",\"$is_first_day\":true},\"_flush_time\":1594086695842},{\"_track_id\":1896449040,\"time\":1594086686639,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"com.sensorsdata.analytics.android.sdk.SensorsDataAPI##trackEvent##SensorsDataAPI.java##3649\"},\"event\":\"ImportMnemonicPage\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$is_first_day\":true},\"_flush_time\":1594086695842},{\"_track_id\":263020149,\"time\":1594086686645,\"type\":\"track\",\"distinct_id\":\"dcb085f569e207e5\",\"lib\":{\"$lib\":\"Android\",\"$lib_version\":\"3.1.4\",\"$app_version\":\"3.3.33\",\"$lib_method\":\"code\",\"$lib_detail\":\"wallet.gem.com.gem.wallet.ui.MnemonicImportActivity######\"},\"event\":\"$AppViewScreen\",\"properties\":{\"$device_id\":\"dcb085f569e207e5\",\"$model\":\"V1824A\",\"$os_version\":\"5.1.1\",\"$app_version\":\"3.3.33\",\"$manufacturer\":\"vivo\",\"$screen_height\":900,\"$os\":\"Android\",\"$carrier\":\"中国移动\",\"$screen_width\":1600,\"$lib_version\":\"3.1.4\",\"$lib\":\"Android\",\"$wifi\":true,\"$network_type\":\"WIFI\",\"$screen_name\":\"wallet.gem.com.gem.wallet.ui.MnemonicImportActivity\",\"$title\":\"AToken\",\"$is_first_day\":true},\"_flush_time\":1594086695842}]\r\n```\r\n\r\n### 3. geetest极验行为验证\r\n网络请求中有三个发往https://api.geetest.com的数据，是做行为验证的。\r\n开始抓包的时候，因为没有给模拟器加入fiddler的根证书，导致geetest验证还失败了。\r\n这个数据没有分析的必要了，极验应该有自己的sdk，分析主要目的不在此。\r\n\r\n### 4. atoken同步余额的上送地址接口\r\n第一个请求是上送客户端的地址给服务器。\r\n可以看到请求上送了一堆地址，就是客户端生成的地址，同时生成了一个walletId来标识。\r\n这个请求数据里面还有geetest_challenge这样的字段，这是上一个geetest给的，请求环环相扣，想用atoken的接口不太容易。\r\n类似的请求还有一个，这里只贴上第二个的请求内容。\r\n**Request:**\r\n```text\r\nPOST https://javaapi.biliangwang.com/nyar/v7/new-address/ HTTP/1.1\r\nConnection: close\r\nlanguage: ZH\r\nAuthorization: \r\nchannel: guanwanghb\r\napp_type: android\r\ndevice_id: 00f5c32e_dcb085f569e207e5_5.1.1\r\nversion: 3.3.33\r\nContent-Type: application/json;charset=UTF-8\r\nContent-Length: 12622\r\nHost: javaapi.biliangwang.com\r\nAccept-Encoding: gzip\r\nUser-Agent: okhttp/3.12.8\r\n\r\n{\"v\":\"1\",\"wallet_id\":\"730c08aeef7679f9adfaec4c6f244cf33b710baabe3b5bfa876193f38bfaf544\",\"sign\":\"abd5192700a350e76d7a9f2a3152e59dd8736409c57ff65cfc7c77ff0d9b2e60\",\"addr_list\":[{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1MtaDSpv9NaP6RFJKdn7PdfbYJJhv9o8p5\",\"index\":0,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1J5ML8xHFi86ZmANPmXKsh8mJ755eADuDX\",\"index\":0,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1AdLDDSrLMsfQ9c3LyrgKdPNMMbXxrMdoC\",\"index\":1,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1CGxdBtBzRy1LypUYFbXHbQj9YLgvgEfMS\",\"index\":1,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"181hT5dkvr8SWNrNA1sbkmemwrcHQ3QCsf\",\"index\":2,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1KXx9NBDns8gGPcGQ78m6de9Q6vmYrx5Qk\",\"index\":2,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1FCMX5RxYoDnUXW7oy4NWKu8JQnueKtqiL\",\"index\":3,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1CuR8BBwAfBTCeLcsLAiErKmhssUPQAMK3\",\"index\":3,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"13NNmYqrbU9TTmDRaWineJhhgBEwQAgc6T\",\"index\":4,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1GKGiNvBbxpGEFQYwSSKRAE7A5Vjr45cSd\",\"index\":4,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1BBFuobQThKzHit2eCxwcxo5ByMBiT7fAn\",\"index\":5,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1BYRbWnFnNd7dcoRJuUxPAHye4ni9vUBRt\",\"index\":5,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1JJJdg5Nhcbwa3VYuadKkutp56roPTRABt\",\"index\":6,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"12fc3f56rfcoWY55M3F7gPXwo8DmPRPXQP\",\"index\":6,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1CDtTJXZPRUwTsooyUstcyTH8BjptYwqyH\",\"index\":7,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1Lu9FfWThQSfnUGvX1pAB6FGxgMbe24nrf\",\"index\":7,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1M7MDcawHBsbh7zattt2UGaZ3ruEsfs1GL\",\"index\":8,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1U4He4EDRsxB5MLqoyqeJtDH7q2sEDSy8\",\"index\":8,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"15FmqNYkiQdvTuBCfaR8btu6UPXJikKWUF\",\"index\":9,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1EjS296SDoPezFaoo7PWk6hkQdQeo8dHCb\",\"index\":9,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"18Ufs1GffJbCMv8kFuohAv5mokiPEav3tu\",\"index\":10,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1oQWA5U3qhVPz1R4zJNMjg5CAwrsYJdyK\",\"index\":10,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1JUNcUUnkB9oW2Jf3NYoUYm5Z2MsKNjiG1\",\"index\":11,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1LUgtZrC5VamKMY9C2ZbMQ6iYfHdQnKd6w\",\"index\":11,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"15PnKDxx1P8cnS3CMzmEyB8tD22McRhMwK\",\"index\":12,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"15chozZXGp2U5GmQmDcwqvumJ3Usq6n8MF\",\"index\":12,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1M3mNsqcbhn7XFjv6jhu6QfLV4itPVVLpu\",\"index\":13,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1AsCBXYoBwroZvvjYv5PLg4fVUxV44j4z1\",\"index\":13,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"12a1BUwhnFeBTVMTsjx1t2PwbDMRfFk4MH\",\"index\":14,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1JfLQr1wjqegvNMXuzfSLtgz36BVHqSxKf\",\"index\":14,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1BdkrkebX9XfTWK6szw9fCen5R7tbnvD2N\",\"index\":15,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1CK6WdyWs9TZT49NVpGzz5NCQ36p2NWBqx\",\"index\":15,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1CscVu7oehtoTSbmwjXSsnrpgU8dNRUYCr\",\"index\":16,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"198geD6Z4mMWZTgDcZv9g7D6uSanqwqAg8\",\"index\":16,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"19dictTrVUTSeSmyr5ufBA8rs7hoUnV7s7\",\"index\":17,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"16ZqE74dwoCUGAcZ7fvUvTCaqD8CGjMKgM\",\"index\":17,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1DzzkH4AUoDQNG8nDCbu1JFL3WcVnNtWai\",\"index\":18,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"1Ay7vT439rBcACZ6qG3MT4A5R1LPe8VVqU\",\"index\":18,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"12dfTMWRBAWKzo7cD2Z1L4G1p1MjikKNYS\",\"index\":19,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"14PJVEMKk6X2BiG8tpaDrMWFGhAywrNX9Z\",\"index\":19,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"32WpCxJbv5gXfwzbzUKNi9GukSZwYwuEG8\",\"index\":0,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"35qp6pJuLvfiEe3YP59bdiZqPgjzRFoFpJ\",\"index\":0,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3B4H2fXB1abmRuyfohkDB4yi81yezfXnYR\",\"index\":1,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3KHD4437rKGykFNixLSbE436a83gxDPzUG\",\"index\":1,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"391Mz31KPcqPug3b3jyZvqCvk9gEGY8Lwv\",\"index\":2,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3HiZMGHwWmS6hhxEUJNuqRAXKGHp71SCp5\",\"index\":2,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3QchBZU8miZ874fFKBDMwKS6yYSzt3sLjZ\",\"index\":3,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3AhjL6XLTkbiromfJxLXUimzj6AtV6CSCJ\",\"index\":3,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3H8Pr9uagbut7VWdMdWHYETWQ5cYFzEoA5\",\"index\":4,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3BVABRLdchf3NeNoKJs6kyyow3jtKL45Jb\",\"index\":4,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3BoSDn8dfJJwY135NHThHJzzvFjYwRFTyt\",\"index\":5,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3CLruGvHC4ciTF2hhbqn3xKScM2YVbNGGR\",\"index\":5,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"38qFcQ1pWy2uaX8BE9QdATBcpzuDvq9oGY\",\"index\":6,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"34DYRfjdLd9na3eGTiekyGEhiuwepMtpnS\",\"index\":6,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3PtgbhVddqNnD9x49uuPmA3SRQGD1r87NA\",\"index\":7,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3GmNqKsfwRp6wXjR3EHgPzTuaPi732jrX7\",\"index\":7,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3BgNjyrtvwRACcrCzTkmzd7u77NqZYssrn\",\"index\":8,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3G429GAQ58FNshtLztXi32NhVSqbRftDW8\",\"index\":8,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3CcjbUDTnXEjBXBWfJGab1FoU31TyrY4nd\",\"index\":9,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"37EaNCMJYifqff7USDNKqCWnBGYM9k7SM1\",\"index\":9,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3HhbK4YaLRRq45r6yCDoQr3wZrpizx4afz\",\"index\":10,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3F5GxCckSNwij6nJkwuvHm8wan2G3ZnAYg\",\"index\":10,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"32ETnwGUT6uoGimtPGu2AB41heHX2iQXPH\",\"index\":11,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3CrVgbjjjyrEGsMkeq6L1qnkUrPnxyg538\",\"index\":11,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"33YNPus3MMHGnFK1B39gPvfbdtLBF6dJ3x\",\"index\":12,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3D9UA74XEgsrCRGrDn9mNgABEduw124Mni\",\"index\":12,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"33obmwAZZUsaAXKVQyuHRuMTE37At6s8Ku\",\"index\":13,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3Q2MNM36Q1c4BaUrA7xJfZgaNJihohtYNe\",\"index\":13,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"39MMksD8CLMzCY3zmev9g9kevQuioAZSb1\",\"index\":14,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3JXM2qc2mF6sBUQzrQCNpSSKVonpgPA67t\",\"index\":14,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3KCygJ9WTg7PdJzUbr9s2w2VxcqY6XQH1F\",\"index\":15,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"36WY1E3Bqor6sAEwCidrqVxNkParesXD3M\",\"index\":15,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3BbmqgazH7pQDn6htvXK3o1QDBT2XRXvL9\",\"index\":16,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"38cXSUxprCwoT8KZziMYPRph8KCRpA5dqV\",\"index\":16,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3L31Bp5F65FB5KDGPkzSkTufH9kKsdwy7N\",\"index\":17,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3DMqcezefMcHv1e3WK4kWrGdShje1Fjjq9\",\"index\":17,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3CTKdHVU7kknjHxzSdGnwrH2zbCp8CP8X6\",\"index\":18,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"38KATDmk9sJ7GzvwZwW6eZHhmAk7uf9i1k\",\"index\":18,\"change\":1},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3Qj2QcparkehEccCwy5oZiNsGQV2nQ8JkD\",\"index\":19,\"change\":0},{\"coin_type\":\"btc\",\"addr_type\":\"16\",\"addr\":\"3NszXgHsrxPvY5Mv9FErXrTf9Vw2AXiTkQ\",\"index\":19,\"change\":1},{\"coin_type\":\"eth\",\"addr_type\":\"16\",\"addr\":\"0xcece9a72cd8ef15070fb944f958d413206222fe8\",\"index\":0,\"change\":0},{\"coin_type\":\"trx\",\"addr_type\":\"16\",\"addr\":\"TJDFkbGGnT7bk1HKuNcJShcRwSRB8ApaN5\",\"index\":0,\"change\":0},{\"coin_type\":\"usdt\",\"addr_type\":\"16\",\"addr\":\"1MtaDSpv9NaP6RFJKdn7PdfbYJJhv9o8p5\",\"index\":0,\"change\":0},{\"coin_type\":\"usdt\",\"addr_type\":\"16\",\"addr\":\"32WpCxJbv5gXfwzbzUKNi9GukSZwYwuEG8\",\"index\":0,\"change\":0},{\"coin_type\":\"ltc\",\"addr_type\":\"16\",\"addr\":\"LRjaXw4S6V4UfKhYXyszffv42TEaKomcmV\",\"index\":0,\"change\":0},{\"coin_type\":\"ltc\",\"addr_type\":\"16\",\"addr\":\"LM5kUvaheLzgcUTxVmmtrPtXQUoJ2QiGSr\",\"index\":0,\"change\":1},{\"coin_type\":\"ltc\",\"addr_type\":\"16\",\"addr\":\"LWTBPPRTsTkRyEcr8kWta6pWPSZJqXbgn8\",\"index\":1,\"change\":0},{\"coin_type\":\"ltc\",\"addr_type\":\"16\",\"addr\":\"LdWfqfg8Bj46dx9fJj9C6jTtp9ekK9cepJ\",\"index\":1,\"change\":1},{\"coin_type\":\"ltc\",\"addr_type\":\"16\",\"addr\":\"LWsZ5gqE7d4dSzJiBr7WTL1j4k2zCEsywU\",\"index\":2,\"change\":0},{\"coin_type\":\"ltc\",\"addr_type\":\"16\",\"addr\":\"LKhVxLtjTHyMvbQB1s23RHFUPU1gDeWXYe\",\"index\":2,\"change\":1},{\"coin_type\":\"etc\",\"addr_type\":\"16\",\"addr\":\"0x0295d78dac2a2ca79a517312f0482c3f3678ad4d\",\"index\":0,\"change\":0},{\"coin_type\":\"doge\",\"addr_type\":\"16\",\"addr\":\"D8F4rAQarrUq7mrCBGuyi74B3keC3bpV73\",\"index\":0,\"change\":0},{\"coin_type\":\"doge\",\"addr_type\":\"16\",\"addr\":\"DBM9P1VvEAK25BV7tkXceRNmrPNaok3DzX\",\"index\":0,\"change\":1},{\"coin_type\":\"doge\",\"addr_type\":\"16\",\"addr\":\"DLr51TTnfUqeaGKhA4qPA4Ru5GdHT4jyM5\",\"index\":1,\"change\":0},{\"coin_type\":\"doge\",\"addr_type\":\"16\",\"addr\":\"DAumnVuzcLqmmcM3iauNftmxu1Ew3cLmDT\",\"index\":1,\"change\":1},{\"coin_type\":\"doge\",\"addr_type\":\"16\",\"addr\":\"DSLCDChder1GQtsWDm1JXqeWBuKdDCrJTX\",\"index\":2,\"change\":0},{\"coin_type\":\"doge\",\"addr_type\":\"16\",\"addr\":\"D5QgAhcoACa94dxc5UyqdaTskM9UXVGXpZ\",\"index\":2,\"change\":1},{\"coin_type\":\"bch\",\"addr_type\":\"16\",\"addr\":\"1GQ1CD6yayGd5RSdCxAnJWYabYtJo6Mi8V\",\"index\":0,\"change\":0},{\"coin_type\":\"bch\",\"addr_type\":\"16\",\"addr\":\"1Hy3ce3aJJXoiQyofmioC2Zek7dkcwB4R7\",\"index\":0,\"change\":1},{\"coin_type\":\"bch\",\"addr_type\":\"16\",\"addr\":\"141PyN7CYw2fBVwnkcZdTodZyBemJNnAi5\",\"index\":1,\"change\":0},{\"coin_type\":\"bch\",\"addr_type\":\"16\",\"addr\":\"1K2Efn7hWFkwLhA4xH2eMzGBxdznEy9Bxi\",\"index\":1,\"change\":1},{\"coin_type\":\"bch\",\"addr_type\":\"16\",\"addr\":\"1GrsFALwPmPwk5hgdWUMewKNDxexWWd1ff\",\"index\":2,\"change\":0},{\"coin_type\":\"bch\",\"addr_type\":\"16\",\"addr\":\"1Fu3CUTZd9csisj6zPNMnkcapVAMevAysN\",\"index\":2,\"change\":1},{\"coin_type\":\"qtum\",\"addr_type\":\"16\",\"addr\":\"QdypxcTUFC7Vah3yYg3xwUbFcY83M3TZvp\",\"index\":0,\"change\":0},{\"coin_type\":\"qtum\",\"addr_type\":\"16\",\"addr\":\"Qcy2wLZMVJ4acduWBnbvUPD3Vw3Sryy7Jw\",\"index\":0,\"change\":1},{\"coin_type\":\"qtum\",\"addr_type\":\"16\",\"addr\":\"Qi6RDBrwujNcpdk1oDZ4XY15xSmV2dA8u2\",\"index\":1,\"change\":0},{\"coin_type\":\"qtum\",\"addr_type\":\"16\",\"addr\":\"QQHJHiMxZZScus5vwZSs25F2RjZhMHQPG6\",\"index\":1,\"change\":1},{\"coin_type\":\"qtum\",\"addr_type\":\"16\",\"addr\":\"QjW11DWWJkv4QsCPD1FXrTMnE5Go5wcsDR\",\"index\":2,\"change\":0},{\"coin_type\":\"qtum\",\"addr_type\":\"16\",\"addr\":\"QRkyejo9azu9zQoAxpKbGPiptVMydeB7wY\",\"index\":2,\"change\":1},{\"coin_type\":\"ont\",\"addr_type\":\"16\",\"addr\":\"AS63nMshpw9PCPcXb5L73eaodJYXBxLxkU\",\"index\":0,\"change\":0},{\"coin_type\":\"atom\",\"addr_type\":\"16\",\"addr\":\"cosmos14fudwlr9nwfpndq3uy85sxw4vh7ae7aw7ku505\",\"index\":0,\"change\":0},{\"coin_type\":\"dot\",\"addr_type\":\"16\",\"addr\":\"5Gy9gTHyxjGgGneUoxse18ify8849hYYjo9jsL36CEfoigTT\",\"index\":0,\"change\":0},{\"coin_type\":\"dot\",\"addr_type\":\"16\",\"addr\":\"5DCBx4vAsvKzdXxVzC51VWEVGPiWwkRirWXkCPo5hNtzrmhj\",\"index\":1,\"change\":0},{\"coin_type\":\"tomo\",\"addr_type\":\"16\",\"addr\":\"0x7d83e96b504f93512f6b624fceb2c9627febc2e6\",\"index\":0,\"change\":0}],\"device_id\":\"00f5c32e_dcb085f569e207e5_5.1.1\",\"appId\":\"57d8d1c6-5202-445a-bc21-1bbf62c224e1\",\"single\":false,\"addressType\":2,\"geetest_challenge\":\"9ddd8e1c0c0144980acebf0129ad983e\",\"geetest_validate\":\"66f06ae6e229fb12c5511006cbb1dc87\",\"geetest_seccode\":\"66f06ae6e229fb12c5511006cbb1dc87|jordan\",\"currencyCode\":\"CNY\",\"app_time_zone\":\"GMT+08\",\"firstKey\":\"03aca66d5c303d26823cc0f15c3388b6560b879802e0f34904ab306a76840762ae\",\"powHash\":\"000206eade25d7e78d6be45a2f9c9a693123b5f2745e507e7f292f22c72b60b4\",\"signNonce\":\"y8OFkvJHyCTzeJPQyuGC0bX4jRnLMgJrdwv8cZyr032U1AVfnTcYQWvNPXfsy/YSGgVUP5Wh88XNZU1yqfFIC367JhGk8eINSVF9XaYG61xGXcoUmk9AR3B6bu/l2YLdJwdJbZ9+4X9/d0Gy2diZaRwQ5xtPRPNG5Hf5XerObIc=\",\"powNonce\":\"5378\"}\r\n```\r\n**第一次请求的Response:**\r\n```text\r\n{\"data\":{\"prefix\":\"1594086770330730c08aeef7679f9adfaec4c6f244cf33b710baabe3b5bfa876193f38bfaf544\",\"diff\":\"10000\"},\"status\":310,\"msg\":\"缺少防刷字符串\"}\r\n```\r\n**第二次请求的Response:**\r\n```text\r\n{\"data\":{\"extendInfo\":[{\"coinType\":\"etc\",\"addressType\":2},{\"coinType\":\"bch\",\"addressType\":2}]},\"status\":0}\r\n```\r\n\r\n### 5. atoken同步数据的获取token接口\r\n这个接口是获取下一步请求token的接口。\r\n**Request:**\r\n```text\r\nGET https://javaapi.biliangwang.com/nyar/auth?app_time_zone=GMT%2B08&wallet_id=730c08aeef7679f9adfaec4c6f244cf33b710baabe3b5bfa876193f38bfaf544&currencyCode=CNY HTTP/1.1\r\nConnection: close\r\nlanguage: ZH\r\nAuth: \r\nchannel: guanwanghb\r\napp_type: android\r\ndevice_id: 00f5c32e_dcb085f569e207e5_5.1.1\r\nversion: 3.3.33\r\nHost: javaapi.biliangwang.com\r\nAccept-Encoding: gzip\r\nUser-Agent: okhttp/3.12.8\r\n```\r\n**Response:**\r\n```text\r\n{\"data\":\"atoken|eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjp7IjIiOnRydWV9LCJzb21lIjoiNzMwYzA4YWVlZjc2NzlmOWFkZmFlYzRjNmYyNDRjZjMzYjcxMGJhYWJlM2I1YmZhODc2MTkzZjM4YmZhZjU0NCIsImV4cCI6MTU5NDE3MzE3MX0.0bKtE2P1KNFPu93gJdS-PV8UCtNIttAHpRtsaBB6qlY\",\"status\":0}\r\n```\r\n\r\n### 6. atoken同步余额的获取余额接口\r\n只要将第一步的walletId传过去，服务器就会把页面要显示的数据全部算好，包括总余额、汇率、币种列表的顺序等等。\r\n\r\n**Request:**\r\n```text\r\nPOST https://javaapi.biliangwang.com/nyar/v13/asset HTTP/1.1\r\nConnection: close\r\nlanguage: ZH\r\nAuthorization: atoken|eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhIjp7IjIiOnRydWV9LCJzb21lIjoiNzMwYzA4YWVlZjc2NzlmOWFkZmFlYzRjNmYyNDRjZjMzYjcxMGJhYWJlM2I1YmZhODc2MTkzZjM4YmZhZjU0NCIsImV4cCI6MTU5NDE3MzE3MX0.0bKtE2P1KNFPu93gJdS-PV8UCtNIttAHpRtsaBB6qlY\r\nchannel: guanwanghb\r\napp_type: android\r\ndevice_id: 00f5c32e_dcb085f569e207e5_5.1.1\r\nversion: 3.3.33\r\nContent-Type: application/json;charset=UTF-8\r\nContent-Length: 260\r\nHost: javaapi.biliangwang.com\r\nAccept-Encoding: gzip\r\nUser-Agent: okhttp/3.12.8\r\n\r\n{\"wallet_id\":\"730c08aeef7679f9adfaec4c6f244cf33b710baabe3b5bfa876193f38bfaf544\",\"base\":\"cny\",\"new_assert\":\"1\",\"eos_account_name\":\"\",\"seos_account_name\":\"\",\"device_id\":\"00f5c32e_dcb085f569e207e5_5.1.1\",\"app_type\":1,\"currencyCode\":\"CNY\",\"app_time_zone\":\"GMT+08\"}\r\n```\r\n**Response:**\r\n```text\r\n27b\r\n{\"data\":{\"total_amount\":\"328.93\",\"backbone\":[{\"name\":\"BTC\",\"decimals\":8,\"price\":\"65377\",\"show_name\":\"BTC\",\"amount\":\"0.00048954\",\"imgurl\":\"icon_BTC_new.png\",\"full_name\":\"Bitcoin\",\"order_num\":11,\"coin_type\":\"BTC\",\"type\":0,\"id\":31374996,\"added\":\"1\",\"canShift\":\"true\",\"isDefault\":\"true\"},{\"name\":\"ETH\",\"decimals\":18,\"price\":\"1678\",\"show_name\":\"ETH\",\"amount\":\"0.1599798\",\"imgurl\":\"icon_ETH_new.png\",\"full_name\":\"Ethereum\",\"order_num\":21,\"coin_type\":\"ETH\",\"type\":60,\"id\":31374997,\"added\":\"1\",\"canShift\":\"true\",\"isDefault\":\"true\"},{\"name\":\"FOR\",\"decimals\":18,\"price\":\"0.2256\",\"show_name\":\"FOR\",\"amount\":\"0\",\"imgurl\":\"iocn_For.png\",\"full_name\"\r\n327\r\n:\"FOR\",\"order_num\":22,\"coin_type\":\"ETH\",\"type\":60,\"id\":186691168,\"daddy\":\"ETH\",\"contract_addr\":\"0x1fcdce58959f536621d76f5b7ffb955baa5a672f\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"IDRT\",\"decimals\":2,\"price\":\"0.000472\",\"show_name\":\"IDRT\",\"amount\":\"0\",\"imgurl\":\"IDRT.png\",\"full_name\":\"Rupiah Token\",\"order_num\":23,\"coin_type\":\"ETH\",\"type\":60,\"id\":173518459,\"daddy\":\"ETH\",\"contract_addr\":\"0x998ffe1e43facffb941dc337dd0468d52ba5b48a\",\"added\":\"1\",\"precision\":2,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"KNC\",\"decimals\":18,\"price\":\"11.75\",\"show_name\":\"KNC\",\"amount\":\"0\",\"imgurl\":\"icon_Kyber.png\",\"full_name\":\"Kyber Network\",\"order_num\":24,\"coin_type\":\"ETH\",\"type\":60,\"id\":187910505,\"daddy\":\"ETH\",\"contract_addr\":\"0xdd974d5c2e2928dea5f71b9825b8b646686bd200\",\"added\":\"1\",\"precision\":1\r\n160a\r\n8,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"ETC\",\"decimals\":18,\"price\":\"42.68\",\"show_name\":\"ETC\",\"amount\":\"0.51957241\",\"imgurl\":\"icon_ETC_new.png\",\"full_name\":\"Ethereum Classic\",\"order_num\":25,\"coin_type\":\"ETC\",\"type\":61,\"id\":31374998,\"added\":\"1\",\"canShift\":\"true\",\"isDefault\":\"true\"},{\"name\":\"TOMO\",\"decimals\":18,\"price\":\"4.49\",\"show_name\":\"TOMO\",\"amount\":\"0\",\"imgurl\":\"icon_TOMO.png\",\"full_name\":\"TomoChain\",\"order_num\":27,\"coin_type\":\"TOMO\",\"type\":889,\"id\":31374999,\"added\":\"1\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"EOS\",\"decimals\":4,\"price\":\"18.11\",\"show_name\":\"EOS\",\"amount\":\"0\",\"imgurl\":\"icon_EOS_new.png\",\"full_name\":\"EOS\",\"order_num\":31,\"coin_type\":\"EOS\",\"type\":194,\"id\":31375000,\"added\":\"1\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"TRX\",\"decimals\":6,\"price\":\"0.1249\",\"show_name\":\"TRX\",\"amount\":\"4.012\",\"imgurl\":\"icon_TRX_new.png\",\"full_name\":\"Tron\",\"order_num\":41,\"coin_type\":\"TRX\",\"type\":195,\"id\":31375002,\"added\":\"1\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"USDT\",\"decimals\":8,\"price\":\"7.01\",\"show_name\":\"USDT\",\"amount\":\"0\",\"imgurl\":\"icon_USDT_new.png\",\"full_name\":\"TetherUS\",\"order_num\":51,\"coin_type\":\"USDT\",\"type\":0,\"id\":31375003,\"daddy\":\"BTC\",\"added\":\"1\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"USDT\",\"decimals\":6,\"price\":\"7.06038\",\"show_name\":\"USDT\",\"amount\":\"0\",\"imgurl\":\"icon_erc20_USDT.png\",\"full_name\":\"Tether USD\",\"order_num\":55,\"coin_type\":\"ETH\",\"type\":60,\"id\":173518456,\"daddy\":\"ETH\",\"contract_addr\":\"0xdac17f958d2ee523a2206206994597c13d831ec7\",\"added\":\"1\",\"precision\":6,\"canShift\":0,\"tokenType\":\"ERC20\"}],\"bifurcate\":[{\"name\":\"LTC\",\"decimals\":8,\"price\":\"307.68\",\"show_name\":\"LTC\",\"amount\":\"0\",\"imgurl\":\"icon_LTC.png\",\"full_name\":\"Litecoin\",\"order_num\":61,\"coin_type\":\"LTC\",\"type\":2,\"id\":31375004,\"contract_addr\":\"\",\"added\":\"1\",\"canShift\":\"true\",\"isDefault\":\"true\"},{\"name\":\"ATOM\",\"decimals\":6,\"price\":\"21.15\",\"show_name\":\"ATOM\",\"amount\":\"0\",\"imgurl\":\"icon_ATOM.png\",\"full_name\":\"ATOM\",\"order_num\":71,\"coin_type\":\"ATOM\",\"type\":118,\"id\":31375005,\"contract_addr\":\"\",\"added\":\"1\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"DOT\",\"decimals\":15,\"price\":\"786.073651\",\"show_name\":\"DOT\",\"amount\":\"0\",\"imgurl\":\"icon_DOT.png\",\"full_name\":\"Polkadot\",\"order_num\":81,\"coin_type\":\"DOT\",\"type\":354,\"id\":31375006,\"contract_addr\":\"\",\"added\":\"1\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"ONT\",\"decimals\":0,\"price\":\"4.37\",\"show_name\":\"ONT\",\"amount\":\"0\",\"imgurl\":\"icon_ONT.png\",\"full_name\":\"Ontology\",\"order_num\":91,\"coin_type\":\"ONT\",\"type\":1024,\"id\":31375008,\"contract_addr\":\"\",\"added\":\"1\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"DOGE\",\"decimals\":8,\"price\":\"0.0188\",\"show_name\":\"DOGE\",\"amount\":\"0\",\"imgurl\":\"icon_DOGE.png\",\"full_name\":\"Dogecoin\",\"order_num\":111,\"coin_type\":\"DOGE\",\"type\":3,\"id\":31375009,\"contract_addr\":\"\",\"added\":\"1\",\"canShift\":\"true\",\"isDefault\":\"true\"},{\"name\":\"BCH\",\"decimals\":8,\"price\":\"1684\",\"show_name\":\"BCH\",\"amount\":\"0\",\"imgurl\":\"icon_BCH.png\",\"full_name\":\"Bitcoin Cash\",\"order_num\":121,\"coin_type\":\"BCH\",\"type\":145,\"id\":31375010,\"contract_addr\":\"\",\"added\":\"0\",\"canShift\":\"true\",\"isDefault\":\"true\"},{\"name\":\"QTUM\",\"decimals\":8,\"price\":\"12.55\",\"show_name\":\"QTUM\",\"amount\":\"0\",\"imgurl\":\"icon_QTUM_new.png\",\"full_name\":\"Qtum\",\"order_num\":131,\"coin_type\":\"QTUM\",\"type\":88,\"id\":31375011,\"contract_addr\":\"\",\"added\":\"0\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"BTG\",\"decimals\":8,\"price\":\"67.17\",\"show_name\":\"BTG\",\"amount\":\"0\",\"imgurl\":\"icon_BTG.png\",\"full_name\":\"Bitcoin Gold\",\"order_num\":151,\"coin_type\":\"BTG\",\"type\":0,\"id\":31375012,\"contract_addr\":\"\",\"added\":\"0\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"SBTC\",\"decimals\":8,\"price\":\"1.44\",\"show_name\":\"SBTC\",\"amount\":\"0\",\"imgurl\":\"icon_SBTC.png\",\"full_name\":\"Super Bitcoin\",\"order_num\":161,\"coin_type\":\"SBTC\",\"type\":0,\"id\":31375013,\"contract_addr\":\"\",\"added\":\"0\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"BCD\",\"decimals\":7,\"price\":\"4.282251\",\"show_name\":\"BCD\",\"amount\":\"0\",\"imgurl\":\"icon_BCD.png\",\"full_name\":\"Bitcoin Diamond\",\"order_num\":171,\"coin_type\":\"BCD\",\"type\":0,\"id\":31375014,\"contract_addr\":\"\",\"added\":\"0\",\"canShift\":\"false\",\"isDefault\":\"true\"},{\"name\":\"ONG\",\"decimals\":9,\"price\":\"1.49\",\"show_name\":\"ONG\",\"amount\":\"0\",\"imgurl\":\"icon_ONG.png\",\"full_name\":\"Ontology Gas\",\"order_num\":181,\"coin_type\":\"ONG\",\"type\":1024,\"id\":31375007,\"contract_addr\":\"\",\"added\":\"0\",\"canShift\":\"false\",\"isDefault\":\"true\"}],\"tokens\":[{\"name\":\"XUC\",\"decimals\":18,\"price\":\"6.86\",\"show_name\":\"XUC\",\"amount\":\"0\",\"imgurl\":\"icon_XUC1.png\",\"full_name\":\"ExchangeUnion\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518455,\"daddy\":\"ETH\",\"contract_addr\":\"0xc324a2f6b05880503444451b8b27e6f9e63287cb\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"SAI\",\"decimals\":18,\"price\":\"7.122462\",\"show_name\":\"SAI\",\"amount\":\"0\",\"imgurl\":\"icon_erc20_DAI.png\",\"full_name\":\"Dai Stablecoin v1.0\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518451,\"daddy\":\"ETH\",\"contract_addr\":\"0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359\",\"added\":\"1\",\"precision\":18,\"canShift\":1,\"tokenType\":\"ERC20\"},{\"name\":\"PAX\",\"decimals\":18,\"price\":\"7.01\",\"show_name\":\"PAX\",\"amount\":\"0\",\"imgurl\":\"icon_erc20_PAX.png\",\"full_name\":\"Paxos Standard\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518452,\"daddy\":\"ETH\",\"contract_addr\":\"0x8e870d67f660d95d5be530380d0ec0bd388289e1\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"TUSD\",\"decimals\":18,\"price\":\"7.01\",\"show_name\":\"TUSD\",\"amount\":\"0\",\"imgurl\":\"icon_erc20_TUSD.png\",\"full_name\":\"TrueUSD\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518449,\"daddy\":\"ETH\",\"contract_addr\":\"0x0000000000085d4780b73119b644ae5ecd22b376\",\"added\":\"1\",\"precision\":18,\"canShift\":1,\"tokenType\":\"ERC20\"},{\"name\":\"USDC\",\"decimals\":6,\"pri\r\n1821\r\nce\":\"7.01\",\"show_name\":\"USDC\",\"amount\":\"0\",\"imgurl\":\"icon_erc20_USDC.png\",\"full_name\":\"USD//C\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518454,\"daddy\":\"ETH\",\"contract_addr\":\"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48\",\"added\":\"1\",\"precision\":6,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"GUSD\",\"decimals\":2,\"price\":\"7.01\",\"show_name\":\"GUSD\",\"amount\":\"0\",\"imgurl\":\"icon_erc20_GUSD.png\",\"full_name\":\"Gemini dollar\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518450,\"daddy\":\"ETH\",\"contract_addr\":\"0x056fd409e1d7a124bd7017459dfea2f387b6d5cd\",\"added\":\"1\",\"precision\":2,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"ALPHA\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"ALPHA\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"ALPHA\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198549,\"daddy\":\"TRX\",\"contract_addr\":\"1002775\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"ANC\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"ANC\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"ANC\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198552,\"daddy\":\"TRX\",\"contract_addr\":\"1002881\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"AX\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"AX\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"AX\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198554,\"daddy\":\"TRX\",\"contract_addr\":\"1002814\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"AXX\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"AXX\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"AXX\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198548,\"daddy\":\"TRX\",\"contract_addr\":\"1002845\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"BIRD\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"BIRD\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"BIRD\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198550,\"daddy\":\"TRX\",\"contract_addr\":\"1002962\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"CORONA\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"CORONA\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"CORONA\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198555,\"daddy\":\"TRX\",\"contract_addr\":\"1002927\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"CSF\",\"decimals\":18,\"price\":\"0\",\"show_name\":\"CSF\",\"amount\":\"0\",\"imgurl\":\"CSF.jpg\",\"full_name\":\"\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518458,\"daddy\":\"ETH\",\"contract_addr\":\"0xffb0e0aa425c3bb62c2e9e66a3e9325e40a472da\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"DELFIN\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"DELFIN\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"DELFIN\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198553,\"daddy\":\"TRX\",\"contract_addr\":\"1002897\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"DRONE\",\"decimals\":6,\"price\":\"0\",\"show_name\":\"DRONE\",\"amount\":\"10\",\"imgurl\":\"icon_trx_DEFAULT.png\",\"full_name\":\"DRONE\",\"coin_type\":\"TRX\",\"type\":195,\"id\":9198551,\"daddy\":\"TRX\",\"contract_addr\":\"1002858\",\"added\":\"1\",\"precision\":6,\"canShift\":1,\"tokenType\":\"TRC10\"},{\"name\":\"GMM\",\"decimals\":18,\"price\":\"3.71\",\"show_name\":\"GMM\",\"amount\":\"0\",\"imgurl\":\"GMM_Token.png\",\"full_name\":\"GMM\",\"coin_type\":\"ETH\",\"type\":60,\"id\":183603740,\"daddy\":\"ETH\",\"contract_addr\":\"0x7af89c8a06719271a96e62e290ea9ed192e73fc1\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"HEX\",\"decimals\":18,\"price\":\"0.0236\",\"show_name\":\"HEX\",\"amount\":\"0\",\"imgurl\":\"icon_DEFAULT.png\",\"full_name\":\"HEX\",\"coin_type\":\"ETH\",\"type\":60,\"id\":188075126,\"daddy\":\"ETH\",\"contract_addr\":\"0x4c70cff5f06d579bfe903c25f8803102fbf37d08\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"HEX1\",\"decimals\":8,\"price\":\"0\",\"show_name\":\"HEX1\",\"amount\":\"100\",\"imgurl\":\"icon_DEFAULT.png\",\"full_name\":\"HEX\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518473,\"daddy\":\"ETH\",\"contract_addr\":\"0x2b591e99afe9f32eaa6214f7b7629768c40eeb39\",\"added\":\"1\",\"precision\":8,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"IDK\",\"decimals\":8,\"price\":\"0.490599\",\"show_name\":\"IDK\",\"amount\":\"0\",\"imgurl\":\"IDK_Token.png\",\"full_name\":\"IDK\",\"coin_type\":\"ETH\",\"type\":60,\"id\":184652741,\"daddy\":\"ETH\",\"contract_addr\":\"0x61fd1c62551850d0c04c76fce614cbced0094498\",\"added\":\"1\",\"precision\":8,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"KEY1\",\"decimals\":18,\"price\":\"0\",\"show_name\":\"KEY1\",\"amount\":\"1256.249995\",\"imgurl\":\"icon_DEFAULT.png\",\"full_name\":\"SelfKey\",\"coin_type\":\"ETH\",\"type\":60,\"id\":9454856,\"daddy\":\"ETH\",\"contract_addr\":\"0x4cc19356f2d37338b9802aa8e8fc58b0373296e7\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"KICK1\",\"decimals\":8,\"price\":\"0\",\"show_name\":\"KICK1\",\"amount\":\"888888\",\"imgurl\":\"icon_DEFAULT.png\",\"full_name\":\"KickToken\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518475,\"daddy\":\"ETH\",\"contract_addr\":\"0xc12d1c73ee7dc3615ba4e37e4abfdbddfa38907e\",\"added\":\"1\",\"precision\":8,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"MFT\",\"decimals\":18,\"price\":\"0.006338\",\"show_name\":\"MFT\",\"amount\":\"916.9995\",\"imgurl\":\"icon_DEFAULT.png\",\"full_name\":\"Mainframe\",\"coin_type\":\"ETH\",\"type\":60,\"id\":9454651,\"daddy\":\"ETH\",\"contract_addr\":\"0xdf2c7238198ad8b389666574f2d8bc411a4b7428\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"NPXS\",\"decimals\":18,\"price\":\"0.001302\",\"show_name\":\"NPXS\",\"amount\":\"0\",\"imgurl\":\"npxs.png\",\"full_name\":\"Pundi X\",\"coin_type\":\"ETH\",\"type\":60,\"id\":177578457,\"daddy\":\"ETH\",\"contract_addr\":\"0xa15c7ebe1f07caf6bff097d8a589fb8ac49ae5b3\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"TEN\",\"decimals\":18,\"price\":\"0.1605\",\"show_name\":\"TEN\",\"amount\":\"0\",\"imgurl\":\"tokenmoney.png\",\"full_name\":\"Tokenomy\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518457,\"daddy\":\"ETH\",\"contract_addr\":\"0xdd16ec0f66e54d453e6756713e533355989040e4\",\"added\":\"1\",\"precision\":18,\"canShift\":0,\"tokenType\":\"ERC20\"},{\"name\":\"eCell\",\"decimals\":2,\"price\":\"0\",\"show_name\":\"eCell\",\"amount\":\"0\",\"imgurl\":\"eCell.png\",\"full_name\":\"Ethereum Cell Network\",\"coin_type\":\"ETH\",\"type\":60,\"id\":173518453,\"daddy\":\"ETH\",\"contract_addr\":\"0x9b62ec1453cea5dde760aaf662048ca6eeb66e7f\",\"added\":\"1\",\"precision\":2,\"canShift\":0,\"tokenType\":\"ERC20\"}],\"system_timestamp\":1594086772,\"size\":47,\"btc_price\":65377.00000000},\"extend\":{\"btcPrice\":65377.00000000,\"btcSmall\":0.001},\"status\":0}\r\n0\r\n```\r\n\r\n### 7. 币种详情里面的网络请求\r\n币种详情里面的请求有：\r\n币种简介的网址，请求来的\r\n币种的余额，对，单个币种它又请求了一下\r\n交易记录，三个请求，全部、In、Out\r\n当前的块高度\r\n转账页面还请求了交易费\r\n这些先略过不写。",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/40/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/39",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/39/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/39/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/39/events",
        "html_url": "https://github.com/itlgl/note/issues/39",
        "id": 579289739,
        "node_id": "MDU6SXNzdWU1NzkyODk3Mzk=",
        "number": 39,
        "title": "flutter webview 加载页面时设置自定义cookie",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2020-03-11T14:05:50Z",
        "updated_at": "2020-03-11T14:05:50Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "flutter提供了一个插件来显示webview：[flutter_webview_plugin](https://pub.flutter-io.cn/packages/flutter_webview_plugin#webview-functions): 0.3.10+1\r\n\r\n这个插件没有直接提供类似android上的CookieManager来直接操作cookie，但是提供了一个方法'flutterWebViewPlugin.evalJavascript'执行js，可以通过这个方法，执行js代码，将cookie设置进去，然后刷新网页即可。\r\n\r\n代码如下：\r\n```flutter\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_webview_plugin/flutter_webview_plugin.dart';\r\n\r\nclass TestWebViewRoute extends StatelessWidget {\r\n\r\n  FlutterWebviewPlugin flutterWebViewPlugin = FlutterWebviewPlugin();\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    setCookieToHtml();\r\n\r\n    return WebviewScaffold(\r\n      url: 'https://www.baidu.com',\r\n      appBar: AppBar(\r\n        title: Text('Test'),\r\n      ),\r\n      withZoom: true,\r\n      withLocalStorage: true,\r\n      withJavascript: true,\r\n    );\r\n  }\r\n\r\n  void setCookieToHtml() {\r\n    flutterWebViewPlugin.onStateChanged.listen((viewState) async {\r\n      if (viewState.type == WebViewState.finishLoad) {\r\n        Map<String, dynamic> cookies = await flutterWebViewPlugin.getCookies();\r\n        bool isHasCookie = false;\r\n        if(cookies != null) {\r\n          cookies.forEach((key, value) {\r\n            print('cookie key=$key, value=$value');\r\n            // 因为获取到的key前面带了一个空格，所以直接用containsKey方法判断一直返回false\r\n            if(key.trim() == 'JSESSIONID_TEST') {\r\n              isHasCookie = true;\r\n            }\r\n          });\r\n        }\r\n        if(!isHasCookie) {\r\n          print('set cookie');\r\n          flutterWebViewPlugin.evalJavascript(\r\n            '''\r\nvar name = \"JSESSIONID_TEST\";\r\nvar value = \"i am session id\";\r\nvar days = 1; //定义一天\r\nvar exp = new Date();\r\nexp.setTime(exp.getTime() + days * 24 * 60 * 60 * 1000);\r\n// 写入Cookie, toGMTString将时间转换成字符串\r\ndocument.cookie = name + \"=\" + escape(value) + \";expires=\" + exp.toGMTString() + \";path=/\" + \";domain=www.baidu.com\";\r\n            '''\r\n          );\r\n          flutterWebViewPlugin.reload();\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n```\r\n\r\n这段代码还设置了'LocalStorage'为true，期望效果是没有网时可以离线打开网页，但是并没有起作用，网页并没有缓存。\r\n在[一个博客](https://www.cnblogs.com/jerrywublogs/p/9481646.html)上找到了原因，因为缓存策略会判断网页头中的'cache-control'字段来判断是否从网络上获取数据，而百度的网页这个字段设置的就是'no-cache'不让缓存，导致每次都会重新获取网页内容。\r\n那么要缓存网页有两种方法，一种是把网页数据直接用文件存起来，下次判断未过期直接使用，一种就是和后台协商修改这个字段。\r\n如果将网址修改为'https://itlgl.com/'就可以缓存了，因为github的网页特意设置了缓存策略'cache-control: max-age=600'，实际测试发现有效期内就直接使用了缓存页面。",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/39/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/38",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/38/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/38/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/38/events",
        "html_url": "https://github.com/itlgl/note/issues/38",
        "id": 490157894,
        "node_id": "MDU6SXNzdWU0OTAxNTc4OTQ=",
        "number": 38,
        "title": "Gson对于泛型的处理",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-09-06T06:40:32Z",
        "updated_at": "2019-09-06T06:41:05Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "Gson序列化和反序列时，如果Object是泛型，那么就需要特别的处理。\r\n假设要将一段json字符串转换为List<Object>类型，那么\r\n\r\n## 处理方法一\r\n使用TypeToken\r\n```java\r\ngson.fromJson(jsonStr, new TypeToken<List<Object>>(){}.getType());\r\n```\r\n\r\n## 处理方法二\r\n现在有一个问题，我想做一个统一处理方法，只要传入Object.class就可以返回List<Object>，那么还可以通过自定义`ParameterizedType`的方式解决。\r\njackson库自带了`TypeFactory`，调用方式是一样的，省去了自定义的麻烦。\r\n```java\r\npublic static class ParameterizedTypeImpl implements ParameterizedType {\r\n    private final Class raw;\r\n    private final Type[] args;\r\n\r\n    public static ParameterizedTypeImpl of(Class... classes) {\r\n        if(classes.length == 0) {\r\n            return new ParameterizedTypeImpl(null, new Type[0]);\r\n        }\r\n        if(classes.length == 1) {\r\n            return new ParameterizedTypeImpl(classes[0], null);\r\n        }\r\n\r\n        Type tem = classes[classes.length - 1];\r\n        ParameterizedTypeImpl result = null;\r\n        for (int i = classes.length - 2; i >= 0; i--) {\r\n            result = new ParameterizedTypeImpl(classes[i], new Type[] {tem});\r\n            tem = result;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public ParameterizedTypeImpl(Class raw, Type[] args) {\r\n        this.raw = raw;\r\n        this.args = args != null ? args : new Type[0];\r\n    }\r\n\r\n    @Override\r\n    public Type[] getActualTypeArguments() {\r\n        return args;\r\n    }\r\n\r\n    @Override\r\n    public Type getRawType() {\r\n        return raw;\r\n    }\r\n\r\n    @Override\r\n    public Type getOwnerType() {\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\n那么调用方式就变成了：\r\n```java\r\n<T> T fun(Class<T> clazz) {\r\n    String jsonStr = \"...\";// 省略jsonStr的联网获取代码\r\n    return gson.fromJson(jsonStr, ParameterizedTypeImpl.of(List.class, clazz));\r\n}\r\n```\r\n还没有深究ParameterizedType 的这么用的原理，从网上找到的代码，自己修改的。",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/38/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/37",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/37/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/37/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/37/events",
        "html_url": "https://github.com/itlgl/note/issues/37",
        "id": 427535728,
        "node_id": "MDU6SXNzdWU0Mjc1MzU3Mjg=",
        "number": 37,
        "title": "Windows下更改gradle和maven仓库下载位置",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-04-01T06:39:10Z",
        "updated_at": "2019-04-01T06:39:10Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "所有更改基于Windows系统\r\n# Gradle\r\n在系统环境变量下添加`GRADLE_USER_HOME`字段，指明gradle缓存目录，注销重启即可。\r\n![gradle修改缓存位置示意图](https://user-images.githubusercontent.com/7078104/55307806-3baea780-548b-11e9-9704-c95512fe05e5.PNG)\r\n# Maven\r\n在用户目录`C:\\Users\\[your user name]\\.m2`文件夹下，新建一个`settings.xml`文件（或者将maven目录下的`settings.xml`复制一份），将文件中`localRepository`节点放开，添加本地缓存位置即可。比如`<localRepository>D:/maven/cache</localRepository>`。\r\n\r\n下面是一份完整的`settings.xml`文件备用。\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<!--\r\nLicensed to the Apache Software Foundation (ASF) under one\r\nor more contributor license agreements.  See the NOTICE file\r\ndistributed with this work for additional information\r\nregarding copyright ownership.  The ASF licenses this file\r\nto you under the Apache License, Version 2.0 (the\r\n\"License\"); you may not use this file except in compliance\r\nwith the License.  You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing,\r\nsoftware distributed under the License is distributed on an\r\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, either express or implied.  See the License for the\r\nspecific language governing permissions and limitations\r\nunder the License.\r\n-->\r\n\r\n<!--\r\n | This is the configuration file for Maven. It can be specified at two levels:\r\n |\r\n |  1. User Level. This settings.xml file provides configuration for a single user,\r\n |                 and is normally provided in ${user.home}/.m2/settings.xml.\r\n |\r\n |                 NOTE: This location can be overridden with the CLI option:\r\n |\r\n |                 -s /path/to/user/settings.xml\r\n |\r\n |  2. Global Level. This settings.xml file provides configuration for all Maven\r\n |                 users on a machine (assuming they're all using the same Maven\r\n |                 installation). It's normally provided in\r\n |                 ${maven.conf}/settings.xml.\r\n |\r\n |                 NOTE: This location can be overridden with the CLI option:\r\n |\r\n |                 -gs /path/to/global/settings.xml\r\n |\r\n | The sections in this sample file are intended to give you a running start at\r\n | getting the most out of your Maven installation. Where appropriate, the default\r\n | values (values used when the setting is not specified) are provided.\r\n |\r\n |-->\r\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\r\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\r\n  <!-- localRepository\r\n   | The path to the local repository maven will use to store artifacts.\r\n   |\r\n   | Default: ${user.home}/.m2/repository\r\n  <localRepository>/path/to/local/repo</localRepository>\r\n  -->\r\n  <localRepository>D:/maven/cache</localRepository>\r\n  <!-- interactiveMode\r\n   | This will determine whether maven prompts you when it needs input. If set to false,\r\n   | maven will use a sensible default value, perhaps based on some other setting, for\r\n   | the parameter in question.\r\n   |\r\n   | Default: true\r\n  <interactiveMode>true</interactiveMode>\r\n  -->\r\n\r\n  <!-- offline\r\n   | Determines whether maven should attempt to connect to the network when executing a build.\r\n   | This will have an effect on artifact downloads, artifact deployment, and others.\r\n   |\r\n   | Default: false\r\n  <offline>false</offline>\r\n  -->\r\n\r\n  <!-- pluginGroups\r\n   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.\r\n   | when invoking a command line like \"mvn prefix:goal\". Maven will automatically add the group identifiers\r\n   | \"org.apache.maven.plugins\" and \"org.codehaus.mojo\" if these are not already contained in the list.\r\n   |-->\r\n  <pluginGroups>\r\n    <!-- pluginGroup\r\n     | Specifies a further group identifier to use for plugin lookup.\r\n    <pluginGroup>com.your.plugins</pluginGroup>\r\n    -->\r\n  </pluginGroups>\r\n\r\n  <!-- proxies\r\n   | This is a list of proxies which can be used on this machine to connect to the network.\r\n   | Unless otherwise specified (by system property or command-line switch), the first proxy\r\n   | specification in this list marked as active will be used.\r\n   |-->\r\n  <proxies>\r\n    <!-- proxy\r\n     | Specification for one proxy, to be used in connecting to the network.\r\n     |\r\n    <proxy>\r\n      <id>optional</id>\r\n      <active>true</active>\r\n      <protocol>http</protocol>\r\n      <username>proxyuser</username>\r\n      <password>proxypass</password>\r\n      <host>proxy.host.net</host>\r\n      <port>80</port>\r\n      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>\r\n    </proxy>\r\n    -->\r\n  </proxies>\r\n\r\n  <!-- servers\r\n   | This is a list of authentication profiles, keyed by the server-id used within the system.\r\n   | Authentication profiles can be used whenever maven must make a connection to a remote server.\r\n   |-->\r\n  <servers>\r\n    <!-- server\r\n     | Specifies the authentication information to use when connecting to a particular server, identified by\r\n     | a unique name within the system (referred to by the 'id' attribute below).\r\n     |\r\n     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are\r\n     |       used together.\r\n     |\r\n    <server>\r\n      <id>deploymentRepo</id>\r\n      <username>repouser</username>\r\n      <password>repopwd</password>\r\n    </server>\r\n    -->\r\n\r\n    <!-- Another sample, using keys to authenticate.\r\n    <server>\r\n      <id>siteServer</id>\r\n      <privateKey>/path/to/private/key</privateKey>\r\n      <passphrase>optional; leave empty if not used.</passphrase>\r\n    </server>\r\n    -->\r\n  </servers>\r\n\r\n  <!-- mirrors\r\n   | This is a list of mirrors to be used in downloading artifacts from remote repositories.\r\n   |\r\n   | It works like this: a POM may declare a repository to use in resolving certain artifacts.\r\n   | However, this repository may have problems with heavy traffic at times, so people have mirrored\r\n   | it to several places.\r\n   |\r\n   | That repository definition will have a unique id, so we can create a mirror reference for that\r\n   | repository, to be used as an alternate download site. The mirror site will be the preferred\r\n   | server for that repository.\r\n   |-->\r\n  <mirrors>\r\n    <!-- mirror\r\n     | Specifies a repository mirror site to use instead of a given repository. The repository that\r\n     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used\r\n     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.\r\n     |\r\n    <mirror>\r\n      <id>mirrorId</id>\r\n      <mirrorOf>repositoryId</mirrorOf>\r\n      <name>Human Readable Name for this Mirror.</name>\r\n      <url>http://my.repository.com/repo/path</url>\r\n    </mirror>\r\n     -->\r\n  </mirrors>\r\n\r\n  <!-- profiles\r\n   | This is a list of profiles which can be activated in a variety of ways, and which can modify\r\n   | the build process. Profiles provided in the settings.xml are intended to provide local machine-\r\n   | specific paths and repository locations which allow the build to work in the local environment.\r\n   |\r\n   | For example, if you have an integration testing plugin - like cactus - that needs to know where\r\n   | your Tomcat instance is installed, you can provide a variable here such that the variable is\r\n   | dereferenced during the build process to configure the cactus plugin.\r\n   |\r\n   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles\r\n   | section of this document (settings.xml) - will be discussed later. Another way essentially\r\n   | relies on the detection of a system property, either matching a particular value for the property,\r\n   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a\r\n   | value of '1.4' might activate a profile when the build is executed on a JDK version of '1.4.2_07'.\r\n   | Finally, the list of active profiles can be specified directly from the command line.\r\n   |\r\n   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact\r\n   |       repositories, plugin repositories, and free-form properties to be used as configuration\r\n   |       variables for plugins in the POM.\r\n   |\r\n   |-->\r\n  <profiles>\r\n    <!-- profile\r\n     | Specifies a set of introductions to the build process, to be activated using one or more of the\r\n     | mechanisms described above. For inheritance purposes, and to activate profiles via <activatedProfiles/>\r\n     | or the command line, profiles have to have an ID that is unique.\r\n     |\r\n     | An encouraged best practice for profile identification is to use a consistent naming convention\r\n     | for profiles, such as 'env-dev', 'env-test', 'env-production', 'user-jdcasey', 'user-brett', etc.\r\n     | This will make it more intuitive to understand what the set of introduced profiles is attempting\r\n     | to accomplish, particularly when you only have a list of profile id's for debug.\r\n     |\r\n     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.\r\n    <profile>\r\n      <id>jdk-1.4</id>\r\n\r\n      <activation>\r\n        <jdk>1.4</jdk>\r\n      </activation>\r\n\r\n      <repositories>\r\n        <repository>\r\n          <id>jdk14</id>\r\n          <name>Repository for JDK 1.4 builds</name>\r\n          <url>http://www.myhost.com/maven/jdk14</url>\r\n          <layout>default</layout>\r\n          <snapshotPolicy>always</snapshotPolicy>\r\n        </repository>\r\n      </repositories>\r\n    </profile>\r\n    -->\r\n\r\n    <!--\r\n     | Here is another profile, activated by the system property 'target-env' with a value of 'dev',\r\n     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration\r\n     | might hypothetically look like:\r\n     |\r\n     | ...\r\n     | <plugin>\r\n     |   <groupId>org.myco.myplugins</groupId>\r\n     |   <artifactId>myplugin</artifactId>\r\n     |\r\n     |   <configuration>\r\n     |     <tomcatLocation>${tomcatPath}</tomcatLocation>\r\n     |   </configuration>\r\n     | </plugin>\r\n     | ...\r\n     |\r\n     | NOTE: If you just wanted to inject this configuration whenever someone set 'target-env' to\r\n     |       anything, you could just leave off the <value/> inside the activation-property.\r\n     |\r\n    <profile>\r\n      <id>env-dev</id>\r\n\r\n      <activation>\r\n        <property>\r\n          <name>target-env</name>\r\n          <value>dev</value>\r\n        </property>\r\n      </activation>\r\n\r\n      <properties>\r\n        <tomcatPath>/path/to/tomcat/instance</tomcatPath>\r\n      </properties>\r\n    </profile>\r\n    -->\r\n  </profiles>\r\n\r\n  <!-- activeProfiles\r\n   | List of profiles that are active for all builds.\r\n   |\r\n  <activeProfiles>\r\n    <activeProfile>alwaysActiveProfile</activeProfile>\r\n    <activeProfile>anotherAlwaysActiveProfile</activeProfile>\r\n  </activeProfiles>\r\n  -->\r\n</settings>\r\n\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/37/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/36",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/36/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/36/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/36/events",
        "html_url": "https://github.com/itlgl/note/issues/36",
        "id": 425219229,
        "node_id": "MDU6SXNzdWU0MjUyMTkyMjk=",
        "number": 36,
        "title": "Android 多渠道打包的应用",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-03-26T04:16:06Z",
        "updated_at": "2019-03-26T04:16:06Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 如何简单的使用keystore文件为apk签名\r\n1. 在项目根目录下创建文件夹`keystore`，并将签名文件比如`keystore1.jks`放到目录下。\r\n比如创建的`keystore1.jks`文件，密码为`pass4keystore`；签名文件下有一个alias为`itlgl`，密码为`pass4itlgl`。\r\n2. 在`build.gradle`文件下增加配置：\r\n```gradle\r\nandroid {\r\n    signingConfigs {\r\n        keystore1 {\r\n            keyAlias 'itlgl'\r\n            keyPassword 'pass4itlgl'\r\n            storeFile file('./keystore/keystore1.jks')\r\n            storePassword 'pass4keystore'\r\n        }\r\n    }\r\n    // 省略部分配置\r\n\t\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n            signingConfig signingConfigs.keystore1\r\n        }\r\n        debug {\r\n            signingConfig signingConfigs.keystore1\r\n        }\r\n    }\r\n}\r\n```\r\n这样release版本和debug版本就都用keystore1.jks文件进行了签名\r\n\r\n# 不同的渠道有不同的包名\r\n```gradle\r\nandroid {\r\n    // android studio升级以后，需要在文件中加上一个这个\r\n    // https://blog.csdn.net/syif88/article/details/75009663\r\n    flavorDimensions \"test\"\r\n    productFlavors {\r\n        dev {\r\n            // 包名将被修改为com.itlgl.dev\r\n            applicationId \"com.itlgl.dev\"\r\n            // 也可以用下面这种后缀的方式，dev模式下将会在原有的applicationId后面缀上.dev\r\n            // applicationIdSuffix \".dev\"\r\n        }\r\n\r\n        stage {\r\n            applicationId \"com.itlgl.stage\"\r\n        }\r\n\r\n        prod {\r\n            applicationId \"com.itlgl.prod\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# 不同的渠道修改不同的versionName\r\n```gradle\r\nandroid {\r\n    // android studio升级以后，需要在文件中加上一个这个\r\n    // https://blog.csdn.net/syif88/article/details/75009663\r\n    flavorDimensions \"test\"\r\n    productFlavors {\r\n        dev {\r\n            // versionName将被修改为xxx_dev\r\n            versionName \"xxx_dev\"\r\n            // 也可以用下面这种后缀的方式，dev模式下将会在原有的versionName后面缀上_dev\r\n            // versionNameSuffix \"_dev\"\r\n        }\r\n\r\n        stage {\r\n            versionName \"xxx_stage\"\r\n        }\r\n\r\n        prod {\r\n            versionName \"xxx_prod\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# 不同渠道在资源文件添加不同字段\r\n利用 resValue 来定义资源的值，顾名思义 res 底下的内容应该都可以创建，最后用 R.xxx.xxx 来引用。\r\n如下就根据不同的类型，添加了不同的 app_name 字段，以及定义了 布尔值，可以通过 R.string.app_name 来引用。\r\n**注意，这里是添加，是在 string.xml 里面添加了一个字段app_name，所以在现有的 string.xml 中不能有这个字段，否则会报错！！！**\r\n```gradle\r\nandroid {\r\n    // android studio升级以后，需要在文件中加上一个这个\r\n    // https://blog.csdn.net/syif88/article/details/75009663\r\n    flavorDimensions \"test\"\r\n    productFlavors {\r\n        dev {\r\n            resValue \"string\", \"app_name\", \"dev_myapp\"\r\n            resValue \"bool\", \"isrRank\", 'false'\r\n        }\r\n        stage {\r\n            resValue \"string\", \"app_name\", \"stage_myapp\"\r\n            resValue \"bool\", \"isrRank\", 'true'\r\n        }\r\n        prod {\r\n            resValue \"string\", \"app_name\", \"myapp\"\r\n            resValue \"bool\", \"isrRank\", 'true'\r\n        }\r\n    }\r\n}\r\n```\r\n通过以上我们大概可以推测出 color、dimen 也可以通过类似的方法添加。\r\n\r\n# 不同渠道添加不同的常量到BuildConfig\r\n1. 在BuildConfig中定义字段\r\n```gradle\r\nandroid {\r\n    // android studio升级以后，需要在文件中加上一个这个\r\n    // https://blog.csdn.net/syif88/article/details/75009663\r\n    flavorDimensions \"test\"\r\n    productFlavors {\r\n        dev {\r\n            buildConfigField \"String\", \"ENVIRONMENT\", '\"dev\"'\r\n        }\r\n        stage {\r\n            buildConfigField \"String\", \"ENVIRONMENT\", '\"stage\"'\r\n        }\r\n        prod {\r\n            buildConfigField \"String\", \"ENVIRONMENT\", '\"prod\"'\r\n        }\r\n    }\r\n}\r\n```\r\n2. 使用常量\r\n在我们自己的任意的类中，来直接通过 BuildConfig 就可以调用我们定义的字段。\r\n```java\r\npublic class Constants {\r\n    public static final String ENVIRONMENT = BuildConfig.ENVIRONMENT;\r\n}\r\n```\r\n\r\n# 不同渠道，修改 AndroidManifest.xml 里渠道变量\r\n1. 在 AndroidManifest.xml 里添加渠道变量\r\n```xml\r\n<application\r\n    android:icon=\"${app_icon}\"\r\n    android:label=\"@string/app_name\"\r\n    android:theme=\"@style/AppTheme\">\r\n    ...\r\n    <meta-data\r\n        android:name=\"UMENG_CHANNEL\"\r\n        android:value=\"${ENVIRONMENT}\" />\r\n    ...\r\n</application>\r\n```\r\n2. 在 build.gradle 设置 productFlavors\r\n```gradle\r\nandroid {\r\n    // android studio升级以后，需要在文件中加上一个这个\r\n    // https://blog.csdn.net/syif88/article/details/75009663\r\n    flavorDimensions \"test\"\r\n    productFlavors {\r\n        dev {\r\n            manifestPlaceholders = [ENVIRONMENT: \"dev\",\r\n                                    app_icon   : \"@drawable/icon_dev\"]\r\n        }\r\n        stage {\r\n            manifestPlaceholders = [ENVIRONMENT: \"stage\",\r\n                                    app_icon   : \"@drawable/icon_stage\"]\r\n        }\r\n        prod {\r\n            manifestPlaceholders = [ENVIRONMENT: \"prod\",\r\n                                    app_icon   : \"@drawable/icon_prod\"]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# 不同环境，引用不同的 module\r\n这个就很强大了，根据不同的环境，引用对应的 module。\r\n你可以替换大量的图片，string，color，vaule等等。\r\n\r\n首先，要建立跟渠道对应的 module，然后再引用。\r\n引用方式如下：\r\n```gradle\r\ndependencies {\r\n    compile fileTree(dir: 'libs', include: ['*.jar'])\r\n\r\n    // 引用本的项目\r\n    devCompile project(':devModule')\r\n    stageCompile project(':stageModule')\r\n    prodCompile project(':prodModule')\r\n\r\n    // 也可以分渠道引用网络的。因为这里都相同，所以地址也就都一样了\r\n    devCompile 'com.roughike:bottom-bar:2.0.2'\r\n    stageCompile 'com.roughike:bottom-bar:2.0.2'\r\n    prodCompile 'com.roughike:bottom-bar:2.0.2'\r\n}\r\n```\r\n\r\n# 如何修改不同渠道apk的名称\r\n在gradle下添加：\r\n```gradle\r\nandroid {\r\n    compileSdkVersion 27\r\n    defaultConfig {\r\n        applicationId \"com.itlgl\"\r\n        minSdkVersion 19\r\n        targetSdkVersion 27\r\n        versionCode 1\r\n        versionName \"1\"\r\n        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    // android studio升级以后，需要在文件中加上一个这个\r\n    // https://blog.csdn.net/syif88/article/details/75009663\r\n    flavorDimensions \"test\"\r\n\r\n    productFlavors {\r\n        dev {\r\n            versionNameSuffix \"_dev\"\r\n        }\r\n        stage {\r\n            versionNameSuffix \"_stage\"\r\n        }\r\n        prod {\r\n            versionNameSuffix \"_prod\"\r\n        }\r\n    }\r\n    \r\n    // 生成的apk名字就变成了\r\n    // --build\r\n    // ----outputs\r\n    // ------apk\r\n    // --------dev\r\n    // ----------debug\r\n    // ------------xxx_1_dev.apk\r\n    // --------stage\r\n    // ----------debug\r\n    // ------------xxx_1_stage.apk\r\n    // --------prod\r\n    // ----------debug\r\n    // ------------xxx_1_prod.apk\r\n    android.applicationVariants.all { variant ->\r\n        variant.outputs.all {\r\n            outputFileName = \"xxx_${defaultConfig.versionName}${variant.productFlavors[0].versionNameSuffix}.apk\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n# 参考资料\r\n - [Gradle多渠道打包(动态设定App名称，应用图标，替换常量，更改包名，变更渠道)](https://www.jianshu.com/p/533240d222d3)\r\n - [Gradle编译生成不同的版本，动态设定应用标题 / 应用图标 / 替换常量](https://blog.csdn.net/xx326664162/article/details/51508132)\r\n - [AndroidStudio多渠道打包，生成不同app](https://blog.csdn.net/stimgo/article/details/77480154)\r\n - [All flavors must now belong to a named flavor dimension](http://www.cnblogs.com/bluestorm/p/7374903.html)\r\n - [解决Error:All flavors must now belong to a named flavor dimension. Learn more at https://d.android.com](https://blog.csdn.net/syif88/article/details/75009663)\r\n - [Cannot set the value of read-only property 'outputFile'](https://blog.csdn.net/u014300915/article/details/78355420)\r\n - [Android Gradle 配置打包输出名称格式](https://blog.csdn.net/untilyou178/article/details/59482527)\r\n - [android studio gradle配置apk名称](https://blog.csdn.net/ssssxy/article/details/84063225)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/36/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/35",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/35/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/35/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/35/events",
        "html_url": "https://github.com/itlgl/note/issues/35",
        "id": 420277195,
        "node_id": "MDU6SXNzdWU0MjAyNzcxOTU=",
        "number": 35,
        "title": "java 正则表达式解析并替换模板数据",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-03-13T01:34:23Z",
        "updated_at": "2019-03-13T01:44:41Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 参考文章\r\n[java正则表达式解析短信模板](http://www.cnblogs.com/simpledev/p/5385079.html)\r\n# 开始\r\n用SpringBoot做一个简易前台页面，其中左侧的菜单是fsLayui的实现的，需要对它进行国际化。方案就是后台定一个接口，返回json的配置信息，加上菜单配置项。但是菜单的字符串太长了，如果使用拼接的方式书写很麻烦，所以想到定义一个模板数据，使用正则表达式去匹配并替换对应的数据。\r\n# 如何实现\r\n`java.util.regex.Matcher`提供了两个方法`appendReplacement`和`appendTail`，用来通过StringBuffer来替换和拼接替换以后的字符串。\r\n# 示例java代码\r\n```java\r\nfinal String menuTemplate = \"{\\n\" +\r\n        \"  \\\"errorNo\\\":0,\\n\" +\r\n        \"  \\\"results\\\":\\n\" +\r\n        \"  {\\n\" +\r\n        \"    \\\"data\\\":\\n\" +\r\n        \"    [\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"1\\\",\\\"menuName\\\":\\\"##menu.console##\\\",\\\"menuIcon\\\":\\\"fa-cog\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"0\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"11\\\",\\\"menuName\\\":\\\"充值业务\\\",\\\"menuIcon\\\":\\\"fa-dollar\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"111\\\",\\\"menuName\\\":\\\"服务介绍\\\",\\\"menuIcon\\\":\\\"&#xe68e;\\\",\\\"menuHref\\\":\\\"views/home/index.html\\\",\\\"parentMenuId\\\":\\\"11\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"112\\\",\\\"menuName\\\":\\\"充值服务\\\",\\\"menuIcon\\\":\\\"&#xe674;\\\",\\\"menuHref\\\":\\\"views/rechargeServer/index\\\",\\\"parentMenuId\\\":\\\"11\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"113\\\",\\\"menuName\\\":\\\"额度查询\\\",\\\"menuIcon\\\":\\\"&#xe677;\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"11\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"114\\\",\\\"menuName\\\":\\\"冲正服务\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/treeDatagrid/index.html\\\",\\\"parentMenuId\\\":\\\"11\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"115\\\",\\\"menuName\\\":\\\"撤销服务\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/multiDatagrid/index.html\\\",\\\"parentMenuId\\\":\\\"11\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"12\\\",\\\"menuName\\\":\\\"清算服务\\\",\\\"menuIcon\\\":\\\"fa-retweet\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"121\\\",\\\"menuName\\\":\\\"分销商清算\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"/sys/views/datagrid/index\\\",\\\"parentMenuId\\\":\\\"12\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"122\\\",\\\"menuName\\\":\\\"终端清算\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"12\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"123\\\",\\\"menuName\\\":\\\"清算设置\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"12\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"124\\\",\\\"menuName\\\":\\\"清算报表\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"12\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"13\\\",\\\"menuName\\\":\\\"终端管理\\\",\\\"menuIcon\\\":\\\"fa-microchip\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"131\\\",\\\"menuName\\\":\\\"终端注册\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid/index.html\\\",\\\"parentMenuId\\\":\\\"13\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"132\\\",\\\"menuName\\\":\\\"终端状态\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/posDevice/deviceList\\\",\\\"parentMenuId\\\":\\\"13\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"133\\\",\\\"menuName\\\":\\\"终端注销\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"13\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"134\\\",\\\"menuName\\\":\\\"终端升级\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"13\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"14\\\",\\\"menuName\\\":\\\"分销系统\\\",\\\"menuIcon\\\":\\\"fa-sitemap\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"143\\\",\\\"menuName\\\":\\\"分销商列表\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/distribution/list\\\",\\\"parentMenuId\\\":\\\"14\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"141\\\",\\\"menuName\\\":\\\"新增分销商\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/distribution/add.html\\\",\\\"parentMenuId\\\":\\\"14\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"142\\\",\\\"menuName\\\":\\\"分销商审核\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/distribution/examine.html\\\",\\\"parentMenuId\\\":\\\"14\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"144\\\",\\\"menuName\\\":\\\"分销商评级\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/distribution/rating.html\\\",\\\"parentMenuId\\\":\\\"14\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"15\\\",\\\"menuName\\\":\\\"POS账号管理\\\",\\\"menuIcon\\\":\\\"fa-user-circle-o\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"151\\\",\\\"menuName\\\":\\\"新增管理账号\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid/index.html\\\",\\\"parentMenuId\\\":\\\"15\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"152\\\",\\\"menuName\\\":\\\"新增分销商账号\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"15\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"153\\\",\\\"menuName\\\":\\\"账号信息管理\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"15\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"154\\\",\\\"menuName\\\":\\\"账号注销\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"15\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"16\\\",\\\"menuName\\\":\\\"推送管理\\\",\\\"menuIcon\\\":\\\"fa-user-circle-o\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"161\\\",\\\"menuName\\\":\\\"推送内容管理\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid/index.html\\\",\\\"parentMenuId\\\":\\\"16\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"162\\\",\\\"menuName\\\":\\\"推送设置\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"16\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"17\\\",\\\"menuName\\\":\\\"操作日志\\\",\\\"menuIcon\\\":\\\"fa-bars\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"171\\\",\\\"menuName\\\":\\\"充值日志\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/logs/rechargelog.html\\\",\\\"parentMenuId\\\":\\\"17\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"172\\\",\\\"menuName\\\":\\\"POS登录日志\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/logs/loginlog.html\\\",\\\"parentMenuId\\\":\\\"17\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"175\\\",\\\"menuName\\\":\\\"POS管理日志\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/logs/sysusercontrolog.html\\\",\\\"parentMenuId\\\":\\\"17\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"174\\\",\\\"menuName\\\":\\\"系统登录日志\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/logs/loginlog.html\\\",\\\"parentMenuId\\\":\\\"17\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"173\\\",\\\"menuName\\\":\\\"系统管理日志\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/logs/posusercontrolog.html\\\",\\\"parentMenuId\\\":\\\"17\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"176\\\",\\\"menuName\\\":\\\"风险控制日志\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/logs/index.html\\\",\\\"parentMenuId\\\":\\\"17\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"18\\\",\\\"menuName\\\":\\\"数据分析\\\",\\\"menuIcon\\\":\\\"fa-bar-chart\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"184\\\",\\\"menuName\\\":\\\"总体概览\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/analysis/index.html\\\",\\\"parentMenuId\\\":\\\"18\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"181\\\",\\\"menuName\\\":\\\"日度分析\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/analysis/dayanalysis.html\\\",\\\"parentMenuId\\\":\\\"18\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"182\\\",\\\"menuName\\\":\\\"月度分析\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/analysis/monthanalysis.html\\\",\\\"parentMenuId\\\":\\\"18\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"183\\\",\\\"menuName\\\":\\\"年度分析\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/analysis/yearanalysis.html\\\",\\\"parentMenuId\\\":\\\"18\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"19\\\",\\\"menuName\\\":\\\"风险控制\\\",\\\"menuIcon\\\":\\\"fa-shield\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"191\\\",\\\"menuName\\\":\\\"终端风险\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid/index.html\\\",\\\"parentMenuId\\\":\\\"19\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"192\\\",\\\"menuName\\\":\\\"分销商风险\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"19\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"193\\\",\\\"menuName\\\":\\\"账户风险\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"19\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"194\\\",\\\"menuName\\\":\\\"风险预警规则\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"19\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"20\\\",\\\"menuName\\\":\\\"系统管理\\\",\\\"menuIcon\\\":\\\"fa-cog\\\",\\\"menuHref\\\":\\\"\\\",\\\"parentMenuId\\\":\\\"1\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"201\\\",\\\"menuName\\\":\\\"界面管理\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid/index.html\\\",\\\"parentMenuId\\\":\\\"20\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"202\\\",\\\"menuName\\\":\\\"访问控制\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"20\\\"},\\n\" +\r\n        \"\\t\\t{\\\"menuId\\\":\\\"203\\\",\\\"menuName\\\":\\\"系统公告\\\",\\\"menuIcon\\\":\\\"fa-list\\\",\\\"menuHref\\\":\\\"views/datagrid2/index.html\\\",\\\"parentMenuId\\\":\\\"20\\\"}\\n\" +\r\n        \"    ]\\n\" +\r\n        \"  }\\n\" +\r\n        \"}\";\r\n\r\nMap<String, String> contentMap = new HashMap<>();\r\ncontentMap.put(\"menu.console\", \"控制台\");\r\n\r\nStringBuffer menuResultBuilder = new StringBuffer();\r\nPattern pattern = Pattern.compile(\"##[a-zA-Z\\\\.]+##\");\r\nMatcher matcher = pattern.matcher(menuTemplate);\r\nwhile(matcher.find()) {\r\n    String group = matcher.group();\r\n    String key = group.substring(2, group.length() - 2);\r\n    String value = contentMap.get(key);\r\n    matcher.appendReplacement(menuResultBuilder, value);\r\n    System.out.println(\"-----中间结果-----\");\r\n    System.out.println(menuResultBuilder.toString());\r\n}\r\nmatcher.appendTail(menuResultBuilder);\r\nSystem.out.println(\"-----结果-----\");\r\nSystem.out.println(menuResultBuilder.toString());\r\n```\r\n# 输出结果\r\n```console\r\n-----中间结果-----\r\n{\r\n  \"errorNo\":0,\r\n  \"results\":\r\n  {\r\n    \"data\":\r\n    [\r\n\t\t{\"menuId\":\"1\",\"menuName\":\"控制台\r\n-----结果-----\r\n{\r\n  \"errorNo\":0,\r\n  \"results\":\r\n  {\r\n    \"data\":\r\n    [\r\n\t\t{\"menuId\":\"1\",\"menuName\":\"控制台\",\"menuIcon\":\"fa-cog\",\"menuHref\":\"\",\"parentMenuId\":\"0\"},\r\n\t\t{\"menuId\":\"11\",\"menuName\":\"充值业务\",\"menuIcon\":\"fa-dollar\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"111\",\"menuName\":\"服务介绍\",\"menuIcon\":\"&#xe68e;\",\"menuHref\":\"views/home/index.html\",\"parentMenuId\":\"11\"},\r\n\t\t{\"menuId\":\"112\",\"menuName\":\"充值服务\",\"menuIcon\":\"&#xe674;\",\"menuHref\":\"views/rechargeServer/index\",\"parentMenuId\":\"11\"},\r\n\t\t{\"menuId\":\"113\",\"menuName\":\"额度查询\",\"menuIcon\":\"&#xe677;\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"11\"},\r\n\t\t{\"menuId\":\"114\",\"menuName\":\"冲正服务\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/treeDatagrid/index.html\",\"parentMenuId\":\"11\"},\r\n\t\t{\"menuId\":\"115\",\"menuName\":\"撤销服务\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/multiDatagrid/index.html\",\"parentMenuId\":\"11\"},\r\n\t\t{\"menuId\":\"12\",\"menuName\":\"清算服务\",\"menuIcon\":\"fa-retweet\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"121\",\"menuName\":\"分销商清算\",\"menuIcon\":\"fa-list\",\"menuHref\":\"/sys/views/datagrid/index\",\"parentMenuId\":\"12\"},\r\n\t\t{\"menuId\":\"122\",\"menuName\":\"终端清算\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"12\"},\r\n\t\t{\"menuId\":\"123\",\"menuName\":\"清算设置\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"12\"},\r\n\t\t{\"menuId\":\"124\",\"menuName\":\"清算报表\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"12\"},\r\n\t\t{\"menuId\":\"13\",\"menuName\":\"终端管理\",\"menuIcon\":\"fa-microchip\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"131\",\"menuName\":\"终端注册\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid/index.html\",\"parentMenuId\":\"13\"},\r\n\t\t{\"menuId\":\"132\",\"menuName\":\"终端状态\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/posDevice/deviceList\",\"parentMenuId\":\"13\"},\r\n\t\t{\"menuId\":\"133\",\"menuName\":\"终端注销\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"13\"},\r\n\t\t{\"menuId\":\"134\",\"menuName\":\"终端升级\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"13\"},\r\n\t\t{\"menuId\":\"14\",\"menuName\":\"分销系统\",\"menuIcon\":\"fa-sitemap\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"143\",\"menuName\":\"分销商列表\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/distribution/list\",\"parentMenuId\":\"14\"},\r\n\t\t{\"menuId\":\"141\",\"menuName\":\"新增分销商\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/distribution/add.html\",\"parentMenuId\":\"14\"},\r\n\t\t{\"menuId\":\"142\",\"menuName\":\"分销商审核\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/distribution/examine.html\",\"parentMenuId\":\"14\"},\r\n\t\t{\"menuId\":\"144\",\"menuName\":\"分销商评级\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/distribution/rating.html\",\"parentMenuId\":\"14\"},\r\n\t\t{\"menuId\":\"15\",\"menuName\":\"POS账号管理\",\"menuIcon\":\"fa-user-circle-o\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"151\",\"menuName\":\"新增管理账号\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid/index.html\",\"parentMenuId\":\"15\"},\r\n\t\t{\"menuId\":\"152\",\"menuName\":\"新增分销商账号\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"15\"},\r\n\t\t{\"menuId\":\"153\",\"menuName\":\"账号信息管理\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"15\"},\r\n\t\t{\"menuId\":\"154\",\"menuName\":\"账号注销\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"15\"},\r\n\t\t{\"menuId\":\"16\",\"menuName\":\"推送管理\",\"menuIcon\":\"fa-user-circle-o\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"161\",\"menuName\":\"推送内容管理\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid/index.html\",\"parentMenuId\":\"16\"},\r\n\t\t{\"menuId\":\"162\",\"menuName\":\"推送设置\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"16\"},\r\n\t\t{\"menuId\":\"17\",\"menuName\":\"操作日志\",\"menuIcon\":\"fa-bars\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"171\",\"menuName\":\"充值日志\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/logs/rechargelog.html\",\"parentMenuId\":\"17\"},\r\n\t\t{\"menuId\":\"172\",\"menuName\":\"POS登录日志\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/logs/loginlog.html\",\"parentMenuId\":\"17\"},\r\n\t\t{\"menuId\":\"175\",\"menuName\":\"POS管理日志\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/logs/sysusercontrolog.html\",\"parentMenuId\":\"17\"},\r\n\t\t{\"menuId\":\"174\",\"menuName\":\"系统登录日志\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/logs/loginlog.html\",\"parentMenuId\":\"17\"},\r\n\t\t{\"menuId\":\"173\",\"menuName\":\"系统管理日志\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/logs/posusercontrolog.html\",\"parentMenuId\":\"17\"},\r\n\t\t{\"menuId\":\"176\",\"menuName\":\"风险控制日志\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/logs/index.html\",\"parentMenuId\":\"17\"},\r\n\t\t{\"menuId\":\"18\",\"menuName\":\"数据分析\",\"menuIcon\":\"fa-bar-chart\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"184\",\"menuName\":\"总体概览\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/analysis/index.html\",\"parentMenuId\":\"18\"},\r\n\t\t{\"menuId\":\"181\",\"menuName\":\"日度分析\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/analysis/dayanalysis.html\",\"parentMenuId\":\"18\"},\r\n\t\t{\"menuId\":\"182\",\"menuName\":\"月度分析\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/analysis/monthanalysis.html\",\"parentMenuId\":\"18\"},\r\n\t\t{\"menuId\":\"183\",\"menuName\":\"年度分析\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/analysis/yearanalysis.html\",\"parentMenuId\":\"18\"},\r\n\t\t{\"menuId\":\"19\",\"menuName\":\"风险控制\",\"menuIcon\":\"fa-shield\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"191\",\"menuName\":\"终端风险\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid/index.html\",\"parentMenuId\":\"19\"},\r\n\t\t{\"menuId\":\"192\",\"menuName\":\"分销商风险\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"19\"},\r\n\t\t{\"menuId\":\"193\",\"menuName\":\"账户风险\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"19\"},\r\n\t\t{\"menuId\":\"194\",\"menuName\":\"风险预警规则\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"19\"},\r\n\t\t{\"menuId\":\"20\",\"menuName\":\"系统管理\",\"menuIcon\":\"fa-cog\",\"menuHref\":\"\",\"parentMenuId\":\"1\"},\r\n\t\t{\"menuId\":\"201\",\"menuName\":\"界面管理\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid/index.html\",\"parentMenuId\":\"20\"},\r\n\t\t{\"menuId\":\"202\",\"menuName\":\"访问控制\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"20\"},\r\n\t\t{\"menuId\":\"203\",\"menuName\":\"系统公告\",\"menuIcon\":\"fa-list\",\"menuHref\":\"views/datagrid2/index.html\",\"parentMenuId\":\"20\"}\r\n    ]\r\n  }\r\n}\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/35/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/34",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/34/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/34/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/34/events",
        "html_url": "https://github.com/itlgl/note/issues/34",
        "id": 416605850,
        "node_id": "MDU6SXNzdWU0MTY2MDU4NTA=",
        "number": 34,
        "title": "logback一个写的很详细的博文",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-03-04T02:46:25Z",
        "updated_at": "2019-03-04T02:46:25Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "[Java日志框架：logback详解](http://www.importnew.com/28541.html)\r\n\r\n# 一个简易的logback配置文件\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration>\r\n    <!--\r\n        If variable is not defined in system properties -> try to load it from application.properties\r\n    -->\r\n    <!-- 使用这个语句需要添加janino依赖 implementation 'org.codehaus.janino:janino:3.0.12' -->\r\n    <if condition='!isDefined(\"logs.dir\")'>\r\n        <then>\r\n            <property resource=\"application.properties\" />\r\n        </then>\r\n    </if>\r\n\r\n    <!-- 控制台输出 -->\r\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <!-- <Encoding>UTF-8</Encoding> -->\r\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\r\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- 按照每天生成日志文件 -->\r\n    <appender name=\"ROLLING-FILE-1\"\r\n              class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!-- <Encoding>UTF-8</Encoding> -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!-- logs.dir直接定义在application.properties文件中即可，例如 logs.dir=D:/test-->\r\n            <FileNamePattern>${logs.dir}/ethiopia_telecom_%d{yyyy_MM_dd}.log</FileNamePattern>\r\n            <!-- 日志文件保留天数 一个月 -->\r\n            <maxHistory>720</maxHistory>\r\n            <!--&lt;!&ndash;每个文件最大50MB&ndash;&gt;-->\r\n            <!--<maxFileSize>50MB</maxFileSize>-->\r\n        </rollingPolicy>\r\n        <encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\">\r\n            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- http://www.importnew.com/28541.html 采取异步写日志的方式而不让此次写日志发生磁盘IO，阻塞线程从而造成不必要的性能损耗 -->\r\n    <!-- 异步输出 -->\r\n    <appender name =\"ASYNC\" class= \"ch.qos.logback.classic.AsyncAppender\">\r\n        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\r\n        <discardingThreshold>0</discardingThreshold>\r\n        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\r\n        <queueSize>256</queueSize>\r\n        <!-- 添加附加的appender,最多只能添加一个 -->\r\n        <appender-ref ref =\"ROLLING-FILE-1\"/>\r\n    </appender>\r\n\r\n    <root level=\"INFO\">\r\n        <appender-ref ref=\"STDOUT\" />\r\n        <appender-ref ref=\"ASYNC\" />\r\n    </root>\r\n\r\n    <!-- 框架的日志到error级别才输出 -->\r\n    <logger name=\"org.springframework\" level=\"ERROR\"/>\r\n    <!-- 项目的日志，debug以上的都输出 -->\r\n    <logger name=\"com.hengbao.ethiopiatelecomrecharge\" level=\"DEBUG\" />\r\n</configuration>\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/34/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/33",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/33/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/33/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/33/events",
        "html_url": "https://github.com/itlgl/note/issues/33",
        "id": 400604290,
        "node_id": "MDU6SXNzdWU0MDA2MDQyOTA=",
        "number": 33,
        "title": "在Android5.0（API21）的手机上调用View.setStateListAnimator(null)方法导致app崩溃",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2019-01-18T07:30:35Z",
        "updated_at": "2019-01-18T07:30:35Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 现象\r\n机型： HTC M8t\r\nAndroid 版本： 5.0.2\r\n复现： 在自定义的Button内，调用setStateListAnimator(null)，APP崩溃，报错\"JNI DETECTED ERROR IN APPLICATION: can't call void android.view.View.setTranslationZ(float) on null object\"，log很长，不能准确的定位问题，通过屏蔽代码的方法，找到了上述原因。\r\n\r\n其他人也碰到过这个问题：\r\n[qq_34709056的文章](https://blog.csdn.net/qq_34709056/article/details/78864053)也碰到了这个问题，他通过在style文件中设置规避了这个问题。\r\n[stackoverflow](https://stackoverflow.com/questions/40928788/cant-call-void-android-view-view-setelevationfloat-on-null-object-in-lapism-s)上有人给出了google issue链接，看来这应该是Android系统的一个bug。\r\n\r\n# 错误log\r\n```console\r\nA/art: art/runtime/check_jni.cc:65] JNI DETECTED ERROR IN APPLICATION: can't call void android.view.View.setTranslationZ(float) on null object\r\nA/art: art/runtime/check_jni.cc:65]     in call to CallVoidMethodV\r\nA/art: art/runtime/check_jni.cc:65]     from void android.animation.PropertyValuesHolder.nCallFloatMethod(java.lang.Object, long, float)\r\nA/art: art/runtime/check_jni.cc:65] \"main\" prio=5 tid=1 Runnable\r\nA/art: art/runtime/check_jni.cc:65]   | group=\"main\" sCount=0 dsCount=0 obj=0x75b3c8a0 self=0xb72b8b88\r\nA/art: art/runtime/check_jni.cc:65]   | sysTid=2633 nice=0 cgrp=apps sched=0/0 handle=0xb6fcf058\r\nA/art: art/runtime/check_jni.cc:65]   | state=R schedstat=( 0 0 0 ) utm=15 stm=5 core=3 HZ=100\r\nA/art: art/runtime/check_jni.cc:65]   | stack=0xbe7e6000-0xbe7e8000 stackSize=8MB\r\nA/art: art/runtime/check_jni.cc:65]   | held mutexes= \"mutator lock\"(shared held)\r\nA/art: art/runtime/check_jni.cc:65]   native: #00 pc 00004a60  /system/lib/libbacktrace_libc++.so (UnwindCurrent::Unwind(unsigned int, ucontext*)+23)\r\nA/art: art/runtime/check_jni.cc:65]   native: #01 pc 0000306d  /system/lib/libbacktrace_libc++.so (Backtrace::Unwind(unsigned int, ucontext*)+8)\r\nA/art: art/runtime/check_jni.cc:65]   native: #02 pc 002442dd  /system/lib/libart.so (art::DumpNativeStack(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, int, char const*, art::mirror::ArtMethod*)+68)\r\nA/art: art/runtime/check_jni.cc:65]   native: #03 pc 0022777f  /system/lib/libart.so (art::Thread::DumpStack(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const+394)\r\nA/art: art/runtime/check_jni.cc:65]   native: #04 pc 000af2db  /system/lib/libart.so (art::JniAbort(char const*, char const*)+582)\r\nA/art: art/runtime/check_jni.cc:65]   native: #05 pc 000afa21  /system/lib/libart.so (art::JniAbortF(char const*, char const*, ...)+60)\r\nA/art: art/runtime/check_jni.cc:65]   native: #06 pc 000b0613  /system/lib/libart.so (art::ScopedCheck::CheckVirtualMethod(_jobject*, _jmethodID*)+402)\r\nA/art: art/runtime/check_jni.cc:65]   native: #07 pc 000ba087  /system/lib/libart.so (art::CheckJNI::CallVoidMethodV(_JNIEnv*, _jobject*, _jmethodID*, std::__va_list)+70)\r\nA/art: art/runtime/check_jni.cc:65]   native: #08 pc 00060283  /system/lib/libandroid_runtime.so (???)\r\nA/art: art/runtime/check_jni.cc:65]   native: #09 pc 000721e5  /data/dalvik-cache/arm/system@framework@boot.oat (Java_android_animation_PropertyValuesHolder_nCallFloatMethod__Ljava_lang_Object_2JF+132)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.PropertyValuesHolder.nCallFloatMethod(Native method)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.PropertyValuesHolder.access$400(PropertyValuesHolder.java:38)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.PropertyValuesHolder$FloatPropertyValuesHolder.setAnimatedValue(PropertyValuesHolder.java:1296)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.ObjectAnimator.animateValue(ObjectAnimator.java:952)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.ValueAnimator.animationFrame(ValueAnimator.java:1207)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.ValueAnimator.doAnimationFrame(ValueAnimator.java:1248)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.ValueAnimator$AnimationHandler.doAnimationFrame(ValueAnimator.java:659)\r\nA/art: art/runtime/check_jni.cc:65]   at android.animation.ValueAnimator$AnimationHandler.run(ValueAnimator.java:682)\r\nA/art: art/runtime/check_jni.cc:65]   at android.view.Choreographer$CallbackRecord.run(Choreographer.java:792)\r\nA/art: art/runtime/check_jni.cc:65]   at android.view.Choreographer.doCallbacks(Choreographer.java:596)\r\nA/art: art/runtime/check_jni.cc:65]   at android.view.Choreographer.doFrame(Choreographer.java:556)\r\nA/art: art/runtime/check_jni.cc:65]   at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:778)\r\nA/art: art/runtime/check_jni.cc:65]   at android.os.Handler.handleCallback(Handler.java:739)\r\nA/art: art/runtime/check_jni.cc:65]   at android.os.Handler.dispatchMessage(Handler.java:95)\r\nA/art: art/runtime/check_jni.cc:65]   at android.os.Looper.loop(Looper.java:155)\r\nA/art: art/runtime/check_jni.cc:65]   at android.app.ActivityThread.main(ActivityThread.java:5696)\r\nA/art: art/runtime/check_jni.cc:65]   at java.lang.reflect.Method.invoke!(Native method)\r\nA/art: art/runtime/check_jni.cc:65]   at java.lang.reflect.Method.invoke(Method.java:372)\r\nA/art: art/runtime/check_jni.cc:65]   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1028)\r\nA/art: art/runtime/check_jni.cc:65]   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:823)\r\nA/art: art/runtime/check_jni.cc:65] \r\nA/art: art/runtime/runtime.cc:284] Runtime aborting...\r\nA/art: art/runtime/runtime.cc:284] Aborting thread:\r\nA/art: art/runtime/runtime.cc:284] \"main\" prio=5 tid=1 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x75b3c8a0 self=0xb72b8b88\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2633 nice=0 cgrp=apps sched=0/0 handle=0xb6fcf058\r\nA/art: art/runtime/runtime.cc:284]   | state=R schedstat=( 0 0 0 ) utm=15 stm=7 core=3 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xbe7e6000-0xbe7e8000 stackSize=8MB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes= \"abort lock\" \"mutator lock\"(shared held)\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 00004a60  /system/lib/libbacktrace_libc++.so (UnwindCurrent::Unwind(unsigned int, ucontext*)+23)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 0000306d  /system/lib/libbacktrace_libc++.so (Backtrace::Unwind(unsigned int, ucontext*)+8)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 002442dd  /system/lib/libart.so (art::DumpNativeStack(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, int, char const*, art::mirror::ArtMethod*)+68)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 0022777f  /system/lib/libart.so (art::Thread::DumpStack(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const+394)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 0021a51f  /system/lib/libart.so (art::AbortState::DumpThread(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, art::Thread*)+22)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 0021a785  /system/lib/libart.so (art::AbortState::Dump(std::__1::basic_ostream<char, std::__1::char_traits<char> >&)+364)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 0021a951  /system/lib/libart.so (art::Runtime::Abort()+72)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 000a5de7  /system/lib/libart.so (art::LogMessage::~LogMessage()+1322)\r\nA/art: art/runtime/runtime.cc:284]   native: #08 pc 000af4c9  /system/lib/libart.so (art::JniAbort(char const*, char const*)+1076)\r\nA/art: art/runtime/runtime.cc:284]   native: #09 pc 000afa21  /system/lib/libart.so (art::JniAbortF(char const*, char const*, ...)+60)\r\nA/art: art/runtime/runtime.cc:284]   native: #10 pc 000b0613  /system/lib/libart.so (art::ScopedCheck::CheckVirtualMethod(_jobject*, _jmethodID*)+402)\r\nA/art: art/runtime/runtime.cc:284]   native: #11 pc 000ba087  /system/lib/libart.so (art::CheckJNI::CallVoidMethodV(_JNIEnv*, _jobject*, _jmethodID*, std::__va_list)+70)\r\nA/art: art/runtime/runtime.cc:284]   native: #12 pc 00060283  /system/lib/libandroid_runtime.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #13 pc 000721e5  /data/dalvik-cache/arm/system@framework@boot.oat (Java_android_animation_PropertyValuesHolder_nCallFloatMethod__Ljava_lang_Object_2JF+132)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.PropertyValuesHolder.nCallFloatMethod(Native method)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.PropertyValuesHolder.access$400(PropertyValuesHolder.java:38)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.PropertyValuesHolder$FloatPropertyValuesHolder.setAnimatedValue(PropertyValuesHolder.java:1296)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ObjectAnimator.animateValue(ObjectAnimator.java:952)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator.animationFrame(ValueAnimator.java:1207)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator.doAnimationFrame(ValueAnimator.java:1248)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator$AnimationHandler.doAnimationFrame(ValueAnimator.java:659)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator$AnimationHandler.run(ValueAnimator.java:682)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer$CallbackRecord.run(Choreographer.java:792)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer.doCallbacks(Choreographer.java:596)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer.doFrame(Choreographer.java:556)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:778)\r\nA/art: art/runtime/runtime.cc:284]   at android.os.Handler.handleCallback(Handler.java:739)\r\nA/art: art/runtime/runtime.cc:284]   at android.os.Handler.dispatchMessage(Handler.java:95)\r\nA/art: art/runtime/runtime.cc:284]   at android.os.Looper.loop(Looper.java:155)\r\nA/art: art/runtime/runtime.cc:284]   at android.app.ActivityThread.main(ActivityThread.java:5696)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.reflect.Method.invoke!(Native method)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.reflect.Method.invoke(Method.java:372)\r\nA/art: art/runtime/runtime.cc:284]   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1028)\r\nA/art: art/runtime/runtime.cc:284]   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:823)\r\nA/art: art/runtime/runtime.cc:284] Dumping all threads without appropriate locks held: thread list lock mutator lock\r\nA/art: art/runtime/runtime.cc:284] All threads:\r\nA/art: art/runtime/runtime.cc:284] DALVIK THREADS (17):\r\nA/art: art/runtime/runtime.cc:284] \"main\" prio=5 tid=1 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x75b3c8a0 self=0xb72b8b88\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2633 nice=0 cgrp=apps sched=0/0 handle=0xb6fcf058\r\nA/art: art/runtime/runtime.cc:284]   | state=R schedstat=( 0 0 0 ) utm=16 stm=7 core=3 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xbe7e6000-0xbe7e8000 stackSize=8MB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes= \"abort lock\"\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 00004a60  /system/lib/libbacktrace_libc++.so (UnwindCurrent::Unwind(unsigned int, ucontext*)+23)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 0000306d  /system/lib/libbacktrace_libc++.so (Backtrace::Unwind(unsigned int, ucontext*)+8)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 002442dd  /system/lib/libart.so (art::DumpNativeStack(std::__1::basic_ostream<char, std::__1::char_traits<char> >&, int, char const*, art::mirror::ArtMethod*)+68)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 0022777f  /system/lib/libart.so (art::Thread::DumpStack(std::__1::basic_ostream<char, std::__1::char_traits<char> >&) const+394)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 00232165  /system/lib/libart.so (art::ThreadList::DumpLocked(std::__1::basic_ostream<char, std::__1::char_traits<char> >&)+104)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 0021a705  /system/lib/libart.so (art::AbortState::Dump(std::__1::basic_ostream<char, std::__1::char_traits<char> >&)+236)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 0021a951  /system/lib/libart.so (art::Runtime::Abort()+72)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 000a5de7  /system/lib/libart.so (art::LogMessage::~LogMessage()+1322)\r\nA/art: art/runtime/runtime.cc:284]   native: #08 pc 000af4c9  /system/lib/libart.so (art::JniAbort(char const*, char const*)+1076)\r\nA/art: art/runtime/runtime.cc:284]   native: #09 pc 000afa21  /system/lib/libart.so (art::JniAbortF(char const*, char const*, ...)+60)\r\nA/art: art/runtime/runtime.cc:284]   native: #10 pc 000b0613  /system/lib/libart.so (art::ScopedCheck::CheckVirtualMethod(_jobject*, _jmethodID*)+402)\r\nA/art: art/runtime/runtime.cc:284]   native: #11 pc 000ba087  /system/lib/libart.so (art::CheckJNI::CallVoidMethodV(_JNIEnv*, _jobject*, _jmethodID*, std::__va_list)+70)\r\nA/art: art/runtime/runtime.cc:284]   native: #12 pc 00060283  /system/lib/libandroid_runtime.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #13 pc 000721e5  /data/dalvik-cache/arm/system@framework@boot.oat (Java_android_animation_PropertyValuesHolder_nCallFloatMethod__Ljava_lang_Object_2JF+132)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.PropertyValuesHolder.nCallFloatMethod(Native method)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.PropertyValuesHolder.access$400(PropertyValuesHolder.java:38)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.PropertyValuesHolder$FloatPropertyValuesHolder.setAnimatedValue(PropertyValuesHolder.java:1296)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ObjectAnimator.animateValue(ObjectAnimator.java:952)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator.animationFrame(ValueAnimator.java:1207)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator.doAnimationFrame(ValueAnimator.java:1248)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator$AnimationHandler.doAnimationFrame(ValueAnimator.java:659)\r\nA/art: art/runtime/runtime.cc:284]   at android.animation.ValueAnimator$AnimationHandler.run(ValueAnimator.java:682)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer$CallbackRecord.run(Choreographer.java:792)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer.doCallbacks(Choreographer.java:596)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer.doFrame(Choreographer.java:556)\r\nA/art: art/runtime/runtime.cc:284]   at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:778)\r\nA/art: art/runtime/runtime.cc:284]   at android.os.Handler.handleCallback(Handler.java:739)\r\nA/art: art/runtime/runtime.cc:284]   at android.os.Handler.dispatchMessage(Handler.java:95)\r\nA/art: art/runtime/runtime.cc:284]   at android.os.Looper.loop(Looper.java:155)\r\nA/art: art/runtime/runtime.cc:284]   at android.app.ActivityThread.main(ActivityThread.java:5696)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.reflect.Method.invoke!(Native method)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.reflect.Method.invoke(Method.java:372)\r\nA/art: art/runtime/runtime.cc:284]   at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1028)\r\nA/art: art/runtime/runtime.cc:284]   at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:823)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"Heap thread pool worker thread 0\" prio=5 tid=2 Native (still starting up)\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x0 self=0xb72be4e8\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2639 nice=0 cgrp=apps sched=0/0 handle=0xb829a158\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=1 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb4ae2000-0xb4ae4000 stackSize=1020KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 00233327  /system/lib/libart.so (art::ThreadPool::GetTask(art::Thread*)+50)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 002332cd  /system/lib/libart.so (art::ThreadPoolWorker::Run()+52)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 00233b09  /system/lib/libart.so (art::ThreadPoolWorker::Callback(void*)+52)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"Heap thread pool worker thread 1\" prio=5 tid=3 Native (still starting up)\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x0 self=0xb73029a0\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2641 nice=0 cgrp=apps sched=0/0 handle=0xb7fdb178\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=1 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb49e0000-0xb49e2000 stackSize=1020KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 00233327  /system/lib/libart.so (art::ThreadPool::GetTask(art::Thread*)+50)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 002332cd  /system/lib/libart.so (art::ThreadPoolWorker::Run()+52)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 00233b09  /system/lib/libart.so (art::ThreadPoolWorker::Callback(void*)+52)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"Heap thread pool worker thread 2\" prio=5 tid=4 Native (still starting up)\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x0 self=0xb82458a0\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2643 nice=0 cgrp=apps sched=0/0 handle=0xb7fdab88\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=2 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb48da000-0xb48dc000 stackSize=1020KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 00233327  /system/lib/libart.so (art::ThreadPool::GetTask(art::Thread*)+50)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 002332cd  /system/lib/libart.so (art::ThreadPoolWorker::Run()+52)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 00233b09  /system/lib/libart.so (art::ThreadPoolWorker::Callback(void*)+52)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"Signal Catcher\" prio=5 tid=5 WaitingInMainSignalCatcherLoop\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c00080 self=0xb72ddb00\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2644 nice=0 cgrp=apps sched=0/0 handle=0xb7fda578\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=2 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb47d2000-0xb47d4000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0003ac08  /system/lib/libc.so (__rt_sigtimedwait+12)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000146f5  /system/lib/libc.so (sigwait+24)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 0021d4b7  /system/lib/libart.so (art::SignalCatcher::WaitForSignal(art::Thread*, art::SignalSet&)+66)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 0021efa5  /system/lib/libart.so (art::SignalCatcher::Run(void*)+196)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"JDWP\" prio=5 tid=6 WaitingInMainDebuggerLoop\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c2b080 self=0xb82b3978\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2645 nice=0 cgrp=apps sched=0/0 handle=0xb7fda7c0\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=3 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb46ce000-0xb46d0000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 00039830  /system/lib/libc.so (__pselect6+20)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 0001275f  /system/lib/libc.so (select+60)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 002835ab  /system/lib/libart.so (art::JDWP::JdwpAdbState::ProcessIncoming()+186)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 0018c6f5  /system/lib/libart.so (art::JDWP::JdwpState::Run()+348)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 0018dc1f  /system/lib/libart.so (art::JDWP::StartJdwpThread(void*)+10)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"ReferenceQueueDaemon\" prio=5 tid=7 Waiting\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c2d080 self=0xb80e23c0\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2646 nice=0 cgrp=apps sched=0/0 handle=0xb80e2798\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=2 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb45c4000-0xb45c6000 stackSize=1036KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 001ebad7  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, long long, int, bool, art::ThreadState)+998)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 001ed0b1  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, art::mirror::Object*, long long, int, bool, art::ThreadState)+120)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 001f9da5  /system/lib/libart.so (art::Object_wait(_JNIEnv*, _jobject*)+32)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 000003d3  /data/dalvik-cache/arm/system@framework@boot.oat (Java_java_lang_Object_wait__+82)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Object.wait!(Native method)\r\nA/art: art/runtime/runtime.cc:284]   - waiting on <0x25f76245> (a java.lang.Class<java.lang.ref.ReferenceQueue>)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Daemons$ReferenceQueueDaemon.run(Daemons.java:141)\r\nA/art: art/runtime/runtime.cc:284]   - locked <0x25f76245> (a java.lang.Class<java.lang.ref.ReferenceQueue>)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Thread.run(Thread.java:818)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"FinalizerDaemon\" prio=5 tid=8 Waiting\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c2d0e0 self=0xb80e2ad0\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2647 nice=0 cgrp=apps sched=0/0 handle=0xb80e30a0\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=3 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb44ba000-0xb44bc000 stackSize=1036KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 001ebad7  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, long long, int, bool, art::ThreadState)+998)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 001ed0b1  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, art::mirror::Object*, long long, int, bool, art::ThreadState)+120)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 001f9dd1  /system/lib/libart.so (art::Object_waitJI(_JNIEnv*, _jobject*, long long, int)+36)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 000005f7  /data/dalvik-cache/arm/system@framework@boot.oat (Java_java_lang_Object_wait__JI+102)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Object.wait!(Native method)\r\nA/art: art/runtime/runtime.cc:284]   - waiting on <0x10a40d9a> (a java.lang.ref.ReferenceQueue)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Object.wait(Object.java:422)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:101)\r\nA/art: art/runtime/runtime.cc:284]   - locked <0x10a40d9a> (a java.lang.ref.ReferenceQueue)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:72)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Daemons$FinalizerDaemon.run(Daemons.java:181)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Thread.run(Thread.java:818)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"FinalizerWatchdogDaemon\" prio=5 tid=9 Waiting\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c2d140 self=0xb77c75f8\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2648 nice=0 cgrp=apps sched=0/0 handle=0xb77c7bc8\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=2 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb43b0000-0xb43b2000 stackSize=1036KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 001ebad7  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, long long, int, bool, art::ThreadState)+998)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 001ed0b1  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, art::mirror::Object*, long long, int, bool, art::ThreadState)+120)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 001f9da5  /system/lib/libart.so (art::Object_wait(_JNIEnv*, _jobject*)+32)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 000003d3  /data/dalvik-cache/arm/system@framework@boot.oat (Java_java_lang_Object_wait__+82)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Object.wait!(Native method)\r\nA/art: art/runtime/runtime.cc:284]   - waiting on <0x311ae6cb> (a java.lang.Daemons$FinalizerWatchdogDaemon)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Daemons$FinalizerWatchdogDaemon.waitForObject(Daemons.java:254)\r\nA/art: art/runtime/runtime.cc:284]   - locked <0x311ae6cb> (a java.lang.Daemons$FinalizerWatchdogDaemon)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Daemons$FinalizerWatchdogDaemon.run(Daemons.java:219)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Thread.run(Thread.java:818)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"HeapTrimmerDaemon\" prio=5 tid=10 Waiting\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c2d1a0 self=0xb77c7fc8\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2650 nice=0 cgrp=apps sched=0/0 handle=0xb77c85c0\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=2 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb42a6000-0xb42a8000 stackSize=1036KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 001ebad7  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, long long, int, bool, art::ThreadState)+998)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 001ed0b1  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, art::mirror::Object*, long long, int, bool, art::ThreadState)+120)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 001f9da5  /system/lib/libart.so (art::Object_wait(_JNIEnv*, _jobject*)+32)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 000003d3  /data/dalvik-cache/arm/system@framework@boot.oat (Java_java_lang_Object_wait__+82)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Object.wait!(Native method)\r\nA/art: art/runtime/runtime.cc:284]   - waiting on <0x26c84ea8> (a java.lang.Daemons$HeapTrimmerDaemon)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Daemons$HeapTrimmerDaemon.run(Daemons.java:365)\r\nA/art: art/runtime/runtime.cc:284]   - locked <0x26c84ea8> (a java.lang.Daemons$HeapTrimmerDaemon)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Thread.run(Thread.java:818)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"GCDaemon\" prio=5 tid=11 Waiting\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c2d200 self=0xb77c8998\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2651 nice=0 cgrp=apps sched=0/0 handle=0xb77c8f68\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=2 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb419c000-0xb419e000 stackSize=1036KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000a8867  /system/lib/libart.so (art::ConditionVariable::Wait(art::Thread*)+82)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 001ebad7  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, long long, int, bool, art::ThreadState)+998)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 001ed0b1  /system/lib/libart.so (art::Monitor::Wait(art::Thread*, art::mirror::Object*, long long, int, bool, art::ThreadState)+120)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 001f9da5  /system/lib/libart.so (art::Object_wait(_JNIEnv*, _jobject*)+32)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 000003d3  /data/dalvik-cache/arm/system@framework@boot.oat (Java_java_lang_Object_wait__+82)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Object.wait!(Native method)\r\nA/art: art/runtime/runtime.cc:284]   - waiting on <0x0930ddc1> (a java.lang.Daemons$GCDaemon)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Daemons$GCDaemon.run(Daemons.java:396)\r\nA/art: art/runtime/runtime.cc:284]   - locked <0x0930ddc1> (a java.lang.Daemons$GCDaemon)\r\nA/art: art/runtime/runtime.cc:284]   at java.lang.Thread.run(Thread.java:818)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"Binder_1\" prio=5 tid=12 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c85080 self=0xb8372c80\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2652 nice=0 cgrp=apps sched=0/0 handle=0xb83707a0\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=0 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb3e9a000-0xb3e9c000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 00039514  /system/lib/libc.so (__ioctl+8)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 0003fc35  /system/lib/libc.so (ioctl+14)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 0001cd83  /system/lib/libbinder.so (android::IPCThreadState::talkWithDriver(bool)+138)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 0001d327  /system/lib/libbinder.so (android::IPCThreadState::getAndExecuteCommand()+6)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 0001d39d  /system/lib/libbinder.so (android::IPCThreadState::joinThreadPool(bool)+68)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00021a33  /system/lib/libbinder.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011671  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+112)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 0005cfa1  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+96)\r\nA/art: art/runtime/runtime.cc:284]   native: #08 pc 00011131  /system/lib/libutils.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #09 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #10 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"Binder_2\" prio=5 tid=13 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c89080 self=0xb8373b58\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2653 nice=0 cgrp=apps sched=0/0 handle=0xb8373910\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=0 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb022d000-0xb022f000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 00039514  /system/lib/libc.so (__ioctl+8)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 0003fc35  /system/lib/libc.so (ioctl+14)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 0001cd83  /system/lib/libbinder.so (android::IPCThreadState::talkWithDriver(bool)+138)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 0001d327  /system/lib/libbinder.so (android::IPCThreadState::getAndExecuteCommand()+6)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 0001d39d  /system/lib/libbinder.so (android::IPCThreadState::joinThreadPool(bool)+68)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00021a33  /system/lib/libbinder.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011671  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+112)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 0005cfa1  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+96)\r\nA/art: art/runtime/runtime.cc:284]   native: #08 pc 00011131  /system/lib/libutils.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #09 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #10 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"Binder_3\" prio=5 tid=14 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12c93080 self=0xb8374820\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2654 nice=0 cgrp=apps sched=0/0 handle=0xb83745d8\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=0 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xb012f000-0xb0131000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 00039514  /system/lib/libc.so (__ioctl+8)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 0003fc35  /system/lib/libc.so (ioctl+14)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 0001cd83  /system/lib/libbinder.so (android::IPCThreadState::talkWithDriver(bool)+138)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 0001d327  /system/lib/libbinder.so (android::IPCThreadState::getAndExecuteCommand()+6)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 0001d39d  /system/lib/libbinder.so (android::IPCThreadState::joinThreadPool(bool)+68)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00021a33  /system/lib/libbinder.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011671  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+112)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 0005cfa1  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+96)\r\nA/art: art/runtime/runtime.cc:284]   native: #08 pc 00011131  /system/lib/libutils.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #09 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #10 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"RenderThread\" prio=5 tid=15 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12ded080 self=0xb83df688\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2657 nice=-4 cgrp=apps sched=0/0 handle=0xb83df400\r\nA/art: art/runtime/runtime.cc:284]   | state=R schedstat=( 0 0 0 ) utm=8 stm=4 core=3 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0xa1250000-0xa1252000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 00039d18  /system/lib/libc.so (__epoll_pwait+20)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 000112e3  /system/lib/libc.so (epoll_pwait+26)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 000112f1  /system/lib/libc.so (epoll_wait+6)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 00013d17  /system/lib/libutils.so (android::Looper::pollInner(int)+98)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 00013fc9  /system/lib/libutils.so (android::Looper::pollOnce(int, int*, int*, void**)+92)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 0003e909  /system/lib/libhwui.so (android::uirenderer::renderthread::RenderThread::threadLoop()+44)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00011671  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+112)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 0005cfa1  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+96)\r\nA/art: art/runtime/runtime.cc:284]   native: #08 pc 00011131  /system/lib/libutils.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #09 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #10 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"hwuiTask1\" prio=5 tid=16 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12e2d080 self=0xb84a19e8\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2660 nice=-2 cgrp=apps sched=0/0 handle=0xb84a11a0\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=1 stm=0 core=0 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0x9fece000-0x9fed0000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 00012e55  /system/lib/libc.so (__pthread_cond_timedwait_relative(pthread_cond_t*, pthread_mutex_t*, timespec const*)+56)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 00013c4d  /system/lib/libhwui.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 00011671  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+112)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 0005cfa1  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+96)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00011131  /system/lib/libutils.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \"hwuiTask2\" prio=5 tid=17 Native\r\nA/art: art/runtime/runtime.cc:284]   | group=\"\" sCount=0 dsCount=0 obj=0x12e31080 self=0xb84a5620\r\nA/art: art/runtime/runtime.cc:284]   | sysTid=2661 nice=-2 cgrp=apps sched=0/0 handle=0xb84a17a0\r\nA/art: art/runtime/runtime.cc:284]   | state=S schedstat=( 0 0 0 ) utm=0 stm=0 core=0 HZ=100\r\nA/art: art/runtime/runtime.cc:284]   | stack=0x9fdd0000-0x9fdd2000 stackSize=1012KB\r\nA/art: art/runtime/runtime.cc:284]   | held mutexes=\r\nA/art: art/runtime/runtime.cc:284]   native: #00 pc 0000f8bc  /system/lib/libc.so (syscall+28)\r\nA/art: art/runtime/runtime.cc:284]   native: #01 pc 00012e55  /system/lib/libc.so (__pthread_cond_timedwait_relative(pthread_cond_t*, pthread_mutex_t*, timespec const*)+56)\r\nA/art: art/runtime/runtime.cc:284]   native: #02 pc 00013c4d  /system/lib/libhwui.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #03 pc 00011671  /system/lib/libutils.so (android::Thread::_threadLoop(void*)+112)\r\nA/art: art/runtime/runtime.cc:284]   native: #04 pc 0005cfa1  /system/lib/libandroid_runtime.so (android::AndroidRuntime::javaThreadShell(void*)+96)\r\nA/art: art/runtime/runtime.cc:284]   native: #05 pc 00011131  /system/lib/libutils.so (???)\r\nA/art: art/runtime/runtime.cc:284]   native: #06 pc 00012f83  /system/lib/libc.so (__pthread_start(void*)+30)\r\nA/art: art/runtime/runtime.cc:284]   native: #07 pc 00011047  /system/lib/libc.so (__start_thread+6)\r\nA/art: art/runtime/runtime.cc:284]   (no managed stack frames)\r\nA/art: art/runtime/runtime.cc:284] \r\nA/art: art/runtime/runtime.cc:284] \r\nA/libc: Fatal signal 6 (SIGABRT), code -6 in tid 2633 (m.itlgl.testapp)\r\nW/libc: Security Level: (1), Debug inforamtion is controlled by the DUMPABLE flag.\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/33/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/32",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/32/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/32/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/32/events",
        "html_url": "https://github.com/itlgl/note/issues/32",
        "id": 394321324,
        "node_id": "MDU6SXNzdWUzOTQzMjEzMjQ=",
        "number": 32,
        "title": "EOS签名R值过大导致报错\"is_canonical( c ): signature is not canonical\"",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-12-27T07:44:56Z",
        "updated_at": "2018-12-27T07:44:56Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 简要\r\nEOS中规定签名的R和S必须同时小于N/2才是合法的签名。\r\n\r\n# 详细\r\nEOS签名交易相对BTC和ETH来说，对签名的要求更加严格了。\r\n\r\nBTC中bip62规定了（(Low S values in signatures)[https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki#Low_S_values_in_signatures]）签名中的S值不能大于N/2：\r\n> The value S in signatures must be between 0x1 and 0x7FFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 5D576E73 57A4501D DFE92F46 681B20A0 (inclusive). If S is too high, simply replace it by S' = 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141 - S. \r\n\r\n而这产生了一个问题，对于一个规范的R值和S值，`(R, S)`、`(N-R, S)`、`(R, N-S)`、`(N-R, N-S)`都是合法的签名值，而比特币只是规避了S值过大的情况，R值过大的情况它不管，所以可能会造成只要把R值改成N-R就可以发布一笔合法的、交易hash不同的交易。EOS要规避这个问题，**规定R和S值必须同时小于N/2才是合法的签名**。\r\n\r\nEOS的签名代码在：[https://github.com/EOSIO/eosjs-ecc/commit/09c823ac4c4fb4f7257d8ed2df45a34215a8c537#diff-e8c843fd1f732a963ec41decb2e69133R241](https://github.com/EOSIO/eosjs-ecc/commit/09c823ac4c4fb4f7257d8ed2df45a34215a8c537#diff-e8c843fd1f732a963ec41decb2e69133R241)\r\n\r\n![em _20181227154010](https://user-images.githubusercontent.com/7078104/50470972-b3cd8300-09ed-11e9-91c4-39e99b11f2d0.png)\r\n\r\n论述签名的博客： (Steem & BitShares Cryptographic Security Update)[https://steemit.com/steem/@dantheman/steem-and-bitshares-cryptographic-security-update]",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/32/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/31",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/31/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/31/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/31/events",
        "html_url": "https://github.com/itlgl/note/issues/31",
        "id": 393793572,
        "node_id": "MDU6SXNzdWUzOTM3OTM1NzI=",
        "number": 31,
        "title": "Android Studio配置项",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-12-24T01:12:39Z",
        "updated_at": "2018-12-24T01:12:39Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# gradle缓存路径配置\r\n默认Windows gradle缓存路径在`C:\\Users\\[your user name]\\.gradle`目录下，缓存多了会导致c盘内容过多，且重装系统后需要重新下载。\r\n可以在环境变量下设置`GRADLE_USER_HOME`变量解决：\r\n![gradle环境变量](https://user-images.githubusercontent.com/7078104/50388833-fb3ce080-075b-11e9-8eb0-65288e64f497.png)\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/31/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/30",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/30/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/30/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/30/events",
        "html_url": "https://github.com/itlgl/note/issues/30",
        "id": 379003026,
        "node_id": "MDU6SXNzdWUzNzkwMDMwMjY=",
        "number": 30,
        "title": "Android从本地选择图片文件转为Bitmap，并用zxing解析Bitmap",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-11-09T02:55:48Z",
        "updated_at": "2018-11-22T01:45:44Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 如何从本地选择图片文件\r\n使用Intent调用系统相册后，`onActivityResult`函数返回的是`Uri`格式的路径\r\n```java\r\n/**\r\n * 打开系统相册\r\n */\r\nprivate void openSysAlbum() {\r\n    Intent innerIntent = new Intent();\r\n    if (Build.VERSION.SDK_INT < 19) {\r\n        innerIntent.setAction(Intent.ACTION_GET_CONTENT);\r\n    } else {\r\n        innerIntent.setAction(Intent.ACTION_OPEN_DOCUMENT);\r\n    }\r\n    innerIntent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, \"image/*\");\r\n    Intent wrapperIntent = Intent.createChooser(innerIntent, \"选择二维码图片\");\r\n    startActivityForResult(wrapperIntent, SELECT_IMAGE_REQUEST_CODE);\r\n}\r\n\r\n@Override\r\nprotected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    switch (requestCode) {\r\n        case SELECT_IMAGE_REQUEST_CODE:\r\n            if (resultCode == RESULT_OK) {\r\n                Uri uri = data.getData();\r\n                scanningImage(uri);\r\n            }\r\n            break;\r\n    }\r\n}\r\n```\r\n\r\n# 如何将Uri的路径转化为Bitmap\r\n获取Bitmap现在我查到两种解决方案：\r\n - 一种是根据Uri查询图库的数据库，找到文件的真实路径，然后再解析为Bitmap；\r\n - 第二种([http://blog.sina.com.cn/s/blog_5de73d0b0100zfm8.html](http://blog.sina.com.cn/s/blog_5de73d0b0100zfm8.html))是直接根据Uri直接获取到InputStream，再解析为Bitmap。\r\n\r\n两种方案都可以，我感觉第二种方案更加靠谱一点，因为系统的数据库可能会更改，但是直接获取InputStream是不会变的。\r\n## 第一种方案代码\r\n```java\r\n/**\r\n * \r\n * @param intent\r\n */\r\npublic void ecognition(Intent intent) {\r\n\tString photo_path = null;\r\n\t// 获取选中图片的路径\r\n\tString[] proj = { MediaStore.Images.Media.DATA };\r\n\tCursor cursor = getContentResolver().query(intent.getData(), proj, null, null, null);\r\n\tif (cursor.moveToFirst()) {\r\n\t\tphoto_path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));\r\n\t\tif (photo_path == null) {\r\n\t\t\tphoto_path = Utils.getPath(getApplicationContext(), intent.getData());\r\n\t\t}\r\n\t}\r\n\tcursor.close();\r\n\tQRDecode.decodeQR(photo_path, this);\r\n}\r\n\r\n/**\r\n * 解析二维码图片\r\n *\r\n * @param picturePath\r\n * @param listener\r\n * @return\r\n */\r\npublic static void decodeQR(String picturePath, OnScannerCompletionListener listener) {\r\n\ttry {\r\n\t\tdecodeQR(loadBitmap(picturePath), listener);\r\n\t} catch (FileNotFoundException e) {\r\n\t\te.printStackTrace();\r\n\t}\r\n}\r\n\r\npublic static Bitmap loadBitmap(String picturePath) throws FileNotFoundException {\r\n\tBitmapFactory.Options opt = new BitmapFactory.Options();\r\n\topt.inJustDecodeBounds = true;\r\n\tBitmap bitmap = BitmapFactory.decodeFile(picturePath, opt);\r\n\t// 获取到这个图片的原始宽度和高度\r\n\tint picWidth = opt.outWidth;\r\n\tint picHeight = opt.outHeight;\r\n\t// 获取画布中间方框的宽度和高度\r\n\tint screenWidth = CameraManager.MAX_FRAME_WIDTH;\r\n\tint screenHeight = CameraManager.MAX_FRAME_HEIGHT;\r\n\t// isSampleSize是表示对图片的缩放程度，比如值为2图片的宽度和高度都变为以前的1/2\r\n\topt.inSampleSize = 1;\r\n\t// 根据屏的大小和图片大小计算出缩放比例\r\n\tif (picWidth > picHeight) {\r\n\t\tif (picWidth > screenWidth)\r\n\t\t\topt.inSampleSize = picWidth / screenWidth;\r\n\t} else {\r\n\t\tif (picHeight > screenHeight)\r\n\t\t\topt.inSampleSize = picHeight / screenHeight;\r\n\t}\r\n\t// 生成有像素经过缩放了的bitmap\r\n\topt.inJustDecodeBounds = false;\r\n\tbitmap = BitmapFactory.decodeFile(picturePath, opt);\r\n\tif (bitmap == null) {\r\n\t\tthrow new FileNotFoundException(\"Couldn't open \" + picturePath);\r\n\t}\r\n\treturn bitmap;\r\n}\r\n```\r\n## 第二种方案代码（推荐）\r\n代码来源博客：[【Android】通过Uri获取Bitmap对象](http://blog.sina.com.cn/s/blog_5de73d0b0100zfm8.html)\r\n```java\r\n/**\r\n * 读取一个缩放后的图片，限定图片大小，避免OOM\r\n * http://blog.sina.com.cn/s/blog_5de73d0b0100zfm8.html\r\n * @param uri       图片uri，支持“file://”、“content://”\r\n * @param maxWidth  最大允许宽度\r\n * @param maxHeight 最大允许高度\r\n * @return  返回一个缩放后的Bitmap，失败则返回null\r\n */\r\npublic static Bitmap decodeUri(Context context, Uri uri, int maxWidth, int maxHeight) {\r\n    BitmapFactory.Options options = new BitmapFactory.Options();\r\n    options.inJustDecodeBounds = true; //只读取图片尺寸\r\n    resolveUri(context, uri, options);\r\n\r\n    //计算实际缩放比例\r\n    int scale = 1;\r\n    for (int i = 0; i < Integer.MAX_VALUE; i++) {\r\n        if ((options.outWidth / scale > maxWidth &&\r\n                options.outWidth / scale > maxWidth * 1.4) ||\r\n                (options.outHeight / scale > maxHeight &&\r\n                        options.outHeight / scale > maxHeight * 1.4)) {\r\n            scale++;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n\r\n    options.inSampleSize = scale;\r\n    options.inJustDecodeBounds = false;//读取图片内容\r\n    options.inPreferredConfig = Bitmap.Config.RGB_565; //根据情况进行修改\r\n    Bitmap bitmap = null;\r\n    try {\r\n        bitmap = resolveUriForBitmap(context, uri, options);\r\n    } catch (Throwable e) {\r\n        e.printStackTrace();\r\n    }\r\n    return bitmap;\r\n}\r\n\r\n// http://blog.sina.com.cn/s/blog_5de73d0b0100zfm8.html\r\nprivate static void resolveUri(Context context, Uri uri, BitmapFactory.Options options) {\r\n    if (uri == null) {\r\n        return;\r\n    }\r\n\r\n    String scheme = uri.getScheme();\r\n    if (ContentResolver.SCHEME_CONTENT.equals(scheme) ||\r\n            ContentResolver.SCHEME_FILE.equals(scheme)) {\r\n        InputStream stream = null;\r\n        try {\r\n            stream = context.getContentResolver().openInputStream(uri);\r\n            BitmapFactory.decodeStream(stream, null, options);\r\n        } catch (Exception e) {\r\n            Log.w(\"resolveUri\", \"Unable to open content: \" + uri, e);\r\n        } finally {\r\n            if (stream != null) {\r\n                try {\r\n                    stream.close();\r\n                } catch (IOException e) {\r\n                    Log.w(\"resolveUri\", \"Unable to close content: \" + uri, e);\r\n                }\r\n            }\r\n        }\r\n    } else if (ContentResolver.SCHEME_ANDROID_RESOURCE.equals(scheme)) {\r\n        Log.w(\"resolveUri\", \"Unable to close content: \" + uri);\r\n    } else {\r\n        Log.w(\"resolveUri\", \"Unable to close content: \" + uri);\r\n    }\r\n}\r\n\r\n// http://blog.sina.com.cn/s/blog_5de73d0b0100zfm8.html\r\nprivate static Bitmap resolveUriForBitmap(Context context, Uri uri, BitmapFactory.Options options) {\r\n    if (uri == null) {\r\n        return null;\r\n    }\r\n\r\n    Bitmap bitmap = null;\r\n    String scheme = uri.getScheme();\r\n    if (ContentResolver.SCHEME_CONTENT.equals(scheme) ||\r\n            ContentResolver.SCHEME_FILE.equals(scheme)) {\r\n        InputStream stream = null;\r\n        try {\r\n            stream = context.getContentResolver().openInputStream(uri);\r\n            bitmap = BitmapFactory.decodeStream(stream, null, options);\r\n        } catch (Exception e) {\r\n            Log.w(\"resolveUriForBitmap\", \"Unable to open content: \" + uri, e);\r\n        } finally {\r\n            if (stream != null) {\r\n                try {\r\n                    stream.close();\r\n                } catch (IOException e) {\r\n                    Log.w(\"resolveUriForBitmap\", \"Unable to close content: \" + uri, e);\r\n                }\r\n            }\r\n        }\r\n    } else if (ContentResolver.SCHEME_ANDROID_RESOURCE.equals(scheme)) {\r\n        Log.w(\"resolveUriForBitmap\", \"Unable to close content: \" + uri);\r\n    } else {\r\n        Log.w(\"resolveUriForBitmap\", \"Unable to close content: \" + uri);\r\n    }\r\n\r\n    return bitmap;\r\n}\r\n```\r\n# 如何用zxing解析Bitmap\r\n```java\r\n/**\r\n * 解析二维码图片\r\n *\r\n * @param srcBitmap\r\n * @return\r\n */\r\npublic static com.google.zxing.Result decodeQR(Bitmap srcBitmap) {\r\n    com.google.zxing.Result result = null;\r\n    if (srcBitmap != null) {\r\n        int width = srcBitmap.getWidth();\r\n        int height = srcBitmap.getHeight();\r\n        int[] pixels = new int[width * height];\r\n        srcBitmap.getPixels(pixels, 0, width, 0, 0, width, height);\r\n        // 新建一个RGBLuminanceSource对象\r\n        RGBLuminanceSource source = new RGBLuminanceSource(width, height, pixels);\r\n        // 将图片转换成二进制图片\r\n        BinaryBitmap binaryBitmap = new BinaryBitmap(new GlobalHistogramBinarizer(source));\r\n        QRCodeReader reader = new QRCodeReader();// 初始化解析对象\r\n        try {\r\n            result = reader.decode(binaryBitmap, CodeHints.getDefaultDecodeHints());// 开始解析\r\n        } catch (NotFoundException e) {\r\n            e.printStackTrace();\r\n        } catch (ChecksumException e) {\r\n            e.printStackTrace();\r\n        } catch (FormatException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    return result;\r\n}\r\n```\r\n其中`CodeHints`是一个自定义类，类代码：\r\n```java\r\nimport java.util.ArrayList;\r\nimport java.util.EnumMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport com.google.zxing.BarcodeFormat;\r\nimport com.google.zxing.DecodeHintType;\r\nimport com.google.zxing.EncodeHintType;\r\nimport com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;\r\n\r\nimport android.text.TextUtils;\r\n\r\npublic class CodeHints {\r\n\tprivate static Map<DecodeHintType, Object> DECODE_HINTS = new EnumMap<DecodeHintType, Object>(DecodeHintType.class);\r\n\tprivate static Map<EncodeHintType, Object> ENCODE_HINTS = new EnumMap<>(EncodeHintType.class);\r\n\r\n\tstatic {\r\n\t\tList<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();\r\n\t\tformats.add(BarcodeFormat.QR_CODE);\r\n\t\tDECODE_HINTS.put(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n//\t\tDECODE_HINTS.put(DecodeHintType.CHARACTER_SET, \"UTF-8\");\r\n\r\n\t\tENCODE_HINTS.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\r\n//\t\tENCODE_HINTS.put(EncodeHintType.CHARACTER_SET, \"UTF-8\");\r\n\t}\r\n\r\n\t/**\r\n\t * 获取默认解析QR参数\r\n\t * \r\n\t * @return\r\n\t */\r\n\tpublic static Map<DecodeHintType, Object> getDefaultDecodeHints() {\r\n\t\treturn DECODE_HINTS;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取自定义解析QR参数\r\n\t * \r\n\t * @param characterSet\r\n\t *            编码方式\r\n\t * @return\r\n\t */\r\n\tpublic static Map<DecodeHintType, Object> getCustomDecodeHints(String characterSet) {\r\n\t\tMap<DecodeHintType, Object> decodeHints = new EnumMap<DecodeHintType, Object>(DecodeHintType.class);\r\n\t\tList<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();\r\n\t\tformats.add(BarcodeFormat.QR_CODE);\r\n\t\t// 设置解码格式\r\n\t\tdecodeHints.put(DecodeHintType.POSSIBLE_FORMATS, formats);\r\n\t\t// 设置编码方式\r\n\t\tif (TextUtils.isEmpty(characterSet)) {\r\n\t\t\tcharacterSet = \"UTF-8\";\r\n\t\t}\r\n\t\tdecodeHints.put(DecodeHintType.CHARACTER_SET, characterSet);\r\n\t\treturn decodeHints;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取默认生成QR参数\r\n\t * \r\n\t * @return\r\n\t */\r\n\tpublic static Map<EncodeHintType, Object> getDefaultEncodeHints() {\r\n\t\treturn ENCODE_HINTS;\r\n\t}\r\n\r\n\t/**\r\n\t * 获取自定义生成QR参数\r\n\t * \r\n\t * @param level\r\n\t *            容错率 L,M,Q,H\r\n\t * @param version\r\n\t *            版本号 1-40\r\n\t * @param characterSet\r\n\t *            编码方式\r\n\t * @return\r\n\t */\r\n\tpublic static Map<EncodeHintType, Object> getCustomEncodeHints(ErrorCorrectionLevel level, Integer version,\r\n\t\t\tString characterSet) {\r\n\t\tMap<EncodeHintType, Object> encodeHints = new EnumMap<>(EncodeHintType.class);\r\n\t\t// 设置容错率\r\n\t\tif (level != null) {\r\n\t\t\tencodeHints.put(EncodeHintType.ERROR_CORRECTION, level);\r\n\t\t}\r\n\t\t// 设置版本号\r\n\t\tif (version >= 1 && version <= 40) {\r\n\t\t\tencodeHints.put(EncodeHintType.QR_VERSION, version);\r\n\t\t}\r\n\t\t// 设置编码方式\r\n\t\tif (!TextUtils.isEmpty(characterSet)) {\r\n//\t\t\tcharacterSet = \"UTF-8\";\r\n\t\t\tencodeHints.put(EncodeHintType.CHARACTER_SET, characterSet);\r\n\t\t}\r\n\t\treturn encodeHints;\r\n\t}\r\n\r\n}\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/30/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/29",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/29/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/29/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/29/events",
        "html_url": "https://github.com/itlgl/note/issues/29",
        "id": 378133508,
        "node_id": "MDU6SXNzdWUzNzgxMzM1MDg=",
        "number": 29,
        "title": "将github的demo项目合并到demos项目中去",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-11-07T03:58:03Z",
        "updated_at": "2018-11-07T03:58:03Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "我在github上放了很多demo项目，多了感觉很乱，想将所有项目归并到一个项目demos下，同时保留原有项目的操作历史。\r\n比如我想将`git@github.com:itlgl/demo_bluetoothpan.git`项目归并到`demos`下，操作步骤：\r\n```cmd\r\ngit remote add -f demo_bluetoothpan git@github.com:itlgl/demo_bluetoothpan.git\r\ngit merge demo_bluetoothpan/master --allow-unrelated-histories\r\n```\r\n1. 在demos目录下，使用指令1将demo_bluetoothpan添加为remote server，并fetch下来。\r\n2. 但是这时项目并没有直接显示在demos文件夹下，需要使用指令2将历史记录合并到demos中，此时demo_bluetoothpan项目的文件直接显示在了demos目录下\r\n3. 为了方便查看，在demos下新建目录demo_bluetoothpan，并将项目文件移动到demo_bluetoothpan目录下\r\n4. 提交更改到github即可\r\n\r\n附操作log：\r\n```console\r\nligl01@LIGL01 MINGW64 /d/github/demos (master)\r\n$ git remote add -f demo_bluetoothpan git@github.com:itlgl/demo_bluetoothpan.git\r\nUpdating demo_bluetoothpan\r\nwarning: no common commits\r\nremote: Enumerating objects: 87, done.\r\nremote: Counting objects: 100% (87/87), done.\r\nremote: Compressing objects: 100% (66/66), done.\r\nremote: Total 87 (delta 2), reused 87 (delta 2), pack-reused 0\r\nUnpacking objects: 100% (87/87), done.\r\nFrom github.com:itlgl/demo_bluetoothpan\r\n * [new branch]      master     -> demo_bluetoothpan/master\r\n\r\nligl01@LIGL01 MINGW64 /d/github/demos (master)\r\n$ git remote\r\nTestSendApduToSIMByTelephonyManager\r\ndemo_ble_peripheral\r\ndemo_bluetoothpan\r\norigin\r\n\r\nligl01@LIGL01 MINGW64 /d/github/demos (master)\r\n$ git merge demo_bluetoothpan/master --allow-unrelated-histories\r\nMerge made by the 'recursive' strategy.\r\n .gitignore                                         |   8 +\r\n app/.gitignore                                     |   1 +\r\n app/build.gradle                                   |  31 +++\r\n app/proguard-rules.pro                             |  21 ++\r\n .../demo/bluetoothpan/ExampleInstrumentedTest.java |  26 ++\r\n app/src/main/AndroidManifest.xml                   |  28 +++\r\n .../com/itlgl/demo/bluetoothpan/BTPanUtils.java    | 148 ++++++++++++\r\n .../itlgl/demo/bluetoothpan/BluetoothPanUtils.java |  38 +++\r\n .../com/itlgl/demo/bluetoothpan/ILogCallback.java  |   5 +\r\n .../demo/bluetoothpan/IOpenBTPanListener.java      |   7 +\r\n .../com/itlgl/demo/bluetoothpan/MainActivity.java  | 261 +++++++++++++++++++++\r\n .../demo/bluetoothpan/task/BlueAcceptTask.java     |  84 +++++++\r\n .../demo/bluetoothpan/task/BlueConnectTask.java    |  50 ++++\r\n .../demo/bluetoothpan/task/BlueReceiveTask.java    |  31 +++\r\n .../demo/bluetoothpan/util/BluetoothConnector.java | 199 ++++++++++++++++\r\n .../res/drawable-v24/ic_launcher_foreground.xml    |  34 +++\r\n .../main/res/drawable/ic_launcher_background.xml   | 170 ++++++++++++++\r\n app/src/main/res/drawable/test_boder_shape.xml     |  17 ++\r\n app/src/main/res/layout/activity_main.xml          | 122 ++++++++++\r\n app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml |   5 +\r\n .../res/mipmap-anydpi-v26/ic_launcher_round.xml    |   5 +\r\n app/src/main/res/mipmap-hdpi/ic_launcher.png       | Bin 0 -> 2963 bytes\r\n app/src/main/res/mipmap-hdpi/ic_launcher_round.png | Bin 0 -> 4905 bytes\r\n app/src/main/res/mipmap-mdpi/ic_launcher.png       | Bin 0 -> 2060 bytes\r\n app/src/main/res/mipmap-mdpi/ic_launcher_round.png | Bin 0 -> 2783 bytes\r\n app/src/main/res/mipmap-xhdpi/ic_launcher.png      | Bin 0 -> 4490 bytes\r\n .../main/res/mipmap-xhdpi/ic_launcher_round.png    | Bin 0 -> 6895 bytes\r\n app/src/main/res/mipmap-xxhdpi/ic_launcher.png     | Bin 0 -> 6387 bytes\r\n .../main/res/mipmap-xxhdpi/ic_launcher_round.png   | Bin 0 -> 10413 bytes\r\n app/src/main/res/mipmap-xxxhdpi/ic_launcher.png    | Bin 0 -> 9128 bytes\r\n .../main/res/mipmap-xxxhdpi/ic_launcher_round.png  | Bin 0 -> 15132 bytes\r\n app/src/main/res/values/colors.xml                 |   6 +\r\n app/src/main/res/values/strings.xml                |   3 +\r\n app/src/main/res/values/styles.xml                 |  17 ++\r\n .../itlgl/demo/bluetoothpan/ExampleUnitTest.java   |  17 ++\r\n build.gradle                                       |  27 +++\r\n gradle.properties                                  |  15 ++\r\n gradle/wrapper/gradle-wrapper.jar                  | Bin 0 -> 54329 bytes\r\n gradle/wrapper/gradle-wrapper.properties           |   5 +\r\n gradlew                                            | 172 ++++++++++++++\r\n gradlew.bat                                        |  84 +++++++\r\n readme.md                                          |  19 ++\r\n screenshot/1.png                                   | Bin 0 -> 61396 bytes\r\n screenshot/2.png                                   | Bin 0 -> 55870 bytes\r\n settings.gradle                                    |   1 +\r\n 45 files changed, 1657 insertions(+)\r\n create mode 100644 .gitignore\r\n create mode 100644 app/.gitignore\r\n create mode 100644 app/build.gradle\r\n create mode 100644 app/proguard-rules.pro\r\n create mode 100644 app/src/androidTest/java/com/itlgl/demo/bluetoothpan/ExampleInstrumentedTest.java\r\n create mode 100644 app/src/main/AndroidManifest.xml\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/BTPanUtils.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/BluetoothPanUtils.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/ILogCallback.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/IOpenBTPanListener.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/MainActivity.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/task/BlueAcceptTask.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/task/BlueConnectTask.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/task/BlueReceiveTask.java\r\n create mode 100644 app/src/main/java/com/itlgl/demo/bluetoothpan/util/BluetoothConnector.java\r\n create mode 100644 app/src/main/res/drawable-v24/ic_launcher_foreground.xml\r\n create mode 100644 app/src/main/res/drawable/ic_launcher_background.xml\r\n create mode 100644 app/src/main/res/drawable/test_boder_shape.xml\r\n create mode 100644 app/src/main/res/layout/activity_main.xml\r\n create mode 100644 app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml\r\n create mode 100644 app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml\r\n create mode 100644 app/src/main/res/mipmap-hdpi/ic_launcher.png\r\n create mode 100644 app/src/main/res/mipmap-hdpi/ic_launcher_round.png\r\n create mode 100644 app/src/main/res/mipmap-mdpi/ic_launcher.png\r\n create mode 100644 app/src/main/res/mipmap-mdpi/ic_launcher_round.png\r\n create mode 100644 app/src/main/res/mipmap-xhdpi/ic_launcher.png\r\n create mode 100644 app/src/main/res/mipmap-xhdpi/ic_launcher_round.png\r\n create mode 100644 app/src/main/res/mipmap-xxhdpi/ic_launcher.png\r\n create mode 100644 app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png\r\n create mode 100644 app/src/main/res/mipmap-xxxhdpi/ic_launcher.png\r\n create mode 100644 app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png\r\n create mode 100644 app/src/main/res/values/colors.xml\r\n create mode 100644 app/src/main/res/values/strings.xml\r\n create mode 100644 app/src/main/res/values/styles.xml\r\n create mode 100644 app/src/test/java/com/itlgl/demo/bluetoothpan/ExampleUnitTest.java\r\n create mode 100644 build.gradle\r\n create mode 100644 gradle.properties\r\n create mode 100644 gradle/wrapper/gradle-wrapper.jar\r\n create mode 100644 gradle/wrapper/gradle-wrapper.properties\r\n create mode 100644 gradlew\r\n create mode 100644 gradlew.bat\r\n create mode 100644 readme.md\r\n create mode 100644 screenshot/1.png\r\n create mode 100644 screenshot/2.png\r\n create mode 100644 settings.gradle\r\n\r\n新建文件夹、移动项目文件、提交操作在GUI中完成的，没有log\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/29/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/28",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/28/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/28/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/28/events",
        "html_url": "https://github.com/itlgl/note/issues/28",
        "id": 375884055,
        "node_id": "MDU6SXNzdWUzNzU4ODQwNTU=",
        "number": 28,
        "title": "Windows Git自定义ssh key的路径",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-10-31T10:02:49Z",
        "updated_at": "2018-10-31T10:02:49Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "1. 在当前用户目录下的`.ssh`文件夹下创建`config`文件，可以直接新建文件的方式创建，也可以在git bash环境下输入`touch config`指令创建\r\n\r\n2. 编辑`config`文件如下：\r\n```txt\r\n# github\r\nHost github.com\r\nHostName github.com\r\nPreferredAuthentications publickey\r\nIdentityFile /d/github/github_ssh_key/itlgl_github\r\nUser itlgl\r\n```\r\n\r\n注意：因为git bash是mingw64 linux环境，其他盘符要写成`/d/`的形式\r\n再使用指令`ssh -T git@github.com`测试，可以连接成功了\r\n\r\n有网页说明可以将host字段写成`github.com-itlgl`的形式，指明秘钥只给用户itlgl使用，但是测试没通过",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/28/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/27",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/27/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/27/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/27/events",
        "html_url": "https://github.com/itlgl/note/issues/27",
        "id": 375329385,
        "node_id": "MDU6SXNzdWUzNzUzMjkzODU=",
        "number": 27,
        "title": "蓝牙ble从设备的例子",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-10-30T05:41:22Z",
        "updated_at": "2018-10-30T05:41:22Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "[https://github.com/WebBluetoothCG/ble-test-peripheral-android\r\n](https://github.com/WebBluetoothCG/ble-test-peripheral-android)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/27/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/26",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/26/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/26/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/26/events",
        "html_url": "https://github.com/itlgl/note/issues/26",
        "id": 368993914,
        "node_id": "MDU6SXNzdWUzNjg5OTM5MTQ=",
        "number": 26,
        "title": "[FIXME]RecyclerView使用时常出现的异常",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726982,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODI=",
                "url": "https://api.github.com/repos/itlgl/note/labels/help%20wanted",
                "name": "help wanted",
                "color": "008672",
                "default": true,
                "description": "Extra attention is needed"
            },
            {
                "id": 834726985,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/question",
                "name": "question",
                "color": "d876e3",
                "default": true,
                "description": "Further information is requested"
            },
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-10-11T07:48:49Z",
        "updated_at": "2018-10-11T07:50:36Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 异常一\r\n\r\n### 参考网页\r\n - [https://www.jianshu.com/p/353d401fbd99](https://www.jianshu.com/p/353d401fbd99)\r\n\r\n### 异常堆栈信息\r\n```\r\n06-27 16:49:50.463 E/AndroidRuntime(20889): FATAL EXCEPTION: main \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): Process: a, PID: 20889 \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): java.lang.IllegalStateException: Cannot call this method while RecyclerView is computing a layout or scrolling \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.assertNotInLayoutOrScroll(RecyclerView.java:2349) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView$RecyclerViewDataObserver.onChanged(RecyclerView.java:4551) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView$AdapterDataObservable.notifyChanged(RecyclerView.java:10366) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView$Adapter.notifyDataSetChanged(RecyclerView.java:6044) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at a.gui.adapters.TrackAdapters.QueueTrackAdapter$TrackViewHolder.onItemClear(QueueTrackAdapter.java:522) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at a.gui.adapters.swipedrag.SimpleItemTouchHelperCallback.clearView(SimpleItemTouchHelperCallback.java:124) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.helper.ItemTouchHelper.onChildViewDetachedFromWindow(ItemTouchHelper.java:876) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.dispatchChildDetached(RecyclerView.java:6234) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.access$1200(RecyclerView.java:151) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView$5.removeViewAt(RecyclerView.java:651) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.ChildHelper.removeViewAt(ChildHelper.java:168) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView$LayoutManager.removeViewAt(RecyclerView.java:7092) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView$LayoutManager.scrapOrRecycleView(RecyclerView.java:7638) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView$LayoutManager.detachAndScrapAttachedViews(RecyclerView.java:7624) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.LinearLayoutManager.onLayoutChildren(LinearLayoutManager.java:546) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at a.gui.activities.QueueActivity$WrapContentLinearLayoutManager.onLayoutChildren(QueueActivity.java:359) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.dispatchLayoutStep2(RecyclerView.java:3260) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.dispatchLayout(RecyclerView.java:3069) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.consumePendingUpdateOperations(RecyclerView.java:1478) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.scrollByInternal(RecyclerView.java:1542) \r\n06-27 16:49:50.463 E/AndroidRuntime(20889): at android.support.v7.widget.RecyclerView.onTouchEvent(RecyclerView.java:2649) \r\n...... \r\n...... \r\n06-27 16:49:50.464 E/AndroidRuntime(20889): at android.os.Handler.handleCallback(Handler.java:836) \r\n06-27 16:49:50.464 E/AndroidRuntime(20889): at android.os.Handler.dispatchMessage(Handler.java:103) \r\n06-27 16:49:50.464 E/AndroidRuntime(20889): at android.os.Looper.loop(Looper.java:203) \r\n06-27 16:49:50.464 E/AndroidRuntime(20889): at android.app.ActivityThread.main(ActivityThread.java:6347) \r\n06-27 16:49:50.464 E/AndroidRuntime(20889): at java.lang.reflect.Method.invoke(Native Method) \r\n06-27 16:49:50.464 E/AndroidRuntime(20889): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1063) \r\n06-27 16:49:50.464 E/AndroidRuntime(20889): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:924)\r\n```\r\n\r\n### 如何复现\r\n左滑或右滑删除Item的时候，调用了notifyDataSetChanged来刷新数据源。\r\n\r\n### 如何解决\r\n简书的[文章](https://www.jianshu.com/p/353d401fbd99)中将`notifyDataSetChanged();`方法的调用放到Handler中，问题得到解决。\r\n\r\n### 问题(FIXME)\r\n**为什么在ListView中不会出现这个问题？**\r\n**RecyclerView抛出这个异常是为了避免什么？**\r\n\r\n# 异常二\r\n### 参考网页\r\n - [RecyclerView内部BUG: java.lang.IndexOutOfBoundsException: Inconsistency detected. Invalid item position](https://www.jianshu.com/p/a15764f6d673)\r\n - [RecyclerView系列（4）—XRexyclerView的坑，java.lang.IndexOutOfBoundsException: Inconsistency detected](https://blog.csdn.net/user11223344abc/article/details/77148166)\r\n\r\n### 异常堆栈信息\r\n```\r\njava.lang.IndexOutOfBoundsException: Inconsistency detected. Invalid item position 6(offset:6).\r\n        at android.support.v7.widget.RecyclerView$Recycler.getViewForPosition(RecyclerView.java:3300)\r\n        at android.support.v7.widget.RecyclerView$Recycler.getViewForPosition(RecyclerView.java:3258)\r\n        at android.support.v7.widget.LinearLayoutManager$LayoutState.next(LinearLayoutManager.java:1803)\r\n        at android.support.v7.widget.LinearLayoutManager.layoutChunk(LinearLayoutManager.java:1302)\r\n        at android.support.v7.widget.LinearLayoutManager.fill(LinearLayoutManager.java:1265)\r\n        at android.support.v7.widget.LinearLayoutManager.scrollBy(LinearLayoutManager.java:1093)\r\n        at android.support.v7.widget.LinearLayoutManager.scrollVerticallyBy(LinearLayoutManager.java:956)\r\n        at android.support.v7.widget.RecyclerView$ViewFlinger.run(RecyclerView.java:2715)\r\n        at android.view.Choreographer$CallbackRecord.run(Choreographer.java:725)\r\n        at android.view.Choreographer.doCallbacks(Choreographer.java:555)\r\n        at android.view.Choreographer.doFrame(Choreographer.java:524)\r\n        at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:711)\r\n        at android.os.Handler.handleCallback(Handler.java:615)\r\n        at android.os.Handler.dispatchMessage(Handler.java:92)\r\n        at android.os.Looper.loop(Looper.java:137)\r\n        at android.app.ActivityThread.main(ActivityThread.java:4921)\r\n        at java.lang.reflect.Method.invokeNative(Native Method)\r\n        at java.lang.reflect.Method.invoke(Method.java:511)\r\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1027)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:794)\r\n        at dalvik.system.NativeStart.main(Native Method)\r\n```\r\n\r\n### 如何复现\r\n我看两篇文章也没有太搞清楚异常是为什么报出来的，大概就是添加或者删除item的时候导致的不一致，致使内部报错。\r\n\r\n### 如何解决\r\n复写一个WrapLayoutManager捕获异常\r\n```\r\npublic class WrapContentLinearLayoutManager extends LinearLayoutManager {\r\n    public WrapContentLinearLayoutManager(Context context) {\r\n        super(context);\r\n    }\r\n\r\n    public WrapContentLinearLayoutManager(Context context, int orientation, boolean reverseLayout) {\r\n        super(context, orientation, reverseLayout);\r\n    }\r\n\r\n    public WrapContentLinearLayoutManager(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\r\n        super(context, attrs, defStyleAttr, defStyleRes);\r\n    }\r\n\r\n    @Override\r\n    public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {\r\n        try {\r\n            super.onLayoutChildren(recycler, state);\r\n        } catch (IndexOutOfBoundsException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n```\r\n调用\r\n```\r\nmRecyclerView.setLayoutManager(new WrapContentLinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));\r\n```\r\n\r\n### 问题(FIXME)\r\n - 为什么ListView没有出现这个问题？\r\n - 我自己的项目中，adapter和外部操作的是同一个ArrayList，还是会报错，为什么RecyclerView会这样处理，出现明显的错误，难道有其他的调用方式？\r\n - 我甚至在一个网页上看到有人说RecyclerView每隔1s更新一下任务太繁重了？手机的处理应该是毫秒级的，何来繁重？",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/26/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/25",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/25/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/25/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/25/events",
        "html_url": "https://github.com/itlgl/note/issues/25",
        "id": 355394144,
        "node_id": "MDU6SXNzdWUzNTUzOTQxNDQ=",
        "number": 25,
        "title": "在以太坊测试链Ropsten上发空气币合约",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 1041169574,
                "node_id": "MDU6TGFiZWwxMDQxMTY5NTc0",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E4%BB%A5%E5%A4%AA%E5%9D%8A",
                "name": "以太坊",
                "color": "d4c5f9",
                "default": false,
                "description": "ethereum"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-08-30T01:54:47Z",
        "updated_at": "2018-08-31T05:29:04Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 参考文章\r\n - [零门槛，包教会。让你在5分钟内使用以太坊ERC20智能合约发行属于自己的空气币](https://www.cnblogs.com/GoodHelper/p/9164894.html)\r\n\r\n参考文章从头到尾即可发布空气币合约，比如参照发布的[GuanliangCoin](https://ropsten.etherscan.io/address/0xe8926f60e941bfa22a6aa7c374567a49db943c8b)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/25/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/24",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/24/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/24/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/24/events",
        "html_url": "https://github.com/itlgl/note/issues/24",
        "id": 349398732,
        "node_id": "MDU6SXNzdWUzNDkzOTg3MzI=",
        "number": 24,
        "title": "keytool和openssl生成tomcat可用的https证书笔记",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-08-10T07:01:05Z",
        "updated_at": "2018-08-10T07:01:05Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# keytool方式\r\n参考文章：\r\n- [JDK 中的证书生成和管理工具 keytool](http://www.cnblogs.com/youxia/p/java002.html)\r\n- [JDK自带工具keytool生成ssl证书](https://www.cnblogs.com/zhangzb/p/5200418.html)\r\n\r\n## 生成过程示例（不能给tomcat使用）\r\n1. 生成ca keystore\r\n```console\r\nkeytool -genkeypair -alias hbcxca -keyalg RSA -keysize 2048 -keystore C:\\Users\\ligl01\\Desktop\\ssl\\hbcxca.jks -dname \"CN=hbcxca, OU=hbcxca, O=hbcx, L=bj, ST=bj, C=CN\" -validity 3650 -keypass 123456 -storepass 123456\r\n```\r\n2. 导出ca crt证书\r\n```console\r\nkeytool -export -file C:\\Users\\ligl01\\Desktop\\ssl\\hbcxca.crt -alias hbcxca -keystore C:\\Users\\ligl01\\Desktop\\ssl\\hbcxca.jks -storepass 123456\r\n```\r\n3. 生成server keystore\r\n```console\r\nkeytool -genkeypair -alias hblpa -keyalg RSA -keysize 2048  -keystore C:\\Users\\ligl01\\Desktop\\ssl\\server.jks -dname \"CN=hblpa, OU=hbcx, O=hbcx, L=bj, ST=bj, C=CN\" -validity 3650 -keypass 123456 -storepass 123456\r\n4. 生成server证书签名请求文件csr\r\n```console\r\nkeytool -certreq -alias hblpa -file C:\\Users\\ligl01\\Desktop\\ssl\\server.csr -keystore C:\\Users\\ligl01\\Desktop\\ssl\\server.jks -keypass 123456 -storepass 123456\r\n```\r\n5. 使用ca签名csr文件\r\n```console\r\nkeytool -gencert -alias hbcxca -keystore C:\\Users\\ligl01\\Desktop\\ssl\\hbcxca.jks -infile C:\\Users\\ligl01\\Desktop\\ssl\\server.csr -outfile C:\\Users\\ligl01\\Desktop\\ssl\\server.cer -validity 3650 -storepass 123456\r\n```\r\n6. 生成的文件目录如下：\r\n```console\r\nhbcxca.crt // ca根证证书\r\nhbcxca.jks // ca密钥对\r\nserver.cer // ca对server签名的证书\r\nserver.csr // server的请求签名文件\r\nserver.jks // server的密钥对\r\n```\r\n\r\n## keytoo的缺陷\r\nkeytool不能将上面流程中的`server.cer`和`server.jks`文件合成一个p12格式的文件提供给tomcat使用，需要借助openssl实现。所以上面的流程执行完成之后，并不能直接给tomcat使用。\r\n如果想通过keytool的方式签证，需要用取巧的方式：就是server对server自己签证，这样直接将server.jks放到tomcat中，将server.jks导出的公钥证书作为ca根证使用，变通的实现功能。可以参照参考文章2中的做法，单向认证、双向认证都可以实现。\r\n\r\n# openssl实现过程\r\n参考文章：\r\n- [Ubuntu安装OpenSSL](https://www.linuxidc.com/Linux/2015-10/124001.htm)\r\n\r\n## 生成过程\r\n根据参考文章中的过程即可生成CA的密钥对ca.key、CA的证书ca.crt、server的密钥对server.key、server的签名证书server.crt、server的p12格式证书server.p12。\r\n可以看到，openssl比keytool支持的功能要多一点。",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/24/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/23",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/23/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/23/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/23/events",
        "html_url": "https://github.com/itlgl/note/issues/23",
        "id": 340067685,
        "node_id": "MDU6SXNzdWUzNDAwNjc2ODU=",
        "number": 23,
        "title": "以太坊的iban格式地址生成",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 1041169574,
                "node_id": "MDU6TGFiZWwxMDQxMTY5NTc0",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E4%BB%A5%E5%A4%AA%E5%9D%8A",
                "name": "以太坊",
                "color": "d4c5f9",
                "default": false,
                "description": "ethereum"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-07-11T02:19:07Z",
        "updated_at": "2018-08-31T05:29:28Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 简介\r\nimToken钱包转账的二维码扫描后信息为iban开头的一段字符串：\r\n`iban:XE86G29C8IV34UOJMYWHGDSGME33YKEC3QO?account=100&type=ETH`\r\n这种格式是`ICAP: 互换客户端地址协议`定义的，有关ICAP协议的简介如下：\r\n\r\n> Interexchange Client Address Protocol, an IBAN-compatible system for referencing and transacting to client accounts aimed to streamline the process of transferring funds, worry-free between exchanges and, ultimately, making KYC and AML concerns a thing of the past.\r\n> ICAP 互换客户端地址协议，一种IBAN兼容系统，用于引用和处理客户帐户，旨在简化资金转移流程，在交易所之间无忧无虑，并最终使KYC和AML成为过去。\r\n\r\n以太坊有关ICAP的wiki：[ICAP: Inter exchange Client Address Protocol](https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol)\r\n# 生成过程\r\n比如在以太坊的wiki中，提到了一个例子：地址`0x00c5496aee77c1ba1f0854206a26dda82a81d6d8`对应的ICAP格式地址为`XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS`。\r\n(ps：wiki中的例子本来是错误的，我给修改了，但是也没看到审核的过程，直接修改成功了)\r\n\r\n## 步骤1：将地址转为36进制编码\r\n将地址`0x00c5496aee77c1ba1f0854206a26dda82a81d6d8`看做是16进制编码的一个大数，把这个大数按照36进制编码输出并前补0到30个字符。\r\n示例代码：\r\n```java\r\nBigInteger value = new BigInteger(address, 16);\r\nStringBuilder bban = new StringBuilder(value.toString(36).toUpperCase());\r\nwhile (bban.length() < 15 * 2) {\r\n    bban.insert(0, '0');\r\n}\r\n```\r\n输出的字符串为：`38O073KYGTWWZN0F2WZ0R8PX5ZPPZS`\r\n\r\n其实这也可以理解为base36编码的过程，编码对应的字符串范围为`0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ`。\r\n\r\n## 步骤2：计算校验位\r\n1、 将36进制编码的字符串`38O073KYGTWWZN0F2WZ0R8PX5ZPPZS`前面补上`XE00`（数字0不是字母O），其中00的位置就是需要填写校验位的位置。\r\n2、 将补上的`XE00`放到编码字符串的末尾（为啥不直接补在末尾？），此时字符串为`38O073KYGTWWZN0F2WZ0R8PX5ZPPZSXE00`\r\n3、 对上面的字符串，取出每一位，按照`0=0,1=1, ... 9=9,A=10,B=11 ... Z=35`的规则，将单个字符转换以后的结果拼接成一个新的字符串：\r\n```txt\r\n3 8 O  0 7 3 K  Y  G  T  W  W  Z  N  0 F  2 W  Z  0 R  8 P  X  5 Z  P  P  Z  S  X  E  0 0\r\n3 8 24 0 7 3 20 34 16 29 32 32 35 23 0 15 2 32 35 0 27 8 25 33 5 35 25 25 35 28 33 14 0 0\r\n```\r\n结果字符串为：`38240732034162932323523015232350278253353525253528331400`\r\n4、 将上面的字符串看做是一个10进制的大数，除以97取余：\r\n`38240732034162932323523015232350278253353525253528331400 % 97=25`\r\n取余结果为25\r\n5、 校验位=(97 + 1) - 25=73\r\n6、 将73转为2位的字符串替换开头的校验位位置，ICAP结果就是：`XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS`\r\n\r\n# java代码实现\r\n代码实现参见：[IBAN.java](https://github.com/ibook/ethereum/blob/e5b82c371e0e6f5720c36ee682e8e0e09cfc3ca0/src/main/java/cn/netkiller/wallet/ethereum/IBAN.java)\r\n\r\n## 代码优化\r\n代码中取余的操作是不断截取字符串换成int值取余做的，换成java的BigInteger类进行取余操作效率会更高\r\n这个类代码也不多，把**修改后**的代码复制到这里保存：\r\n```java\r\nimport java.math.BigInteger;\r\n\r\npublic class IBAN {\r\n\r\n    public static class Iban {\r\n        private String address;\r\n        private String token;\r\n        private String amount;\r\n\r\n        public Iban(String address, String token, String amount) {\r\n            this.address = address;\r\n            this.token = token;\r\n            this.amount = amount;\r\n        }\r\n\r\n        public String getAmount() {\r\n            return amount;\r\n        }\r\n\r\n        public String getAddress() {\r\n            return address;\r\n        }\r\n\r\n        public String getToken() {\r\n            return token;\r\n        }\r\n\r\n        public void setAmount(String amount) {\r\n            this.amount = amount;\r\n        }\r\n\r\n        public void setAddress(String address) {\r\n            this.address = address;\r\n        }\r\n\r\n        public void setToken(String token) {\r\n            this.token = token;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"Iban [address=\" + address + \", token=\" + token + \", amount=\" + amount + \"]\";\r\n        }\r\n    }\r\n\r\n    private static boolean validateIBAN(String iban) {\r\n        int len = iban.length();\r\n        if (len < 4 || !iban.matches(\"[0-9A-Z]+\"))\r\n            return false;\r\n\r\n        iban = iban.substring(4) + iban.substring(0, 4);\r\n\r\n        StringBuilder sb = new StringBuilder();\r\n        for (int i = 0; i < len; i++)\r\n            sb.append(Character.digit(iban.charAt(i), 36));\r\n\r\n        BigInteger bigInt = new BigInteger(sb.toString());\r\n\r\n        return bigInt.mod(BigInteger.valueOf(97)).intValue() == 1;\r\n    }\r\n\r\n    public IBAN() {\r\n        // TODO Auto-generated constructor stub\r\n    }\r\n\r\n    public Iban decode(String result) {\r\n        int ibanEndpoint = result.indexOf(\"?\");\r\n        String iban = result.substring(5, ibanEndpoint < 0 ? result.length() : ibanEndpoint);\r\n        String address = this.toAddress(iban);\r\n        String query = result.substring(ibanEndpoint + 1, result.length());\r\n        String[] params = query.split(\"&\");\r\n        String token = null;\r\n        String amount = null;\r\n        for (String param : params) {\r\n            if (param.startsWith(\"token=\")) {\r\n                token = param.substring(6);\r\n                continue;\r\n            }\r\n            if (param.startsWith(\"amount=\")) {\r\n                amount = param.substring(7);\r\n            }\r\n        }\r\n        return new Iban(address, token, amount);\r\n    }\r\n\r\n    public String encode(String address, String token, String amount) throws Exception {\r\n        return String.format(\"iban:%s?token=%s&amount=%s\", this.toIban(address), token, amount);\r\n    }\r\n\r\n    private String toAddress(String iban) {\r\n        String base36 = iban.substring(4);\r\n        StringBuilder base16 = new StringBuilder(new BigInteger(base36, 36).toString(16));\r\n        while (base16.length() < 20) {\r\n            base16.insert(0, \"0\");\r\n        }\r\n        return \"0x\" + base16.toString().toLowerCase();\r\n    }\r\n\r\n    public String toIban(String address) throws Exception {\r\n        if(address.length() != 42) {\r\n            throw new Exception(\"The length of address is 42.\");\r\n        }\r\n        address = address.toLowerCase().substring(2);\r\n        BigInteger value = new BigInteger(address, 16);\r\n        StringBuilder bban = new StringBuilder(value.toString(36).toUpperCase());\r\n        while (bban.length() < 15 * 2) {\r\n            bban.insert(0, '0');\r\n        }\r\n        String iban = \"XE00\" + bban;\r\n\r\n        iban = iban.substring(4) + iban.substring(0, 4);\r\n        StringBuilder code = new StringBuilder();\r\n        for (int i = 0; i < iban.length(); i++) {\r\n            char chr = iban.charAt(i);\r\n            if (chr >= 'A' && chr <= 'Z') {\r\n                int temp = chr - 'A' + 10;\r\n                code.append(String.valueOf(temp));\r\n            } else {\r\n                code.append(String.valueOf((chr - '0')));\r\n            }\r\n        }\r\n\r\n//        String remainder = code.toString();\r\n//        String block;\r\n//        while (remainder.length() > 2) {\r\n//            int endPoint = remainder.length() >= 9 ? 9 : remainder.length();\r\n//            block = remainder.substring(0, endPoint);\r\n//            remainder = parseInt(block, 10) % 97 + remainder.substring(block.length());\r\n//        }\r\n//\r\n//        int checkNum = parseInt(remainder, 10) % 97;\r\n//        String checkDigit = (\"0\" + (98 - checkNum));\r\n//        checkDigit = checkDigit.substring(checkDigit.length() - 2);\r\n\r\n        // 把上面代码换成大数的取余操作\r\n        BigInteger biTem = new BigInteger(code.toString(), 10);\r\n        BigInteger biRemainder = biTem.remainder(BigInteger.valueOf(97));\r\n        String checkDigit = BigInteger.valueOf(97 + 1).subtract(biRemainder).toString(10);\r\n        checkDigit = \"0\" + checkDigit;\r\n        checkDigit = checkDigit.substring(checkDigit.length() - 2);\r\n\r\n        String ibanAddress = \"XE\" + checkDigit + bban;\r\n        if (validateIBAN(ibanAddress)) {\r\n            return ibanAddress;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        IBAN iban = new IBAN();\r\n        // TODO Auto-generated method stub\r\n        String address = iban.toAddress(\"XE039RBH0XKV9FZMTH2701Q37FLX10NTWXU\");\r\n        System.out.println(\"IBAN to Address: \" + address);\r\n\r\n        String ibanAddress = iban.toIban(\"0x00c5496aee77c1ba1f0854206a26dda82a81d6d8\");\r\n        System.out.println(\"Address to IBAN: \" + ibanAddress);\r\n        String ibanAddress2 = iban.toIban(\"0xc94770007dda54cF92009BFF0dE90c06F603a09f\");\r\n        System.out.println(\"Address to IBAN: \" + ibanAddress2);\r\n\r\n        Iban ibanObj = iban.decode(\"iban:XE039RBH0XKV9FZMTH2701Q37FLX10NTWXU?token=ETH&amount=5\");\r\n        System.out.println(\"IBAN decode: \" + ibanObj.toString());\r\n\r\n        String ibanString = iban.encode(\"0x538b392D57d867A57eE8Eed05737cB08B4691302\", \"NBRC\", \"5\");\r\n        System.out.println(\"IBAN encode: \" + ibanString);\r\n        System.out.println(\"0x538b392d57d867a57ee8eed05737cb08b4691302\".equals(\"0x538b392d57d867a57ee8eed05737cb08b4691302\"));\r\n    }\r\n}\r\n```\r\n代码执行的log：\r\n```console\r\nIBAN to Address: 0x538b392d57d867a57ee8eed05737cb08b4691302\r\nAddress to IBAN: XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\r\nAddress to IBAN: XE15NIF30EOWCXHSNK5SW4QJRGJQ7NS3AN3\r\nIBAN decode: Iban [address=0x538b392d57d867a57ee8eed05737cb08b4691302, token=ETH, amount=5]\r\nIBAN encode: iban:XE039RBH0XKV9FZMTH2701Q37FLX10NTWXU?token=NBRC&amount=5\r\ntrue\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/23/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/22",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/22/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/22/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/22/events",
        "html_url": "https://github.com/itlgl/note/issues/22",
        "id": 338151686,
        "node_id": "MDU6SXNzdWUzMzgxNTE2ODY=",
        "number": 22,
        "title": "使用Geth搭建以太坊私链环境并和手机app联调交易",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 1041169574,
                "node_id": "MDU6TGFiZWwxMDQxMTY5NTc0",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E4%BB%A5%E5%A4%AA%E5%9D%8A",
                "name": "以太坊",
                "color": "d4c5f9",
                "default": false,
                "description": "ethereum"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-07-04T06:58:02Z",
        "updated_at": "2018-08-31T05:29:48Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 参考资料\r\n\r\n- [Geth搭建以太坊私链环境](https://blog.csdn.net/koastal/article/details/78737543)\r\n- [通过Geth搭建多节点私有链](https://zhuanlan.zhihu.com/p/34442586)\r\n\r\n# 搭建私链\r\n## 编写创世文件\r\n在要存放私链数据的目录(比如`E:\\ligl\\ethereum\\geth\\privateChain`)下新建`genesis.json`创世文件\r\n```json\r\n{\r\n  \"config\": {\r\n        \"chainId\": 14,\r\n        \"homesteadBlock\": 0,\r\n        \"eip155Block\": 0,\r\n        \"eip158Block\": 0\r\n    },\r\n  \"alloc\"      : {},\r\n  \"coinbase\"   : \"0x0000000000000000000000000000000000000000\",\r\n  \"difficulty\" : \"0x0200\",\r\n  \"extraData\"  : \"\",\r\n  \"gasLimit\"   : \"0x2fefd8\",\r\n  \"nonce\"      : \"0x0000000000000042\",\r\n  \"mixhash\"    : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"parentHash\" : \"0x0000000000000000000000000000000000000000000000000000000000000000\",\r\n  \"timestamp\"  : \"0x00\"\r\n}\r\n```\r\n\r\n## 初始化\r\n使用指令`geth --datadir E:\\ligl\\ethereum\\geth\\privateChain init genesis.json`可以初始化私链环境，目录下会生成`geth`和`keystore`两个文件夹，其中`keystore`文件夹里面存放的是地址以及加密的私钥组成的keystore文件。\r\n为了方便反复测试，可以在当前目录新建一个**init.bat**批处理文件如下：\r\n```bat\r\nrd/s/q geth\r\n::不删除keystore文件夹，否则密钥需要重新导入\r\n::rd/s/q keystore \r\ngeth --datadir E:\\ligl\\ethereum\\geth\\privateChain init genesis.json\r\n```\r\n以后只要双击就可以初始化私链环境。\r\n\r\n## 启动\r\n在当前目录下新建**run.bat**批处理文件如下：\r\n```bat\r\ngeth --networkid 14 --nodiscover --datadir \"E:\\ligl\\ethereum\\geth\\privateChain\" --rpc --rpcapi \"net,eth,web3,personal\" --rpcaddr \"10.0.0.154\" --rpcport \"8545\" --rpccorsdomain \"*\" console\r\n```\r\n双击运行`run.bat`文件即可启动私链。\r\n**注意：为了外边可以访问到，rpc服务的ip地址需要设置成本机的ip地址，这样手机端app才能通过ip地址访问到rpc服务。**\r\n\r\n# 联调测试交易\r\n## 手机端APP如何访问到服务端\r\n为了方便，可以将服务端搭建在笔记本电脑上，然后让笔记本电脑开启wifi热点，手机连上热点即可访问服务端的JSON-RPC接口。\r\n[如何在win7的笔记本电脑上开启wifi热点](https://github.com/itlgl/note/issues/21)\r\n\r\n访问服务端需要使用到JSON-RPC接口，这里使用web3j库来实现：\r\n```gradle\r\nimplementation 'org.web3j:core:3.3.1-android'\r\n```\r\n## 生成两个ECC的密钥对并导入到私链中\r\n因为Geth服务貌似不支持私钥导出，所以换一种方法，先在外边生成私钥，然后导入到私链中。\r\n使用web3j在手机端来生成私钥代码：\r\n```java\r\n// log test\r\nlogBuffer.setLength(0);\r\ntry {\r\n    ECKeyPair ecKeyPair1 = Keys.createEcKeyPair();\r\n    ECKeyPair ecKeyPair2 = Keys.createEcKeyPair();\r\n    String address1 = Keys.getAddress(ecKeyPair1);\r\n    String address2 = Keys.getAddress(ecKeyPair2);\r\n    logBuffer.append(\"address1=\").append(address1);\r\n    logBuffer.append(\"\\n(1) pri=\").append(ecKeyPair1.getPrivateKey().toString(16));\r\n    logBuffer.append(\"\\n(1) pub=\").append(ecKeyPair1.getPublicKey().toString(16));\r\n    logBuffer.append(\"\\naddress2=\").append(address2);\r\n    logBuffer.append(\"\\n(2) pri=\").append(ecKeyPair2.getPrivateKey().toString(16));\r\n    logBuffer.append(\"\\n(2) pub=\").append(ecKeyPair2.getPublicKey().toString(16));\r\n} catch (Exception e) {\r\n    e.printStackTrace();\r\n    logBuffer.append(\"生成地址error:\").append(e);\r\n}\r\nLog.i(\"test\", logBuffer.toString());\r\nshowDialogMsg(logBuffer.toString());\r\n```\r\n运行的log如下：\r\n```console\r\naddress1=5378ad743b9263587eb117b0c4658cf03c906baa\r\n(1) pri=d36d0bb6c8f2ec5e3ea59b0b8a17fd78e2091c9e77d2a70267c01cf10a38fc48\r\n(1) pub=34a1d310e41a8b4de639ff48d8edea8702c654207fe93783cede051f261e42e8e33d5180bdd176b45d9dd97120b7b882bd9450322fb9b04ef31cb285a72f347c\r\n\r\n\r\naddress2=370dccebbf4d24059ae57fddbb651259a86a172a\r\n(2) pri=d90b9e5b063cd5d8e56c536c341260048f563c5e8740e071145e72e4208bf883\r\n(2) pub=ece19a85208e5198a412ab2710a992356d837726db7e06d745d31d667339e923e92409c00d17b969545a2557b8cd3869e4fa4d90c3ca23d58c693c34247a1dab\r\n```\r\n\r\n新建一个`prv1.txt`文件，将私钥的hex串复制进去保存，然后在服务端的console中使用指令：\r\n`geth --datadir E:\\ligl\\ethereum\\geth\\privateChain account import E:\\ligl\\ethereum\\geth\\privateChain\\test_key\\prv1.txt`\r\n即可导入第一个地址，同理再导入第二个地址。\r\n## 通过挖矿给第一个地址加钱\r\n在服务端使用指令`eth.coinbase`可以获取挖矿的收益地址，第一次运行会默认将上面导入的第一个地址当做挖矿收益地址。\r\n然后使用命令`miner.start(1)`启动挖矿，因为创世文件设置的难度特别低，所以很快就能挖到大量的以太币。\r\n使用命令`miner.stop()`命令停止挖矿。\r\n## 编写APP端JSON-RPC的访问代码\r\n手机端测试需要访问JSON-RPC接口，这里使用web3j库来访问。\r\n根据[myetherwallet](https://www.myetherwallet.com/)网站开源代码中的接口（[接口点这里](https://github.com/kvhnuke/etherwallet/tree/mercury/app/scripts/nodeHelpers)），模仿写一个java的接口:\r\n\r\nEtherNode.java\r\n```java\r\nimport java.math.BigInteger;\r\n\r\nimport rx.Observable;\r\n\r\n/**\r\n * 根据myetherwallet.com定义的api接口定义\r\n * 用来实现以太坊的交易以及合同的发布时的网络接口\r\n */\r\npublic interface EtherNode {\r\n    /**\r\n     * 获取ChainId，用于EIP155签名时用\r\n     * @return chainId\r\n     */\r\n    int getChainId();\r\n    /**\r\n     * // Request\r\n     * curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":83}'\r\n     *\r\n     * // Result\r\n     * {\r\n     * \"id\":83,\r\n     * \"jsonrpc\": \"2.0\",\r\n     * \"result\": \"0x4b7\" // 1207\r\n     * }\r\n     *\r\n     * Returns the number of most recent block.\r\n     * @return QUANTITY - integer of the current block number the client is on.\r\n     */\r\n    Observable<BigInteger> getCurrentBlock();\r\n\r\n    /**\r\n     * // Request\r\n     * curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\", \"latest\"],\"id\":1}'\r\n     *\r\n     * // Result\r\n     * {\r\n     * \"id\":1,\r\n     * \"jsonrpc\": \"2.0\",\r\n     * \"result\": \"0x0234c8a3397aab58\" // 158972490234375000\r\n     * }\r\n     *\r\n     * Returns the balance of the account of given address.\r\n     * @param address  20 Bytes - address to check for balance.\r\n     * @return latest balance\r\n     */\r\n    Observable<BigInteger> getBalance(String address);\r\n\r\n    /**\r\n     * // Request\r\n     * curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionByHash\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"],\"id\":1}'\r\n     *\r\n     * // Result\r\n     * {\r\n     * \"id\":1,\r\n     * \"jsonrpc\":\"2.0\",\r\n     * \"result\": {\r\n     * \"hash\":\"0xc6ef2fc5426d6ad6fd9e2a26abeab0aa2411b7ab17f30a99d3cb96aed1d1055b\",\r\n     * \"nonce\":\"0x\",\r\n     * \"blockHash\": \"0xbeab0aa2411b7ab17f30a99d3cb9c6ef2fc5426d6ad6fd9e2a26a6aed1d1055b\",\r\n     * \"blockNumber\": \"0x15df\", // 5599\r\n     * \"transactionIndex\":  \"0x1\", // 1\r\n     * \"from\":\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\r\n     * \"to\":\"0x85h43d8a49eeb85d32cf465507dd71d507100c1\",\r\n     * \"value\":\"0x7f110\", // 520464\r\n     * \"gas\": \"0x7f110\", // 520464\r\n     * \"gasPrice\":\"0x09184e72a000\",\r\n     * \"input\":\"0x603880600c6000396000f300603880600c6000396000f3603880600c6000396000f360\",\r\n     * }\r\n     * }\r\n     *\r\n     * Returns the information about a transaction requested by transaction hash.\r\n     *\r\n     * @param transactionHash 32 Bytes - hash of a transaction\r\n     * @return\r\n     */\r\n    Observable<org.web3j.protocol.core.methods.response.Transaction> getTransaction(String transactionHash);\r\n\r\n    class TransactionData {\r\n        private String address;\r\n        private BigInteger balance;\r\n        private BigInteger gasPrice;\r\n        private BigInteger nonce;\r\n\r\n        public TransactionData() {}\r\n\r\n        public TransactionData(String address, BigInteger balance, BigInteger gasPrice, BigInteger nonce) {\r\n            this.address = address;\r\n            this.balance = balance;\r\n            this.gasPrice = gasPrice;\r\n            this.nonce = nonce;\r\n        }\r\n\r\n        public String getAddress() {\r\n            return address;\r\n        }\r\n\r\n        public BigInteger getBalance() {\r\n            return balance;\r\n        }\r\n\r\n        public BigInteger getGasPrice() {\r\n            return gasPrice;\r\n        }\r\n\r\n        public BigInteger getNonce() {\r\n            return nonce;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"TransactionData{\" +\r\n                    \"address='\" + address + '\\'' +\r\n                    \", balance=\" + balance +\r\n                    \", gasPrice=\" + gasPrice +\r\n                    \", nonce=\" + nonce +\r\n                    '}';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据MyEtherWallet网站的接口定义，返回一个地址的余额、gasPrice、nonce，看用法应该是用来生成新的交易的时候用的\r\n     * 可以分别调用eth_getBalance获取余额，调用eth_gasPrice获取gasPrice，调用eth_getTransactionCount获取nonce\r\n     *\r\n     * @param address 20 Bytes - address to check for balance.\r\n     * @return\r\n     */\r\n    Observable<TransactionData> getTransactionData(String address);\r\n\r\n    /**\r\n     * // Request\r\n     * curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendRawTransaction\",\"params\":[{see above}],\"id\":1}'\r\n     *\r\n     * // Result\r\n     * {\r\n     * \"id\":1,\r\n     * \"jsonrpc\": \"2.0\",\r\n     * \"result\": \"0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331\"\r\n     * }\r\n     *\r\n     * Creates new message call transaction or a contract creation for signed transactions.\r\n     * @param signedTransactionData\r\n     * @return 交易的hash值\r\n     */\r\n    Observable<String> sendRawTransaction(String signedTransactionData);\r\n\r\n    /**\r\n     * // Request\r\n     * curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_estimateGas\",\"params\":[{see above}],\"id\":1}'\r\n     *\r\n     * // Result\r\n     * {\r\n     * \"id\":1,\r\n     * \"jsonrpc\": \"2.0\",\r\n     * \"result\": \"0x5208\" // 21000\r\n     * }\r\n     *\r\n     * Generates and returns an estimate of how much gas is necessary to allow the transaction to complete.\r\n     * The transaction will not be added to the blockchain.\r\n     * Note that the estimate may be significantly more than the amount of gas actually used by the transaction,\r\n     * for a variety of reasons including EVM mechanics and node performance.\r\n     *\r\n     * @param transaction\r\n     * @return the amount of gas used.\r\n     */\r\n    Observable<BigInteger> getEstimatedGas(org.web3j.protocol.core.methods.request.Transaction transaction);\r\n\r\n    /**\r\n     *\r\n     * // Request\r\n     * curl -X POST --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{see above}],\"id\":1}'\r\n     *\r\n     * // Result\r\n     * {\r\n     * \"id\":1,\r\n     * \"jsonrpc\": \"2.0\",\r\n     * \"result\": \"0x\"\r\n     * }\r\n     *\r\n     * Executes a new message call immediately without creating a transaction on the block chain.\r\n     * param use 'pending'\r\n     * see <a href='https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_call'>https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_call</a>\r\n     * @param transaction The transaction call object\r\n     * @return the return value of executed contract.\r\n     */\r\n    Observable<String> getEthCall(org.web3j.protocol.core.methods.request.Transaction transaction);\r\n}\r\n```\r\n\r\n然后写一个实现CustomNodeImpl.java：\r\n```java\r\nimport android.util.Log;\r\n\r\nimport com.hengbao.hdwallet.network.ether.EtherNode;\r\n\r\nimport org.web3j.protocol.Web3j;\r\nimport org.web3j.protocol.Web3jFactory;\r\nimport org.web3j.protocol.core.DefaultBlockParameterName;\r\nimport org.web3j.protocol.core.methods.response.EthBlock;\r\nimport org.web3j.protocol.core.methods.response.EthCall;\r\nimport org.web3j.protocol.core.methods.response.EthEstimateGas;\r\nimport org.web3j.protocol.core.methods.response.EthGasPrice;\r\nimport org.web3j.protocol.core.methods.response.EthGetBalance;\r\nimport org.web3j.protocol.core.methods.response.EthGetTransactionCount;\r\nimport org.web3j.protocol.core.methods.response.EthSendTransaction;\r\nimport org.web3j.protocol.core.methods.response.EthTransaction;\r\nimport org.web3j.protocol.core.methods.response.Transaction;\r\nimport org.web3j.protocol.http.HttpService;\r\n\r\nimport java.math.BigInteger;\r\n\r\nimport okhttp3.OkHttpClient;\r\nimport okhttp3.logging.HttpLoggingInterceptor;\r\nimport rx.Observable;\r\nimport rx.exceptions.Exceptions;\r\nimport rx.functions.Func1;\r\nimport rx.functions.Func3;\r\n\r\n/**\r\n * 符合web3j的JSON-RPC接口的节点实现\r\n */\r\npublic class CustomNodeImpl implements EtherNode {\r\n    /**\r\n     * chainId,see {@link org.web3j.tx.ChainId}\r\n     */\r\n    private int chainId;\r\n    /**\r\n     * 服务器的url，ex：http://localhost:8545/\r\n     */\r\n    private String url;\r\n    private Web3j web3j;\r\n\r\n    /**\r\n     * 构造\r\n     * @param url 服务器的url，ex：http://localhost:8545/\r\n     * @param chainId chainId,see {@link org.web3j.tx.ChainId}\r\n     */\r\n    public CustomNodeImpl(String url, int chainId) {\r\n        this.url = url;\r\n        this.chainId = chainId;\r\n\r\n        OkHttpClient.Builder builder = new OkHttpClient.Builder();\r\n        HttpLoggingInterceptor logging = new HttpLoggingInterceptor(\r\n                new HttpLoggingInterceptor.Logger() {\r\n                    @Override\r\n                    public void log(String msg) {\r\n                        Log.i(\"http\", msg);\r\n                    }\r\n                });\r\n        logging.setLevel(HttpLoggingInterceptor.Level.BODY);\r\n        builder.addInterceptor(logging);\r\n\r\n        this.web3j = Web3jFactory.build(new HttpService(url, builder.build(), true));\r\n    }\r\n\r\n    @Override\r\n    public Observable<BigInteger> getCurrentBlock() {\r\n        return web3j.ethGetBlockByNumber(DefaultBlockParameterName.LATEST, true)\r\n                .observable()\r\n                .map(new Func1<EthBlock, BigInteger>() {\r\n                    @Override\r\n                    public BigInteger call(EthBlock ethBlock) {\r\n                        if(ethBlock.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethBlock.getError()));\r\n                        } else {\r\n                            return ethBlock.getBlock().getNumber();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public Observable<BigInteger> getBalance(String address) {\r\n        return web3j.ethGetBalance(address, DefaultBlockParameterName.LATEST)\r\n                .observable()\r\n                .map(new Func1<EthGetBalance, BigInteger>() {\r\n                    @Override\r\n                    public BigInteger call(EthGetBalance ethGetBalance) {\r\n                        if(ethGetBalance.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethGetBalance.getError()));\r\n                        } else {\r\n                            return ethGetBalance.getBalance();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public Observable<Transaction> getTransaction(String transactionHash) {\r\n        return web3j.ethGetTransactionByHash(transactionHash)\r\n                .observable()\r\n                .map(new Func1<EthTransaction, Transaction>() {\r\n                    @Override\r\n                    public Transaction call(EthTransaction ethTransaction) {\r\n                        if(ethTransaction.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethTransaction.getError()));\r\n                        } else {\r\n                            return ethTransaction.getTransaction();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public Observable<TransactionData> getTransactionData(final String address) {\r\n        Observable<BigInteger> balanceObservable = web3j.ethGetBalance(address, DefaultBlockParameterName.PENDING)\r\n                .observable()\r\n                .map(new Func1<EthGetBalance, BigInteger>() {\r\n                    @Override\r\n                    public BigInteger call(EthGetBalance ethGetBalance) {\r\n                        if(ethGetBalance.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethGetBalance.getError()));\r\n                        } else {\r\n                            return ethGetBalance.getBalance();\r\n                        }\r\n                    }\r\n                });\r\n        Observable<BigInteger> gasPriceObservable = web3j.ethGasPrice()\r\n                .observable()\r\n                .map(new Func1<EthGasPrice, BigInteger>() {\r\n                    @Override\r\n                    public BigInteger call(EthGasPrice ethGasPrice) {\r\n                        if(ethGasPrice.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethGasPrice.getError()));\r\n                        } else {\r\n                            return ethGasPrice.getGasPrice();\r\n                        }\r\n                    }\r\n                });\r\n        Observable<BigInteger> nonceObservable = web3j.ethGetTransactionCount(address, DefaultBlockParameterName.PENDING)\r\n                .observable()\r\n                .map(new Func1<EthGetTransactionCount, BigInteger>() {\r\n                    @Override\r\n                    public BigInteger call(EthGetTransactionCount ethGetTransactionCount) {\r\n                        if(ethGetTransactionCount.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethGetTransactionCount.getError()));\r\n                        } else {\r\n                            return ethGetTransactionCount.getTransactionCount();\r\n                        }\r\n                    }\r\n                });\r\n        return Observable.zip(balanceObservable, gasPriceObservable, nonceObservable,\r\n                new Func3<BigInteger, BigInteger, BigInteger, TransactionData>() {\r\n                    @Override\r\n                    public TransactionData call(BigInteger balance, BigInteger gasPrice, BigInteger nonce) {\r\n                        return new TransactionData(address, balance, gasPrice, nonce);\r\n                    }\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public Observable<String> sendRawTransaction(String signedTransactionData) {\r\n        return web3j.ethSendRawTransaction(signedTransactionData)\r\n                .observable()\r\n                .map(new Func1<EthSendTransaction, String>() {\r\n                    @Override\r\n                    public String call(EthSendTransaction ethSendTransaction) {\r\n                        if(ethSendTransaction.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethSendTransaction.getError()));\r\n                        } else {\r\n                            return ethSendTransaction.getTransactionHash();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public Observable<BigInteger> getEstimatedGas(org.web3j.protocol.core.methods.request.Transaction transaction) {\r\n        return web3j.ethEstimateGas(transaction)\r\n                .observable()\r\n                .map(new Func1<EthEstimateGas, BigInteger>() {\r\n                    @Override\r\n                    public BigInteger call(EthEstimateGas ethEstimateGas) {\r\n                        if(ethEstimateGas.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethEstimateGas.getError()));\r\n                        } else {\r\n                            return ethEstimateGas.getAmountUsed();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public Observable<String> getEthCall(org.web3j.protocol.core.methods.request.Transaction transaction) {\r\n        return web3j.ethCall(transaction, DefaultBlockParameterName.PENDING)\r\n                .observable()\r\n                .map(new Func1<EthCall, String>() {\r\n                    @Override\r\n                    public String call(EthCall ethCall) {\r\n                        if(ethCall.hasError()) {\r\n                            throw Exceptions.propagate(JsonRpcException.crate(ethCall.getError()));\r\n                        } else {\r\n                            return ethCall.getValue();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    @Override\r\n    public int getChainId() {\r\n        return chainId;\r\n    }\r\n\r\n    public String getUrl() {\r\n        return url;\r\n    }\r\n}\r\n```\r\n\r\n## APP端查询余额\r\n查询地址1余额：\r\n```java\r\nfinal String address1 = \"0x5378ad743b9263587eb117b0c4658cf03c906baa\";\r\n...省略部分代码...\r\netherNode.getBalance(address1)\r\n        .subscribeOn(Schedulers.newThread())\r\n        .observeOn(AndroidSchedulers.mainThread())\r\n        .subscribe(new Action1<BigInteger>() {\r\n            @Override\r\n            public void call(BigInteger bigInteger) {\r\n                showDialogMsg(String.format(\"地址%s的余额为:%s(wei)\", address1, bigInteger.toString()));\r\n            }\r\n        }, new Action1<Throwable>() {\r\n            @Override\r\n            public void call(Throwable throwable) {\r\n                throwable.printStackTrace();\r\n                showDialogMsg(\"查询余额失败:\" + throwable);\r\n            }\r\n        });\r\n```\r\n\r\n查询地址2余额：\r\n```java\r\nfinal String address2 = \"0x370dccebbf4d24059ae57fddbb651259a86a172a\";\r\n...省略部分代码...\r\netherNode.getBalance(address2)\r\n        .subscribeOn(Schedulers.newThread())\r\n        .observeOn(AndroidSchedulers.mainThread())\r\n        .subscribe(new Action1<BigInteger>() {\r\n            @Override\r\n            public void call(BigInteger bigInteger) {\r\n                showDialogMsg(String.format(\"地址%s的余额为:%s(wei)\", address2, bigInteger.toString()));\r\n            }\r\n        }, new Action1<Throwable>() {\r\n            @Override\r\n            public void call(Throwable throwable) {\r\n                throwable.printStackTrace();\r\n                showDialogMsg(\"查询余额失败:\" + throwable);\r\n            }\r\n        });\r\n```\r\n\r\n运行截图：\r\n![yue1](https://user-images.githubusercontent.com/7078104/42261178-e43b5b5e-7f99-11e8-81e2-cc9338f109e8.png)\r\n\r\n## APP端转账\r\n转账代码：\r\n```java\r\n// 两个地址的测试数据\r\nfinal String address1 = \"0x5378ad743b9263587eb117b0c4658cf03c906baa\";\r\nfinal ECKeyPair ecKeyPair1 = new ECKeyPair(\r\n        new BigInteger(\"d36d0bb6c8f2ec5e3ea59b0b8a17fd78e2091c9e77d2a70267c01cf10a38fc48\", 16),\r\n        new BigInteger(\"34a1d310e41a8b4de639ff48d8edea8702c654207fe93783cede051f261e42e8e33d5180bdd176b45d9dd97120b7b882bd9450322fb9b04ef31cb285a72f347c\", 16));\r\n\r\nfinal String address2 = \"0x370dccebbf4d24059ae57fddbb651259a86a172a\";\r\nfinal ECKeyPair ecKeyPair2 = new ECKeyPair(\r\n        new BigInteger(\"d90b9e5b063cd5d8e56c536c341260048f563c5e8740e071145e72e4208bf883\", 16),\r\n        new BigInteger(\"ece19a85208e5198a412ab2710a992356d837726db7e06d745d31d667339e923e92409c00d17b969545a2557b8cd3869e4fa4d90c3ca23d58c693c34247a1dab\", 16));\r\n\r\n...省略部分代码...\r\n\r\n// 清空log buffer\r\nlogBuffer.setLength(0);\r\n\r\nfinal BigInteger amount = new BigInteger(\"9000\");\r\nObservable<BigInteger> currBlockObs = etherNode.getCurrentBlock();\r\norg.web3j.protocol.core.methods.request.Transaction estimatedGasTran =\r\n        new org.web3j.protocol.core.methods.request.Transaction(\r\n                address1,\r\n                null, // nonce\r\n                new BigInteger(\"051da038cc\", 16), // gasPrice\r\n                new BigInteger(\"ffffff\", 16), // gasLimit\r\n                address2, // to\r\n                amount, // value\r\n                null);\r\nObservable<BigInteger> estimatedGasObs = etherNode.getEstimatedGas(estimatedGasTran);\r\nObservable<EtherNode.TransactionData> transactionDataObs = etherNode.getTransactionData(address1);\r\n\r\nObservable.zip(currBlockObs, estimatedGasObs, transactionDataObs, new Func3<BigInteger ,BigInteger, EtherNode.TransactionData, RawTransaction>() {\r\n    @Override\r\n    public RawTransaction call(BigInteger currBlock, BigInteger gas_limit, EtherNode.TransactionData transactionData) {\r\n        // test log\r\n        logBuffer.append(\"\\n获取到的currBlock=\").append(currBlock);\r\n        logBuffer.append(\"\\n获取到的gas_limit=\").append(gas_limit);\r\n        logBuffer.append(\"\\n获取到的transactionData=\").append(transactionData);\r\n\r\n        // test log\r\n        logBuffer.append(\"\\n组交易之前：\\nnonce=\").append(transactionData.getNonce().toString(16))\r\n                .append(\"\\ngasPrice=\").append(transactionData.getGasPrice().toString(16))\r\n                .append(\"\\ngasLimit=\").append(gas_limit.toString(16))\r\n                .append(\"\\ntoAddress=\").append(address2)\r\n                .append(\"\\namount=\").append(amount.toString(16))\r\n                .append(\"\\ndata=null\");\r\n\r\n        // 需要为每个交易\r\n\r\n        RawTransaction tx = RawTransaction.createTransaction(\r\n                transactionData.getNonce(),\r\n                transactionData.getGasPrice(),\r\n                gas_limit,\r\n                address2,\r\n                amount,\r\n                \"\"\r\n        );\r\n        return tx;\r\n    }\r\n}).map(new Func1<RawTransaction, String>() {\r\n    @Override\r\n    public String call(RawTransaction rawTransaction) {\r\n        // TODO 直接使用EIP155的规范进行签名，会不会出现问题?\r\n        Credentials keys = Credentials.create(ecKeyPair1);\r\n        byte[] signed = TransactionEncoder.signMessage(rawTransaction, (byte) etherNode.getChainId(), keys);\r\n        String signTx = ByteUtils.toHexString(signed);\r\n        logBuffer.append(\"\\n签名以后的数据为：\").append(signTx);\r\n        return signTx;\r\n    }\r\n}).flatMap(new Func1<String, Observable<String>>() {\r\n    @Override\r\n    public Observable<String> call(String tx) {\r\n        logBuffer.append(\"\\n调用发布交易接口...\");\r\n        if(tx != null && !tx.startsWith(\"0x\") && !tx.startsWith(\"0X\")) {\r\n            tx = \"0x\" + tx;\r\n        }\r\n        return etherNode.sendRawTransaction(tx);\r\n    }\r\n}).subscribeOn(Schedulers.newThread())\r\n.observeOn(AndroidSchedulers.mainThread())\r\n.subscribe(new Action1<String>() {\r\n    @Override\r\n    public void call(String s) {\r\n        logBuffer.append(\"\\n交易发布成功,hash为：\").append(s);\r\n\r\n        showDialogMsg(logBuffer.toString());\r\n        Log.i(\"test\", logBuffer.toString());\r\n    }\r\n}, new Action1<Throwable>() {\r\n    @Override\r\n    public void call(Throwable throwable) {\r\n        throwable.printStackTrace();\r\n        logBuffer.append(\"\\n交易发布失败,throwable=\").append(throwable);\r\n        showDialogMsg(logBuffer.toString());\r\n        Log.i(\"test\", logBuffer.toString());\r\n    }\r\n});\r\n```\r\n\r\n**注意：为了转账的交易得到确认，需要开启挖矿，让交易被确认，这样地址二查询余额才能看到变化。**\r\n\r\n转账代码中，logBuffer部分的log：\r\n```console\r\n获取到的gas_limit=21000\r\n获取到的transactionData=TransactionData{address='0x5378ad743b9263587eb117b0c4658cf03c906baa', balance=59999999999999991000, gasPrice=18000000000, nonce=1}\r\n组交易之前：\r\nnonce=1\r\ngasPrice=430e23400\r\ngasLimit=5208\r\ntoAddress=0x370dccebbf4d24059ae57fddbb651259a86a172a\r\namount=2328\r\ndata=null\r\n签名以后的数据为：f86601850430e2340082520894370dccebbf4d24059ae57fddbb651259a86a172a8223288040a003877e44f1d4777d668f37a0332159c40b7ad1b7fb67a782371286f4de973fb7a065d480bb839347a1ffcb7eef61f41e9c78cf0c37102a892d7d7c2485ac9ac23b\r\n调用发布交易接口...\r\n交易发布成功,hash为：0x47bd8331440bb31d8a6d5e27a7cf2a0a357f10ed911959549ccc0d3ef69d8a9b\r\n```\r\n\r\nOKHttp访问JSON-RPC接口的log：\r\n```console\r\n07-04 11:45:23.861 20334-20564/com.hengbao.hdwallet I/http: --> POST http://10.0.0.154:8545/ http/1.1\r\n07-04 11:45:23.871 20334-20564/com.hengbao.hdwallet I/http: Content-Type: application/json; charset=utf-8\r\n    Content-Length: 225\r\n    {\"jsonrpc\":\"2.0\",\"method\":\"eth_estimateGas\",\"params\":[{\"from\":\"0x5378ad743b9263587eb117b0c4658cf03c906baa\",\"gas\":\"0xffffff\",\"gasPrice\":\"0x51da038cc\",\"to\":\"0x370dccebbf4d24059ae57fddbb651259a86a172a\",\"value\":\"0x2328\"}],\"id\":0}\r\n    --> END POST (225-byte body)\r\n07-04 11:45:23.891 20334-20564/com.hengbao.hdwallet I/http: <-- 200 OK http://10.0.0.154:8545/ (26ms)\r\n    Content-Type: application/json\r\n    Vary: Origin\r\n    Date: Wed, 04 Jul 2018 03:47:05 GMT\r\n    Content-Length: 43\r\n    {\"jsonrpc\":\"2.0\",\"id\":0,\"result\":\"0x5208\"}\r\n    <-- END HTTP (43-byte body)\r\n07-04 11:45:23.921 20334-20564/com.hengbao.hdwallet I/http: --> POST http://10.0.0.154:8545/ http/1.1\r\n    Content-Type: application/json; charset=utf-8\r\n    Content-Length: 116\r\n    {\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0x5378ad743b9263587eb117b0c4658cf03c906baa\",\"pending\"],\"id\":1}\r\n    --> END POST (116-byte body)\r\n07-04 11:45:23.931 20334-20564/com.hengbao.hdwallet I/http: <-- 200 OK http://10.0.0.154:8545/ (10ms)\r\n    Content-Type: application/json\r\n    Vary: Origin\r\n    Date: Wed, 04 Jul 2018 03:47:05 GMT\r\n    Content-Length: 56\r\n    {\"jsonrpc\":\"2.0\",\"id\":1,\"result\":\"0x340aad21b3b6fdcd8\"}\r\n    <-- END HTTP (56-byte body)\r\n07-04 11:45:23.941 20334-20564/com.hengbao.hdwallet I/http: --> POST http://10.0.0.154:8545/ http/1.1\r\n    Content-Type: application/json; charset=utf-8\r\n    Content-Length: 60\r\n    {\"jsonrpc\":\"2.0\",\"method\":\"eth_gasPrice\",\"params\":[],\"id\":2}\r\n    --> END POST (60-byte body)\r\n07-04 11:45:23.951 20334-20564/com.hengbao.hdwallet I/http: <-- 200 OK http://10.0.0.154:8545/ (9ms)\r\n    Content-Type: application/json\r\n    Vary: Origin\r\n    Date: Wed, 04 Jul 2018 03:47:05 GMT\r\n    Content-Length: 48\r\n    {\"jsonrpc\":\"2.0\",\"id\":2,\"result\":\"0x430e23400\"}\r\n    <-- END HTTP (48-byte body)\r\n    --> POST http://10.0.0.154:8545/ http/1.1\r\n    Content-Type: application/json; charset=utf-8\r\n    Content-Length: 125\r\n07-04 11:45:23.961 20334-20564/com.hengbao.hdwallet I/http: {\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionCount\",\"params\":[\"0x5378ad743b9263587eb117b0c4658cf03c906baa\",\"pending\"],\"id\":3}\r\n    --> END POST (125-byte body)\r\n07-04 11:45:23.981 20334-20564/com.hengbao.hdwallet I/http: <-- 200 OK http://10.0.0.154:8545/ (23ms)\r\n    Content-Type: application/json\r\n    Vary: Origin\r\n    Date: Wed, 04 Jul 2018 03:47:05 GMT\r\n    Content-Length: 40\r\n    {\"jsonrpc\":\"2.0\",\"id\":3,\"result\":\"0x1\"}\r\n    <-- END HTTP (40-byte body)\r\n07-04 11:45:24.101 20334-20564/com.hengbao.hdwallet I/http: --> POST http://10.0.0.154:8545/ http/1.1\r\n    Content-Type: application/json; charset=utf-8\r\n    Content-Length: 282\r\n    {\"jsonrpc\":\"2.0\",\"method\":\"eth_sendRawTransaction\",\"params\":[\"0xf86601850430e2340082520894370dccebbf4d24059ae57fddbb651259a86a172a8223288040a003877e44f1d4777d668f37a0332159c40b7ad1b7fb67a782371286f4de973fb7a065d480bb839347a1ffcb7eef61f41e9c78cf0c37102a892d7d7c2485ac9ac23b\"],\"id\":4}\r\n    --> END POST (282-byte body)\r\n07-04 11:45:24.141 20334-20564/com.hengbao.hdwallet I/http: <-- 200 OK http://10.0.0.154:8545/ (34ms)\r\n    Content-Type: application/json\r\n    Vary: Origin\r\n    Date: Wed, 04 Jul 2018 03:47:05 GMT\r\n    Content-Length: 103\r\n    {\"jsonrpc\":\"2.0\",\"id\":4,\"result\":\"0x47bd8331440bb31d8a6d5e27a7cf2a0a357f10ed911959549ccc0d3ef69d8a9b\"}\r\n    <-- END HTTP (103-byte body)\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/22/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/21",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/21/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/21/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/21/events",
        "html_url": "https://github.com/itlgl/note/issues/21",
        "id": 338137974,
        "node_id": "MDU6SXNzdWUzMzgxMzc5NzQ=",
        "number": 21,
        "title": "如何在win7的笔记本电脑上开启wifi热点",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-07-04T05:50:15Z",
        "updated_at": "2018-07-04T05:55:26Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "1. 使用`管理员`打开cmd窗口，敲命令：\r\n**`netsh wlan set hostednetwork mode=allow ssid=TestEthWifi key=12345678`**\r\n启用虚拟WiFi网卡\r\n\r\n2. 打开网络和共享中心，点击左侧更改适配器设置。进入适配器设置就会发现多出了一个网卡为`Microsoft Virtual WiFi Miniport Adapter`的`无线网络连接2`。若没有，则尝试更新无线网卡驱动。\r\n为方便起见，可将无线网络连接2重命名为虚拟WiFi。\r\n![Microsoft Virtual WiFi Miniport Adapter](https://user-images.githubusercontent.com/7078104/42258741-d949ac50-7f8f-11e8-8987-8a61e0dffad0.png)\r\n\r\n3. 在网络连接里， 右键单击已连接到Internet的网络连接，选择`属性`→`共享`，勾上`允许其他网络用户通过此计算机的Internet连接来连接(N)`并选择`虚拟WiFi`。\r\n确定之后，提供共享的网卡图标旁会出现`共享的`字样，表示`宽带连接`已共享至`虚拟WiFi`。\r\n![2](https://user-images.githubusercontent.com/7078104/42258840-55fd64d0-7f90-11e8-86c1-08fead2f6c40.png)\r\n![3](https://user-images.githubusercontent.com/7078104/42258894-93f0bc1a-7f90-11e8-93e7-c4e2b8d49534.png)\r\n\r\n4. 然后，继续在命令提示符中输入:\r\n**`netsh wlan start hostednetwork`**\r\n启动wifi，虚拟WiFi的红叉消失，现在就可以通过手机连接wifi了，wifi名称为上面的`TestEthWifi`，密码为`12345678`。\r\n如果需要关闭wifi，则敲命令：\r\n**`netsh wlan stop hostednetwork`**\r\n\r\n5. 当电脑关机重启以后，直接进行第四步即可重新开启wifi。\r\n\r\n参考： [怎样在Win7系统建立并开启Wifi热点(百度经验)](https://jingyan.baidu.com/article/48a42057a03cf7a9242504d0.html)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/21/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/20",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/20/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/20/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/20/events",
        "html_url": "https://github.com/itlgl/note/issues/20",
        "id": 334754940,
        "node_id": "MDU6SXNzdWUzMzQ3NTQ5NDA=",
        "number": 20,
        "title": "在IDEA上科学的使用JFrameDesigner",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 1,
        "created_at": "2018-06-22T05:54:31Z",
        "updated_at": "2020-10-27T10:39:26Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "工具使用说明博客： [IDEA安装破解JFrameDesigner](http://www.cnblogs.com/dongjak/p/5203740.html)\r\n\r\n工具网盘下载地址： [JFormDesigner-6.0.2-intellij-idea破解加注册机](https://pan.baidu.com/s/1hafjAU7VCa2gDdFtCIs-Lg)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/20/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/19",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/19/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/19/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/19/events",
        "html_url": "https://github.com/itlgl/note/issues/19",
        "id": 331221378,
        "node_id": "MDU6SXNzdWUzMzEyMjEzNzg=",
        "number": 19,
        "title": "Android中的Matrix",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-06-11T14:47:54Z",
        "updated_at": "2018-06-12T06:15:06Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 写在前面\r\n看这篇笔记之前先看一下参考文章，这篇笔记没有系统的讲述矩阵和代码的东西，参考文章写的也有错误的地方，要辨证的看。\r\n\r\n1. [如何计算矩阵乘法](https://zh.wikihow.com/%E8%AE%A1%E7%AE%97%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95)\r\n2. [android matrix 最全方法详解与进阶（完整篇）](https://blog.csdn.net/cquwentao/article/details/51445269)\r\n3. [Android Matrix 最全方法详解与进阶](https://blog.csdn.net/gb702250823/article/details/53526149)\r\n4. [1-4 Canvas 对绘制的辅助 clipXXX() 和 Matrix](http://hencoder.com/ui-1-4/)\r\n\r\n# 矩阵的乘法\r\n比如有矩阵A和矩阵B，他们分别为：\r\n![v4-728px-multiply-matrices-step-2-version-3](https://user-images.githubusercontent.com/7078104/41234453-cbc856e0-6dbe-11e8-91da-6970d1063c6e.jpg)\r\n\r\n可以看到A为2行3列的矩阵，B为3行2列的矩阵，矩阵乘法符合下面的规则：\r\n1. 只有A的列数和B的行数相等，A和B才可以做乘法\r\n2. A*B的结果C是2行2列的矩阵，行数等于A的行数，列数等于B的列数\r\n3. 结果矩阵C的第一行第一列数值为A的第一行和B的第一列中的数字分别相乘后再相加。其他行列结果依次类推\r\n4. 矩阵的乘法不满足交换律，即`A*B != B*A`\r\n5. 矩阵的乘法满足结合律`M‘ = T*(M*R) = T*M*R = (T*M)*R`\r\n\r\n![c](https://user-images.githubusercontent.com/7078104/41234404-a7523a60-6dbe-11e8-91f7-0c024acaaf14.png)\r\n\r\n详细信息可以看这里：[如何计算矩阵乘法](https://zh.wikihow.com/%E8%AE%A1%E7%AE%97%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95)\r\n\r\n# Android中常用的四种矩阵变换\r\nAndroid中使用3x3的矩阵进行图形的变换，它看起来大概是下面这样:\r\n![20160518113919200](https://user-images.githubusercontent.com/7078104/41234536-1010be28-6dbf-11e8-8ba1-3f126f508228.jpg)\r\n\r\n在Android中，使用一个3x1的矩阵来表示一个点：\r\n![xy1](https://user-images.githubusercontent.com/7078104/41235006-5d3cc312-6dc0-11e8-8380-55a1eae2dc85.png)\r\n\r\n> x，y分别代表x，y轴上的坐标，而1代表屏幕在z轴上的坐标为默认的。如果将1变大，那么屏幕会拉远， 图形会变小。\r\n\r\n## 平移(Translate)\r\n![20180611214717](https://user-images.githubusercontent.com/7078104/41235278-0d06b0b4-6dc1-11e8-983a-8532f48e5cd3.png)\r\n\r\n图例:\r\n![005xtdi2jw1f6dqiw20xoj308c0dw0su](https://user-images.githubusercontent.com/7078104/41235420-5e396e5e-6dc1-11e8-918e-0e15a48981be.jpg)\r\n\r\n## 错切(Skew)\r\n### 水平错切\r\n![20180611214828](https://user-images.githubusercontent.com/7078104/41235379-45ccce60-6dc1-11e8-8201-65824fa95e79.png)\r\n\r\n图例：\r\n![005xtdi2jw1f6cniifb0sj308c0dw3yz](https://user-images.githubusercontent.com/7078104/41235456-6e02a012-6dc1-11e8-82a5-88d996886061.jpg)\r\n\r\n### 垂直错切\r\n![chuizhi](https://user-images.githubusercontent.com/7078104/41235632-b261e858-6dc1-11e8-8de6-29bc7a5ca224.png)\r\n\r\n图例：\r\n![005xtdi2jw1f6cnkwyksij308c0dwq3f](https://user-images.githubusercontent.com/7078104/41235661-caec31ee-6dc1-11e8-8233-51db58caa772.jpg)\r\n\r\n### 复合错切\r\n![fuhe](https://user-images.githubusercontent.com/7078104/41235695-dfaa7ff0-6dc1-11e8-8641-700712c91833.png)\r\n\r\n图例：\r\n![005xtdi2jw1f6cqdu6olfj308c0dwdgi](https://user-images.githubusercontent.com/7078104/41235729-f6643d44-6dc1-11e8-8d36-ac70e05cfede.jpg)\r\n\r\n## 旋转(Rotate)\r\n![xuanzhuan1](https://user-images.githubusercontent.com/7078104/41235829-3444bbf2-6dc2-11e8-9868-3c60ed539efc.png)\r\n\r\n图例：\r\n![005xtdi2jw1f6cpp174twj308c0dwt8s](https://user-images.githubusercontent.com/7078104/41235867-543700d2-6dc2-11e8-8688-57aded8db6d9.jpg)\r\n\r\n## 缩放（Scale）\r\n![suofang1](https://user-images.githubusercontent.com/7078104/41235910-7cfc691c-6dc2-11e8-83b3-982cd6dff805.png)\r\n\r\n图例：\r\n![005xtdi2jw1f6cnk02zy9j308c0dwwej](https://user-images.githubusercontent.com/7078104/41235995-957eaf0e-6dc2-11e8-9cb5-bd379ef7c9e5.jpg)\r\n\r\n## Matrix的组合\r\n应用矩阵进行图形变换的主要原因，是因为矩阵是可以通过矩阵的乘法进行组合使用的，如果想对canvas绘制的bitmap时，先平移T(dx, dy)，再旋转R(θ)，最后缩放S(k1,k2)，就可以将三个变换矩阵相乘，M‘ = A*B*C，再对canvas应用M’矩阵即可。\r\n\r\n# Matrix的坐标系\r\n矩阵的操作可以看作是以坐标原点为原点的坐标系在三维空间中做的变换，不同于canvas的屏幕坐标系坐标系，矩阵Matrix的坐标系为左手坐标系：\r\n\r\n![20160518114718678](https://user-images.githubusercontent.com/7078104/41237535-4ad89ac4-6dc6-11e8-8ef5-b3e1decec4e8.png)\r\n\r\n这个坐标系对应的每个轴的旋转方向（从原点看出去，每个轴的旋转方向都是逆时针）：\r\n\r\n![camaer](https://user-images.githubusercontent.com/7078104/41237601-88a8b5d2-6dc6-11e8-9d72-db19167f295a.png)\r\n\r\n## Matrix的操作可以看做是对上面左手坐标系的变换\r\n因为Matrix变换后是对每个canvas的点起作用，其实也可以看做对这个三维坐标系起了作用，canvas绘制的是三维坐标系上的图像对canvas二位坐标系的投影。\r\n\r\n**所以，可以用自己的左手模拟进行平移旋转等操作，更加直观的想象变换后的效果。**\r\n\r\n# Matrix的左乘和右乘\r\n在Android中，有关矩阵的操作都是成对的，比如preTranslate(float dx, float dy)和postTranslate(float dx, float dy)，通过看api的介绍，如果原矩阵为M，那么pre表示的是左乘，post表示右乘：\r\n\r\n> preTranslate  : M' = M * T(dx, dy) // 左乘\r\n> postTranslate: M' = T(dx, dy) * M // 右乘\r\n\r\n因为矩阵的变换是顺序执行的，所以在平时最常用的应该是pre左乘，所有的变换操作都依次执行，比如canvas常用的translate等变换方法其实就是左乘。右乘其实就是在所有操作之前增加一步操作，合理的运用右乘可以方便代码的编写。\r\n\r\n比如：图形变换是以左边原点为原点的，所以旋转、缩放等功能应用到canvas.drawBitmap()方法时（因为bitmap常从原点往右下方画），图像表现出来的结果就特别奇怪，需要将canvas的坐标系移动到图像的中心点再操作然后再把坐标系移回去，那么如果只用pre左乘的话，代码是这样的：\r\n```java\r\nMatrix matrix = new Matrix();\r\nmatrix.preTranslate(pivotX,pivotY);\r\n// 各种操作，旋转，缩放，错切等，可以执行多次。\r\nmatrix.preTranslate(-pivotX, -pivotY);\r\n```\r\n\r\n如果合理使用右乘，那么代码就成了：\r\n```java\r\nMatrix matrix = new Matrix();\r\n// 各种操作，旋转，缩放，错切等，可以执行多次。\r\nmatrix.postTranslate(pivotX,pivotY);\r\nmatrix.preTranslate(-pivotX, -pivotY);\r\n```\r\n减少了postTranslate和preTranslate之间的距离。\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/19/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/18",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/18/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/18/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/18/events",
        "html_url": "https://github.com/itlgl/note/issues/18",
        "id": 325944265,
        "node_id": "MDU6SXNzdWUzMjU5NDQyNjU=",
        "number": 18,
        "title": "FIDO-U2F-Ledger 注册和登录过程中chrome和后台交互log分析",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-24T02:45:20Z",
        "updated_at": "2018-05-24T02:47:22Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 注册流程\r\n## LOG\r\n```console\r\nSuccessfully registered device:\r\n\r\nNo vendor metadata present!\r\n\r\nNo device metadata present!\r\n\r\nDevice transports: USB\r\n\r\nRegistration Request javascript demo\r\n\r\nvar request = {\"appId\":\"https://localhost:8443\",\"registeredKeys\":[],\"registerRequests\":[{\"version\":\"U2F_V2\",\"challenge\":\"nHglnR_DvvW08BojQ22-Rai02rtTbNVePPwThhGprhc\",\"appId\":\"https://localhost:8443\"}]};\r\nsetTimeout(function() {\r\n    u2f.register(\r\n        request.appId,\r\n        request.registerRequests,\r\n        request.registeredKeys,\r\n        function(data) {\r\n            var form = document.getElementById('form');\r\n            var reg = document.getElementById('tokenResponse');\r\n            if(data.errorCode) {\r\n                switch (data.errorCode) {\r\n                    case 4:\r\n                        alert(\"This device is already registered.\");\r\n                        break;\r\n\r\n                    default:\r\n                        alert(\"U2F failed with error: \" + data.errorCode);\r\n                }\r\n            } else {\r\n                reg.value=JSON.stringify(data);\r\n                form.submit();\r\n            }\r\n        }\r\n    );\r\n}, 1000);\r\n    \r\nRegistration Response\r\n\r\n {\"registrationData\":\"BQQ4UIiAZhalc13Bxhwu_DofZNrLSBsncFO5WxsW2zEO_Pr4nxu8ig3B6qCQSwPH10EWikYvi5fI4i5OJos3bumFQOrI8E1g6-q6hER5EB6u8Y7vIxJtYqyfeHVEIc06z57FOZp0q4B2imcsambi6DoqGTlW9uLq0KjwT-h2pG4A1ecwggFdMIIBA6ADAgECAgEhMAoGCCqGSM49BAMCMCcxJTAjBgNVBAMMHExlZGdlciBGSURPIEF0dGVzdGF0aW9uIENBIDEwHhcNMTYwNzIxMTMzNjM3WhcNMjYwNzA5MTMzNjM3WjAwMS4wLAYDVQQDDCVMZWRnZXIgTmFuby1TIFUyRiBBdHRlc3RhdGlvbiBCYXRjaCAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEI8J_LIn2QsqirK_YkUx6ptPiwEs3El32mhaGcljsQEYwmAv4nEMs5onv7ARvWlz0YdAjNaCDhJh4YOH81wzTh6MXMBUwEwYLKwYBBAGC5RwCAQEEBAMCBSAwCgYIKoZIzj0EAwIDSAAwRQIgehonosveKXiCa-D9vUyoXj9uP3JBfFlo26lAfmDEahQCIQCPKv96_v9Vz4_O1_V5z-ych5QKpUQlYMbnnz2gGqpqQjBFAiEAkzvV7NJhADZ_ZZ9dvX-FlWGYIGuJiH9KlRYbmtTW1W0CIF9k8Znioi4ve_E56BEiYSCiY2T_-_XjwqaK7zOZadMV\",\"clientData\":\"eyJ0eXAiOiJuYXZpZ2F0b3IuaWQuZmluaXNoRW5yb2xsbWVudCIsImNoYWxsZW5nZSI6Im5IZ2xuUl9EdnZXMDhCb2pRMjItUmFpMDJydFRiTlZlUFB3VGhoR3ByaGMiLCJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdDo4NDQzIiwiY2lkX3B1YmtleSI6InVudXNlZCJ9\"} \r\nRegistration data\r\n\r\n DeviceRegistration{Key handle=6sjwTWDr6rqERHkQHq7xju8jEm1irJ94dUQhzTrPnsU5mnSrgHaKZyxqZuLoOioZOVb24urQqPBP6HakbgDV5w, Public key=BDhQiIBmFqVzXcHGHC78Oh9k2stIGydwU7lbGxbbMQ78-vifG7yKDcHqoJBLA8fXQRaKRi-Ll8jiLk4mizdu6YU, Counter=-1, Attestation certificate=  [0]         Version: 3\r\n         SerialNumber: 33\r\n             IssuerDN: CN=Ledger FIDO Attestation CA 1\r\n           Start Date: Thu Jul 21 21:36:37 GMT+08:00 2016\r\n           Final Date: Thu Jul 09 21:36:37 GMT+08:00 2026\r\n            SubjectDN: CN=Ledger Nano-S U2F Attestation Batch 1\r\n           Public Key: EC Public Key\r\n            X: 23c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec4046\r\n            Y: 30980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387\r\n\r\n  Signature Algorithm: SHA256WITHECDSA\r\n            Signature: 304502207a1a27a2cbde2978826be0fdbd4ca85e\r\n                       3f6e3f72417c5968dba9407e60c46a140221008f\r\n                       2aff7afeff55cf8fced7f579cfec9c87940aa544\r\n                       2560c6e79f3da01aaa6a42\r\n       Extensions: \r\n                       critical(false) 1.3.6.1.4.1.45724.2.1.1 value = DER Bit String[1, 5] \r\n\r\n} \r\nNavigation\r\nRegister\r\nLogin\r\n```\r\n\r\n## 注册验签流程\r\n1. Base64 URL解码注册返回值Registration Response中的registrationData，得到\r\n0504385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efcfaf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee98540eac8f04d60ebeaba844479101eaef18eef23126d62ac9f78754421cd3acf9ec5399a74ab80768a672c6a66e2e83a2a193956f6e2ead0a8f04fe876a46e00d5e73082015d30820103a003020102020121300a06082a8648ce3d04030230273125302306035504030c1c4c6564676572204649444f204174746573746174696f6e2043412031301e170d3136303732313133333633375a170d3236303730393133333633375a3030312e302c06035504030c254c6564676572204e616e6f2d5320553246204174746573746174696f6e20426174636820313059301306072a8648ce3d020106082a8648ce3d0301070342000423c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec404630980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387a31730153013060b2b0601040182e51c020101040403020520300a06082a8648ce3d040302034800304502207a1a27a2cbde2978826be0fdbd4ca85e3f6e3f72417c5968dba9407e60c46a140221008f2aff7afeff55cf8fced7f579cfec9c87940aa5442560c6e79f3da01aaa6a423045022100933bd5ecd26100367f659f5dbd7f85956198206b89887f4a95161b9ad4d6d56d02205f64f199e2a22e2f7bf139e811226120a26364fffbf5e3c2a68aef339969d315\r\n\r\n2. 解析上面的值：\r\n05 // reserved bytes\r\n04385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efcfaf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985 // user public key\r\n40 // key handle length\r\neac8f04d60ebeaba844479101eaef18eef23126d62ac9f78754421cd3acf9ec5399a74ab80768a672c6a66e2e83a2a193956f6e2ead0a8f04fe876a46e00d5e7 // key handle\r\n3082015d30820103a003020102020121300a06082a8648ce3d04030230273125302306035504030c1c4c6564676572204649444f204174746573746174696f6e2043412031301e170d3136303732313133333633375a170d3236303730393133333633375a3030312e302c06035504030c254c6564676572204e616e6f2d5320553246204174746573746174696f6e20426174636820313059301306072a8648ce3d020106082a8648ce3d0301070342000423c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec404630980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387a31730153013060b2b0601040182e51c020101040403020520300a06082a8648ce3d040302034800304502207a1a27a2cbde2978826be0fdbd4ca85e3f6e3f72417c5968dba9407e60c46a140221008f2aff7afeff55cf8fced7f579cfec9c87940aa5442560c6e79f3da01aaa6a42 // attestation certificate，ledger设备内的证书\r\n3045022100933bd5ecd26100367f659f5dbd7f85956198206b89887f4a95161b9ad4d6d56d02205f64f199e2a22e2f7bf139e811226120a26364fffbf5e3c2a68aef339969d315 // signature\r\n\r\n3. 组装要验签数据的原文：\r\n00 // RFU\r\n8D25AE631D8858FF58E46467E730B22E5BF728F96853C59383AAF3F1B5CB1B3E // application parameter\r\n \r\n// -----application parameter得到的过程---------\r\n// https://localhost:8443 (utf8 -> hex) 68747470733A2F2F6C6F63616C686F73743A38343433 (sha256) 8D25AE631D8858FF58E46467E730B22E5BF728F96853C59383AAF3F1B5CB1B3E\r\n// ---------------------------------------------\r\n\r\n754F2FD33DA3F7E0B89D8702AC28D1E89036A59818EACB005B073279260AA759 // challenge parameter\r\n\r\n// -----challenge parameter得到的过程---------\r\n// client data Base64Url解码后的字符串按照utf8编码进行sha256\r\n// client data base64Url解码结果为：\r\n// {\"typ\":\"navigator.id.finishEnrollment\",\"challenge\":\"nHglnR_DvvW08BojQ22-Rai02rtTbNVePPwThhGprhc\",\"origin\":\"https://localhost:8443\",\"cid_pubkey\":\"unused\"}\r\n// 转为utf8编码的hex为：\r\n// 7B22747970223A226E6176696761746F722E69642E66696E697368456E726F6C6C6D656E74222C226368616C6C656E6765223A226E48676C6E525F447676573038426F6A5132322D5261693032727454624E56655050775468684770726863222C226F726967696E223A2268747470733A2F2F6C6F63616C686F73743A38343433222C226369645F7075626B6579223A22756E75736564227D\r\n// sha256的结果为： 754F2FD33DA3F7E0B89D8702AC28D1E89036A59818EACB005B073279260AA759\r\n// --------------------------------------------\r\n\r\neac8f04d60ebeaba844479101eaef18eef23126d62ac9f78754421cd3acf9ec5399a74ab80768a672c6a66e2e83a2a193956f6e2ead0a8f04fe876a46e00d5e7 // key handle\r\n04385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efcfaf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985 // user public key\r\n\r\n组装后的结果：\r\n00 8D25AE631D8858FF58E46467E730B22E5BF728F96853C59383AAF3F1B5CB1B3E 754F2FD33DA3F7E0B89D8702AC28D1E89036A59818EACB005B073279260AA759 eac8f04d60ebeaba844479101eaef18eef23126d62ac9f78754421cd3acf9ec5399a74ab80768a672c6a66e2e83a2a193956f6e2ead0a8f04fe876a46e00d5e704385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efcfaf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985\r\n\r\n008d25ae631d8858ff58e46467e730b22e5bf728f96853c59383aaf3f1b5cb1b3e754f2fd33da3f7e0b89d8702ac28d1e89036a59818eacb005b073279260aa759eac8f04d60ebeaba844479101eaef18eef23126d62ac9f78754421cd3acf9ec5399a74ab80768a672c6a66e2e83a2a193956f6e2ead0a8f04fe876a46e00d5e704385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efcfaf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985\r\n\r\n结果做sha256：\r\n4006D3FD69C519BAE1EF7C6F75ECA1036E87078F3BAC2A9F162B0C392716598B\r\n\r\n4. 将signature拆分为r和s\r\n3045 0221 00933bd5ecd26100367f659f5dbd7f85956198206b89887f4a95161b9ad4d6d56d 0220 5f64f199e2a22e2f7bf139e811226120a26364fffbf5e3c2a68aef339969d315\r\n0221是长度，前面的00去掉\r\nr= 933bd5ecd26100367f659f5dbd7f85956198206b89887f4a95161b9ad4d6d56d\r\ns= 5f64f199e2a22e2f7bf139e811226120a26364fffbf5e3c2a68aef339969d315\r\n\r\n5. 使用ecc工具验签：\r\nQx= 23c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec4046 // 证书里面的公钥x\r\nQy= 30980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387 // 证书里面的公钥y\r\nHm= 4006D3FD69C519BAE1EF7C6F75ECA1036E87078F3BAC2A9F162B0C392716598B // 组装后的验签数据做sha256的结果\r\nr=  933bd5ecd26100367f659f5dbd7f85956198206b89887f4a95161b9ad4d6d56d\r\ns=  5f64f199e2a22e2f7bf139e811226120a26364fffbf5e3c2a68aef339969d315\r\n\r\n使用ECC Tool工具，曲线选择Secp256r1，进行验签，通过。\r\n\r\n## 用代码验证response结果是否正确\r\n```java\r\nfinal String response = \"{\\\"registrationData\\\":\\\"BQQ4UIiAZhalc13Bxhwu_DofZNrLSBsncFO5WxsW2zEO_Pr4nxu8ig3B6qCQSwPH10EWikYvi5fI4i5OJos3bumFQOrI8E1g6-q6hER5EB6u8Y7vIxJtYqyfeHVEIc06z57FOZp0q4B2imcsambi6DoqGTlW9uLq0KjwT-h2pG4A1ecwggFdMIIBA6ADAgECAgEhMAoGCCqGSM49BAMCMCcxJTAjBgNVBAMMHExlZGdlciBGSURPIEF0dGVzdGF0aW9uIENBIDEwHhcNMTYwNzIxMTMzNjM3WhcNMjYwNzA5MTMzNjM3WjAwMS4wLAYDVQQDDCVMZWRnZXIgTmFuby1TIFUyRiBBdHRlc3RhdGlvbiBCYXRjaCAxMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEI8J_LIn2QsqirK_YkUx6ptPiwEs3El32mhaGcljsQEYwmAv4nEMs5onv7ARvWlz0YdAjNaCDhJh4YOH81wzTh6MXMBUwEwYLKwYBBAGC5RwCAQEEBAMCBSAwCgYIKoZIzj0EAwIDSAAwRQIgehonosveKXiCa-D9vUyoXj9uP3JBfFlo26lAfmDEahQCIQCPKv96_v9Vz4_O1_V5z-ych5QKpUQlYMbnnz2gGqpqQjBFAiEAkzvV7NJhADZ_ZZ9dvX-FlWGYIGuJiH9KlRYbmtTW1W0CIF9k8Znioi4ve_E56BEiYSCiY2T_-_XjwqaK7zOZadMV\\\",\\\"clientData\\\":\\\"eyJ0eXAiOiJuYXZpZ2F0b3IuaWQuZmluaXNoRW5yb2xsbWVudCIsImNoYWxsZW5nZSI6Im5IZ2xuUl9EdnZXMDhCb2pRMjItUmFpMDJydFRiTlZlUFB3VGhoR3ByaGMiLCJvcmlnaW4iOiJodHRwczovL2xvY2FsaG9zdDo4NDQzIiwiY2lkX3B1YmtleSI6InVudXNlZCJ9\\\"}\";\r\nfinal String appId = \"https://localhost:8443\";\r\nfinal String challenge = \"nHglnR_DvvW08BojQ22-Rai02rtTbNVePPwThhGprhc\";\r\nRegisterResponse registerResponse = RegisterResponse.fromJson(response);\r\nfinal RegisterRequest registerRequest = new RegisterRequest(challenge, appId);\r\nList<RegisterRequest> registerRequestList = new ArrayList<RegisterRequest>(1) {\r\n    {\r\n        add(registerRequest);\r\n    }\r\n};\r\nRegisterRequestData registerRequestData = new RegisterRequestData(\"https://localhost:8443\", null, registerRequestList);\r\nU2F u2f = new U2F();\r\nDeviceRegistration registration = u2f.finishRegistration(registerRequestData, registerResponse);\r\nSystem.out.println(\"-------registration------\\n\" + registration);\r\n```\r\n\r\n如果代码出现错误会报异常，需要依赖`u2flib-server-core`，gradle配置为： `compile \"com.yubico:u2flib-server-core:0.19.0\"`\r\n代码输出：\r\n```console\r\n---hash---\r\nbytes=68747470733a2f2f6c6f63616c686f73743a38343433\r\n---hash---\r\nbytes=7b22747970223a226e6176696761746f722e69642e66696e697368456e726f6c6c6d656e74222c226368616c6c656e6765223a226e48676c6e525f447676573038426f6a5132322d5261693032727454624e56655050775468684770726863222c226f726967696e223a2268747470733a2f2f6c6f63616c686f73743a38343433222c226369645f7075626b6579223a22756e75736564227d\r\n---checkSignature---\r\npublicKey toString=EC Public Key\r\n            X: 23c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec4046\r\n            Y: 30980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387\r\n\r\npublicKey getFormat=X.509\r\nsignedBytes=008d25ae631d8858ff58e46467e730b22e5bf728f96853c59383aaf3f1b5cb1b3e754f2fd33da3f7e0b89d8702ac28d1e89036a59818eacb005b073279260aa759eac8f04d60ebeaba844479101eaef18eef23126d62ac9f78754421cd3acf9ec5399a74ab80768a672c6a66e2e83a2a193956f6e2ead0a8f04fe876a46e00d5e704385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efcfaf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985\r\n---hash---\r\nbytes=008d25ae631d8858ff58e46467e730b22e5bf728f96853c59383aaf3f1b5cb1b3e754f2fd33da3f7e0b89d8702ac28d1e89036a59818eacb005b073279260aa759eac8f04d60ebeaba844479101eaef18eef23126d62ac9f78754421cd3acf9ec5399a74ab80768a672c6a66e2e83a2a193956f6e2ead0a8f04fe876a46e00d5e704385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efcfaf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985\r\nsignedBytes sha256=4006d3fd69c519bae1ef7c6f75eca1036e87078f3bac2a9f162b0c392716598b\r\nsignature=3045022100933bd5ecd26100367f659f5dbd7f85956198206b89887f4a95161b9ad4d6d56d02205f64f199e2a22e2f7bf139e811226120a26364fffbf5e3c2a68aef339969d315\r\n-------registration------\r\nDeviceRegistration{Key handle=6sjwTWDr6rqERHkQHq7xju8jEm1irJ94dUQhzTrPnsU5mnSrgHaKZyxqZuLoOioZOVb24urQqPBP6HakbgDV5w, Public key=BDhQiIBmFqVzXcHGHC78Oh9k2stIGydwU7lbGxbbMQ78-vifG7yKDcHqoJBLA8fXQRaKRi-Ll8jiLk4mizdu6YU, Counter=-1, Attestation certificate=  [0]         Version: 3\r\n         SerialNumber: 33\r\n             IssuerDN: CN=Ledger FIDO Attestation CA 1\r\n           Start Date: Thu Jul 21 21:36:37 GMT+08:00 2016\r\n           Final Date: Thu Jul 09 21:36:37 GMT+08:00 2026\r\n            SubjectDN: CN=Ledger Nano-S U2F Attestation Batch 1\r\n           Public Key: EC Public Key\r\n            X: 23c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec4046\r\n            Y: 30980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387\r\n\r\n  Signature Algorithm: SHA256WITHECDSA\r\n            Signature: 304502207a1a27a2cbde2978826be0fdbd4ca85e\r\n                       3f6e3f72417c5968dba9407e60c46a140221008f\r\n                       2aff7afeff55cf8fced7f579cfec9c87940aa544\r\n                       2560c6e79f3da01aaa6a42\r\n       Extensions: \r\n                       critical(false) 1.3.6.1.4.1.45724.2.1.1 value = DER Bit String[1, 5] \r\n\r\n}\r\n```\r\n\r\n## 如何用代码解析证书内容并打印\r\n```java\r\nX509Certificate certificate = CertificateParser.parseDer(ByteUtil.fromHex(\"3082015d 30820103a003020102020121300a06082a8648ce3d04030230273125302306035504030c1c4c6564676572204649444f204174746573746174696f6e2043412031301e170d3136303732313133333633375a170d3236303730393133333633375a3030312e302c06035504030c254c6564676572204e616e6f2d5320553246204174746573746174696f6e20426174636820313059301306072a8648ce3d020106082a8648ce3d0301070342000423c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec404630980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387a31730153013060b2b0601040182e51c020101040403020520300a06082a8648ce3d040302034800304502207a1a27a2cbde2978826be0fdbd4ca85e3f6e3f72417c5968dba9407e60c46a140221008f2aff7afeff55cf8fced7f579cfec9c87940aa5442560c6e79f3da01aaa6a42\"));\r\nSystem.out.println(\"parse cer----------\\n\" + certificate + \"\\n-----------\");\r\n```\r\n\r\n需要依赖u2flib-server-core，gradle配置为： `compile \"com.yubico:u2flib-server-core:0.19.0\"`\r\n\r\n输出为：\r\n```console\r\nparse cer----------\r\n  [0]         Version: 3\r\n         SerialNumber: 33\r\n             IssuerDN: CN=Ledger FIDO Attestation CA 1\r\n           Start Date: Thu Jul 21 21:36:37 GMT+08:00 2016\r\n           Final Date: Thu Jul 09 21:36:37 GMT+08:00 2026\r\n            SubjectDN: CN=Ledger Nano-S U2F Attestation Batch 1\r\n           Public Key: EC Public Key\r\n            X: 23c27f2c89f642caa2acafd8914c7aa6d3e2c04b37125df69a16867258ec4046\r\n            Y: 30980bf89c432ce689efec046f5a5cf461d02335a08384987860e1fcd70cd387\r\n\r\n  Signature Algorithm: SHA256withECDSA\r\n            Signature: 304502207a1a27a2cbde2978826be0fdbd4ca85e\r\n                       3f6e3f72417c5968dba9407e60c46a140221008f\r\n                       2aff7afeff55cf8fced7f579cfec9c87940aa544\r\n                       2560c6e79f3da01aaa6a42\r\n       Extensions: \r\n                       critical(false) 1.3.6.1.4.1.45724.2.1.1 value = DER Bit String[1, 5] \r\n\r\n\r\n-----------\r\n```\r\n\r\n# 登录流程\r\n## LOG\r\n```console\r\nSuccessfully authenticated!\r\n\r\nSign Request javascript demo\r\n\r\nvar request = {\"appId\":\"https://localhost:8443\",\"challenge\":\"rGl4xDEPQg5lVdtktr2nOygEh0dP9I9WsdBLW1hpjzI\",\"signRequests\":[{\"version\":\"U2F_V2\",\"challenge\":\"rGl4xDEPQg5lVdtktr2nOygEh0dP9I9WsdBLW1hpjzI\",\"appId\":\"https://localhost:8443\",\"keyHandle\":\"6sjwTWDr6rqERHkQHq7xju8jEm1irJ94dUQhzTrPnsU5mnSrgHaKZyxqZuLoOioZOVb24urQqPBP6HakbgDV5w\"}]};\r\nsetTimeout(function() {\r\n\r\n    if (request.signRequests.length > 0) {\r\n        u2f.sign(\r\n            request.appId,\r\n            request.challenge,\r\n            request.signRequests,\r\n            function(data) {\r\n                if(data.errorCode) {\r\n                    switch (data.errorCode) {\r\n                        case 4:\r\n                            alert(\"This device is not registered for this account.\");\r\n                            break;\r\n\r\n                        default:\r\n                            alert(\"U2F failed with error code: \" + data.errorCode);\r\n                    }\r\n                    return;\r\n                } else {\r\n                    document.getElementById('tokenResponse').value = JSON.stringify(data);\r\n                    document.getElementById('form').submit();\r\n                }\r\n            }\r\n        );\r\n    }\r\n}, 1000);\r\n    \r\nSign response\r\n\r\n {\"clientData\":\"eyJ0eXAiOiJuYXZpZ2F0b3IuaWQuZ2V0QXNzZXJ0aW9uIiwiY2hhbGxlbmdlIjoickdsNHhERVBRZzVsVmR0a3RyMm5PeWdFaDBkUDlJOVdzZEJMVzFocGp6SSIsIm9yaWdpbiI6Imh0dHBzOi8vbG9jYWxob3N0Ojg0NDMiLCJjaWRfcHVia2V5IjoidW51c2VkIn0\",\"signatureData\":\"AQAAABMwRQIhAKpHI3mf1iCP3gb_63CxVH3M3nOPiOg3CHyHS9xc8kRxAiB6YJ0jQfmSQn1AAo7HSIDGDQ0zhI5JVyUZyQV2qlfP7A\",\"keyHandle\":\"6sjwTWDr6rqERHkQHq7xju8jEm1irJ94dUQhzTrPnsU5mnSrgHaKZyxqZuLoOioZOVb24urQqPBP6HakbgDV5w\"} \r\nNavigation\r\nRegister\r\nLogin\r\n```\r\n\r\n## 登录验签过程\r\n1. 将signatureData进行base64Url解码：\r\n01000000133045022100aa4723799fd6208fde06ffeb70b1547dccde738f88e837087c874bdc5cf2447102207a609d2341f992427d40028ec74880c60d0d33848e49572519c90576aa57cfec\r\n\r\n解析：\r\n01 // user presence\r\n00000013 // counter\r\n3045022100aa4723799fd6208fde06ffeb70b1547dccde738f88e837087c874bdc5cf2447102207a609d2341f992427d40028ec74880c60d0d33848e49572519c90576aa57cfec // signature\r\n\r\n2. 验签原数据组织：\r\n8D25AE631D8858FF58E46467E730B22E5BF728F96853C59383AAF3F1B5CB1B3E // application parameter\r\n\r\n// -----application parameter得到的过程---------\r\n// https://localhost:8443 (utf8 -> hex) 68747470733A2F2F6C6F63616C686F73743A38343433 (sha256) 8D25AE631D8858FF58E46467E730B22E5BF728F96853C59383AAF3F1B5CB1B3E\r\n// ---------------------------------------------\r\n\r\n01 // user presence\r\n00000013 // counter\r\n54E97D96C213D1D31DE579D21248D9AC59E9A8E98DE371C4A97395D272C06388 // challenge parameter\r\n\r\n// -----challenge parameter得到的过程---------\r\n// 将clientData进行base64Url解码为hex：\r\n// 7b22747970223a226e6176696761746f722e69642e676574417373657274696f6e222c226368616c6c656e6765223a2272476c34784445505167356c5664746b7472326e4f79674568306450394939577364424c573168706a7a49222c226f726967696e223a2268747470733a2f2f6c6f63616c686f73743a38343433222c226369645f7075626b6579223a22756e75736564227d\r\n// 将hex进行sha256：\r\n// 54E97D96C213D1D31DE579D21248D9AC59E9A8E98DE371C4A97395D272C06388\r\n// --------------------------------------------\r\n\r\n组装起来：\r\n8D25AE631D8858FF58E46467E730B22E5BF728F96853C59383AAF3F1B5CB1B3E 01 00000013 54E97D96C213D1D31DE579D21248D9AC59E9A8E98DE371C4A97395D272C06388\r\n\r\n8D25AE631D8858FF58E46467E730B22E5BF728F96853C59383AAF3F1B5CB1B3E010000001354E97D96C213D1D31DE579D21248D9AC59E9A8E98DE371C4A97395D272C06388\r\n\r\n进行sha256：\r\nBBC5EE15179D8D1F7A863D5AF9472B310F596FE22748445D309BF5058ABC7275\r\n\r\n3. 注册时的user public key信息\r\n04 385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efc faf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985\r\n\r\n4. 从signature中解析r和s\r\n3045 0221 00aa4723799fd6208fde06ffeb70b1547dccde738f88e837087c874bdc5cf24471 0220 7a609d2341f992427d40028ec74880c60d0d33848e49572519c90576aa57cfec\r\n0221是长度，前面的00去掉\r\nr= aa4723799fd6208fde06ffeb70b1547dccde738f88e837087c874bdc5cf24471\r\ns= 7a609d2341f992427d40028ec74880c60d0d33848e49572519c90576aa57cfec\r\n\r\n3. 使用ecc工具验签：\r\nQx= 385088806616a5735dc1c61c2efc3a1f64dacb481b277053b95b1b16db310efc // user public key x，这个数据从注册时的信息得来\r\nQy= faf89f1bbc8a0dc1eaa0904b03c7d741168a462f8b97c8e22e4e268b376ee985 // user public key y\r\nHm= BBC5EE15179D8D1F7A863D5AF9472B310F596FE22748445D309BF5058ABC7275 // 组装后的验签数据做sha256的结果\r\nr=  aa4723799fd6208fde06ffeb70b1547dccde738f88e837087c874bdc5cf24471\r\ns=  7a609d2341f992427d40028ec74880c60d0d33848e49572519c90576aa57cfec\r\n\r\n使用ECC Tool工具，曲线选择Secp256r1，进行验签，通过。",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/18/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/17",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/17/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/17/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/17/events",
        "html_url": "https://github.com/itlgl/note/issues/17",
        "id": 325653726,
        "node_id": "MDU6SXNzdWUzMjU2NTM3MjY=",
        "number": 17,
        "title": "比特币中P2SH(pay-to-script-hash)多重签名的锁定脚本和解锁脚本",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 1041171311,
                "node_id": "MDU6TGFiZWwxMDQxMTcxMzEx",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E6%AF%94%E7%89%B9%E5%B8%81",
                "name": "比特币",
                "color": "c5def5",
                "default": false,
                "description": "bitcoin"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-23T10:57:28Z",
        "updated_at": "2018-08-31T05:32:15Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# P2SH(pay-to-script-hash)多重签名的脚本\r\nP2SH是多重签名的一种应用形式。在P2SH的交易中，多了一个Redeem Script的概念，称为赎回脚本。当向P2SH脚本的地址转账时，锁定脚本中填写的不是公钥地址的列表，而是Redeem Script的hash值，这样锁定脚本变的非常短。只有在P2SH向外转账时的解锁脚本才会很长。这样就避免了多重签交易中锁定脚本过长导致交易费也骤增的问题。\r\n\r\n一个M-N的P2SH交易，赎回脚本Redeem Script的一般形式是：\r\n```script\r\nOP_M <PublicKey 1> <PublicKey 2> ... <PublicKey N> OP_N OP_CHECKMULTISIG\r\n```\r\n锁定脚本的一般形式是：\r\n```script\r\nOP_HASH160 PUSHDATA(<20-byte hash of Redeem Script>) OP_EQUAL\r\n```\r\n解锁脚本的一般形式是：\r\n```script\r\nOP_0 PUSHDATA(<Signature 1>) PUSHDATA(<Signature2>) ... PUSHDATA(<Signature M>) <Redeem Script>\r\n```\r\n\r\n如果是一个2-3的P2SH多重签名交易，参与者为A，B，C，那么上面的三个脚本就具体成了下面的格式\r\n赎回脚本Redeem Script：\r\n```script\r\nOP_2 PUSHDATA(<PublicKey A> <PublicKey B> <PublicKey C>) OP_3 OP_CHECKMULTISIG\r\n```\r\n锁定脚本：\r\n```script\r\nOP_HASH160 PUSHDATA(<20-byte hash of Redeem Script>) OP_EQUAL\r\n```\r\n解锁脚本（B和C发起交易）：\r\n```script\r\nOP_0 PUSHDATA(<Signature B>) PUSHDATA(<Signature C>) <Redeem Script>\r\n```\r\n\r\n# 为什么解锁脚本前面有一个空的签名OP_0？\r\n这是由于CHECKMULTISIG执行的bug，P2SH的解锁脚本是以OP_0开始的，这里贴上《精通比特币》书中的描述：\r\n\r\n> ![bug01](https://user-images.githubusercontent.com/7078104/40408706-07d6fc50-5e9b-11e8-911d-e5a6a3ac8f59.png)\r\n> ![bug02 png](https://user-images.githubusercontent.com/7078104/40408712-0dc2d7d8-5e9b-11e8-8e3f-f1e0eaaaddcd.png)\r\n\r\n# 脚本参数解释\r\n## 脚本中的常量值\r\n```txt\r\n脚本中的OP_M和OP_N对应的是常量OP_1(0x51) ~ OP_16(0x60)\r\n\r\nOP_CHECKMULTISIG=0xAE\r\nOP_HASH160=0xA9\r\nOP_EQUAL=0x88\r\n```\r\n\r\n> OP_16常量值就到头了，也就是说现在多重签名最多可以有16个人参与！\r\n\r\n## PUSHDATA\r\n这个在[#16](https://github.com/itlgl/note/issues/16)里面写过，这里再写一次：\r\n\r\n```txt\r\n如果0 < data.length < 76(0x4C)，则结果为：1个字节data.length + data数据\r\n如果76(0x4C) <= data.length < 2^8，则结果为：0x4C + 1个字节data.length + data数据\r\n如果2^8 <= data.length < 2^16，则结果为：0x4D + 2个字节data.length + data数据\r\n如果2^16 <= data.length < 2^32，则结果为：0x4E + 4个字节data.length + data数据\r\n```\r\n\r\n## PublicKey\r\n赎回脚本中的`<PublicKey 1>`是没有封装格式的，比如以`41`开头的非压缩格式公钥和以`21`开头的压缩格式公钥。\r\n\r\n```txt\r\n// 压缩格式公钥\r\n21 03 0b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478\r\n\r\n// 非压缩格式公钥\r\n41 04\r\n0bf69616981e5970c992a0762f441abcadfed9fc4630fa5e1b82ab00e81d1690 // X\r\n5d3820e073e1bd4a9dcfed336f4bf25edc634c2e174989767d299748359c2daf // Y\r\n```\r\n\r\n## Signature的格式\r\n有关Signature的签名格式，参见[#16](https://github.com/itlgl/note/issues/16)里面有关`Signature的格式`的描述。\r\n\r\n# 示例\r\n## 锁定脚本的例子解析\r\n附录中的示例1中有P2SH多重签名（2-3的P2SH）的锁定脚本数据：\r\n\r\n> a9144bb8b35e3c41be76d8c0c16a3a5a398a7688e40187\r\n\r\n按照锁定脚本解析一下（2-3的P2SH）：\r\n```txt\r\n// OP_HASH160 PUSHDATA(<20-byte hash of Redeem Script>) OP_EQUAL\r\n\r\na9 // OP_HASH160\r\n14 // PUSHDATA，length=20\r\n4bb8b35e3c41be76d8c0c16a3a5a398a7688e401 // 赎回脚本的hash，20字节\r\n87 // OP_EQUAL\r\n```\r\n\r\n#### 赎回脚本怎么得来\r\n其实和普通的地址相似，因为要向地址`38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B`转账，所以还是从地址得到这个hash值：\r\n\r\n将地址`38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B`进行base58解码得到`054bb8b35e3c41be76d8c0c16a3a5a398a7688e401470355f0`（`0x05`表示是P2SH的地址，base58编码以后地址以3开头），将这个结果去掉头部一个字节type，去掉尾部四个字节checksum，即为赎回脚本的hash。\r\n\r\n## 解锁脚本的例子解析\r\n附录中的示例2中有P2SH多重签名（2-3的P2SH）的解锁脚本数据：\r\n\r\n> 00483045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01483045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b014cc9524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653ae **// 解锁脚本，变长**\r\n\r\n按照解锁脚本解析一下（已经不记得由哪两人发起的交易了，暂且认为是B和C发起的）：\r\n\r\n> // OP_0 PUSHDATA(<Signature B>) PUSHDATA(<Signature C>) <Redeem Script>\r\n> \r\n> 00 // OP_0\r\n> 48 // PUSHDATA,len=72\r\n> 3045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01 // signature B\r\n> 48 // PUSHDATA,len=72\r\n> 3045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b01 // signature C\r\n> 4cc9 // PUSHDATA,len=201\r\n> 524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653ae // Redeem Script\r\n\r\n再按照Redeem Script的脚本解析一下Redeem Script：\r\n\r\n> // OP_2 <PublicKey A> <PublicKey B> <PublicKey C> OP_3 OP_CHECKMULTISIG\r\n> \r\n> 52 // OP_2\r\n> 4104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e // PublicKey A\r\n> 4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b0404091 // PublicKey B\r\n> 4104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd16 // PublicKey C\r\n> 53 // OP_3\r\n> ae // OP_CHECKMULTISIG\r\n\r\n\r\n# 附录\r\n## 示例1：有多重签名锁定脚本的交易\r\n交易的hash为4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7，[网页展示](https://live.blockcypher.com/btc/tx/4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7)，[api JSON数据](https://api.blockcypher.com/v1/btc/main/txs/4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7?limit=50&includeHex=true)\r\n\r\n网页截图：\r\n![tx4373](https://user-images.githubusercontent.com/7078104/40409318-10e9fd54-5e9d-11e8-8393-7167be1e4328.png)\r\n\r\nJSON数据：\r\n```json\r\n{\r\n  \"block_hash\": \"00000000000000000176b5e7c2b2d51308b34dda208df6f2459edbba05ec1b75\",\r\n  \"block_height\": 423147,\r\n  \"block_index\": 1027,\r\n  \"hash\": \"4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7\",\r\n  \"hex\": \"01000000010b15b9b578e600fdd71d07efaafeaaab10250f903374922bfe1e0f5389f5bd87010000006a4730440220008f0c0678854d2649448380adb02a7438ba8dfccfe0a85cd0bd353e08d068a4022075e6254f16d7943657127ebb6655dbd3d4fa30395b46d7a57f36ef59617b56b20121026c40b52e1bb5f301925adb124b1573b4297c234dd2c601bfaef46d40bceca70cffffffff02d8469800000000001976a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac001200000000000017a9144bb8b35e3c41be76d8c0c16a3a5a398a7688e4018700000000\",\r\n  \"addresses\": [\r\n    \"1EKXAAiJDntbEK3WSVW3vTcwYJ5ciJ5kSL\",\r\n    \"38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B\"\r\n  ],\r\n  \"total\": 9984216,\r\n  \"fees\": 784,\r\n  \"size\": 223,\r\n  \"preference\": \"low\",\r\n  \"relayed_by\": \"124.205.119.164\",\r\n  \"confirmed\": \"2016-08-01T11:09:18Z\",\r\n  \"received\": \"2016-08-01T06:36:38.935Z\",\r\n  \"ver\": 1,\r\n  \"double_spend\": false,\r\n  \"vin_sz\": 1,\r\n  \"vout_sz\": 2,\r\n  \"confirmations\": 100786,\r\n  \"confidence\": 1,\r\n  \"inputs\": [\r\n    {\r\n      \"prev_hash\": \"87bdf589530f1efe2b927433900f2510abaafeaaef071dd7fd00e678b5b9150b\",\r\n      \"output_index\": 1,\r\n      \"script\": \"4730440220008f0c0678854d2649448380adb02a7438ba8dfccfe0a85cd0bd353e08d068a4022075e6254f16d7943657127ebb6655dbd3d4fa30395b46d7a57f36ef59617b56b20121026c40b52e1bb5f301925adb124b1573b4297c234dd2c601bfaef46d40bceca70c\",\r\n      \"output_value\": 9985000,\r\n      \"sequence\": 4294967295,\r\n      \"addresses\": [\r\n        \"1EKXAAiJDntbEK3WSVW3vTcwYJ5ciJ5kSL\"\r\n      ],\r\n      \"script_type\": \"pay-to-pubkey-hash\",\r\n      \"age\": 422655\r\n    }\r\n  ],\r\n  \"outputs\": [\r\n    {\r\n      \"value\": 9979608,\r\n      \"script\": \"76a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac\",\r\n      \"spent_by\": \"50ca192a04c92030bb08d2f67e1ec4618ebb9c8131661fc9d6efbed2966513ba\",\r\n      \"addresses\": [\r\n        \"1EKXAAiJDntbEK3WSVW3vTcwYJ5ciJ5kSL\"\r\n      ],\r\n      \"script_type\": \"pay-to-pubkey-hash\"\r\n    },\r\n    {\r\n      \"value\": 4608,\r\n      \"script\": \"a9144bb8b35e3c41be76d8c0c16a3a5a398a7688e40187\",\r\n      \"spent_by\": \"ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53\",\r\n      \"addresses\": [\r\n        \"38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B\"\r\n      ],\r\n      \"script_type\": \"pay-to-script-hash\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n交易数据解析：\r\n\r\n> 01000000 **// Version**\r\n> 01 **// 交易输入个数**\r\n> 0b15b9b578e600fdd71d07efaafeaaab10250f903374922bfe1e0f5389f5bd87 **// UTXO**\r\n> 01000000 **// UTXO index**\r\n> 6a **// 解锁脚本长度**\r\n> 4730440220008f0c0678854d2649448380adb02a7438ba8dfccfe0a85cd0bd353e08d068a4022075e6254f16d7943657127ebb6655dbd3d4fa30395b46d7a57f36ef59617b56b20121026c40b52e1bb5f301925adb124b1573b4297c234dd2c601bfaef46d40bceca70c **// 解锁脚本**\r\n> ffffffff **// sequence,序列号**\r\n> 02 **// 交易输出个数**\r\n> d846980000000000 **// 金额**\r\n> 19 **// 锁定脚本长度**\r\n> 76a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac **// 锁定脚本1**\r\n> 0012000000000000 **// 金额**\r\n> 17 **// 锁定脚本长度**\r\n> a9144bb8b35e3c41be76d8c0c16a3a5a398a7688e40187 **// 锁定脚本2**\r\n> 00000000 **// Time Lock**\r\n\r\n## 示例2：有多重签名解锁脚本的交易\r\n交易的hash为ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53，[网页展示](https://live.blockcypher.com/btc/tx/ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53)，[api JSON数据](https://api.blockcypher.com/v1/btc/main/txs/ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53?limit=50&includeHex=true)\r\n\r\n网页截图：\r\n![txac89](https://user-images.githubusercontent.com/7078104/40409227-c176f524-5e9c-11e8-8000-a9cc82712300.png)\r\n\r\nJSON数据：\r\n```json\r\n{\r\n  \"block_hash\": \"0000000000000000011edeab34b5145125efa596fbc2e6a88825acd9570aa4d8\",\r\n  \"block_height\": 423431,\r\n  \"block_index\": 927,\r\n  \"hash\": \"ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53\",\r\n  \"hex\": \"0100000001f744bec7dd6c33cf384c8a4cb33269ca48c940e5852410d395807f6e56f6734301000000fd5e0100483045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01483045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b014cc9524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653aeffffffff0100090000000000001976a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac00000000\",\r\n  \"addresses\": [\r\n    \"1EKXAAiJDntbEK3WSVW3vTcwYJ5ciJ5kSL\",\r\n    \"38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B\"\r\n  ],\r\n  \"total\": 2304,\r\n  \"fees\": 2304,\r\n  \"size\": 437,\r\n  \"preference\": \"low\",\r\n  \"relayed_by\": \"124.205.119.164\",\r\n  \"confirmed\": \"2016-08-03T06:18:06Z\",\r\n  \"received\": \"2016-08-03T03:26:33.685Z\",\r\n  \"ver\": 1,\r\n  \"double_spend\": false,\r\n  \"vin_sz\": 1,\r\n  \"vout_sz\": 1,\r\n  \"confirmations\": 100499,\r\n  \"confidence\": 1,\r\n  \"inputs\": [\r\n    {\r\n      \"prev_hash\": \"4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7\",\r\n      \"output_index\": 1,\r\n      \"script\": \"00483045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01483045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b014cc9524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653ae\",\r\n      \"output_value\": 4608,\r\n      \"sequence\": 4294967295,\r\n      \"addresses\": [\r\n        \"38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B\"\r\n      ],\r\n      \"script_type\": \"pay-to-script-hash\",\r\n      \"age\": 423147\r\n    }\r\n  ],\r\n  \"outputs\": [\r\n    {\r\n      \"value\": 2304,\r\n      \"script\": \"76a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac\",\r\n      \"addresses\": [\r\n        \"1EKXAAiJDntbEK3WSVW3vTcwYJ5ciJ5kSL\"\r\n      ],\r\n      \"script_type\": \"pay-to-pubkey-hash\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n交易数据解析：\r\n\r\n> 01000000 **// Version，4字节**\r\n> 01 **// 交易输入个数，1字节**\r\n> f744bec7dd6c33cf384c8a4cb33269ca48c940e5852410d395807f6e56f67343 **// UTXO(Unspent Transaction Output)，32字节**\r\n> 01000000 **// UTXO的index，4字节**\r\n> fd5e01 **// 解锁脚本长度，VarInt，变长**\r\n> 00483045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01483045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b014cc9524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653ae **// 解锁脚本，变长**\r\n> ffffffff **// 交易序列号，4字节**\r\n> 01 **// 交易输出个数，1字节**\r\n> 0009000000000000 **// 输出金额，8字节**\r\n> 19 **// 锁定脚本长度，VarInt，变长**\r\n> 76a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac **// 锁定脚本，变长**\r\n> 00000000 **// Time Lock，4字节**",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/17/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/16",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/16/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/16/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/16/events",
        "html_url": "https://github.com/itlgl/note/issues/16",
        "id": 325565849,
        "node_id": "MDU6SXNzdWUzMjU1NjU4NDk=",
        "number": 16,
        "title": "比特币中P2PKH(pay-to-public-key-hash)的锁定脚本和解锁脚本",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 1041171311,
                "node_id": "MDU6TGFiZWwxMDQxMTcxMzEx",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E6%AF%94%E7%89%B9%E5%B8%81",
                "name": "比特币",
                "color": "c5def5",
                "default": false,
                "description": "bitcoin"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-23T06:30:38Z",
        "updated_at": "2018-08-31T05:31:59Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "# 脚本格式\r\nP2PKH的锁定脚本为：\r\n```script\r\nOP_DUP OP_HASH160 PUSHDATA(<Cafe Public Key Hash>) OP_EQUALVERIFY OP_CHECKSIG\r\n```\r\n\r\nP2PKH的解锁脚本为：\r\n```script\r\nPUSHDATA(<Cafe Signature>) <Cafe Public Key>\r\n```\r\n\r\n# 脚本参数解释\r\n## 脚本中的常量值\r\n```txt\r\nOP_DUP=0x76\r\nOP_HASH160=0xA9\r\nOP_EQUALVERIFY=0x88\r\nOP_CHECKSIG=0xAC\r\n```\r\n\r\n## PUSHDATA\r\nPUSHDATA封装格式为：\r\n```txt\r\n如果0 < data.length < 76(0x4C)，则结果为：1个字节data.length + data数据\r\n如果76(0x4C) <= data.length < 2^8，则结果为：0x4C + 1个字节data.length + data数据\r\n如果2^8 <= data.length < 2^16，则结果为：0x4D + 2个字节data.length + data数据\r\n如果2^16 <= data.length < 2^32，则结果为：0x4E + 4个字节data.length + data数据\r\n```\r\n\r\n## Signature的格式\r\nSignature的格式为DER(r,s) + SIGHASH\r\n\r\n## DER的封装格式\r\nDER是ASN1数据格式中的一种，DER的封装规则还没有搞太明白，但是数据结构可解，开头是固定值0x30，后面0x45为后续数据长度，0x0220或者0x022100后面就是签名值r和s。\r\nDER的java代码实现：\r\n```java\r\nprivate static byte[] toDER(BigInteger r, BigInteger s) {\r\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(72);\r\n    DERSequenceGenerator seq = null;\r\n    byte[] res = new byte[0];\r\n    try {\r\n        seq = new DERSequenceGenerator(bos);\r\n        seq.addObject(new ASN1Integer(r));\r\n        seq.addObject(new ASN1Integer(s));\r\n        seq.close();\r\n        res = bos.toByteArray();\r\n        return res;\r\n    } catch (IOException e) {\r\n\r\n    }\r\n    return null;\r\n}\r\n```\r\n\r\n## SIGHASH\r\nSIGHASH是签名哈希类型。\r\n\r\n> 比特币签名具有指示交易数据的哪一部分包含在使用 SIGHASH 标志的私钥签名的哈希中的方式。SIGHASH 标志是附加到签名的单个字节。 每个签名都有一个SIGHASH标志，该标志在不同输入之间也可以不同。 具有三个签名输入的交易可以具有不同SIGHASH标志的三个签名，每个签名签署（承诺）交易的不同部分。\r\n> \r\n> 记住，每个输入可能在其解锁脚本中包含一个签名。 因此，包含多个输入的交易可以拥有具有不同SIGHASH标志的签名，这些标志在每个输入中承诺交易的不同部分。 还要注意，比特币交易可能包含来自不同“所有者”的输入，他们在部分构建（和无效）的交易中可能仅签署一个输入，继而与他人协作收集所有必要的签名后再使交易生效。 许多SIGHSASH标志类型，只有在你考虑到由许多参与者在比特币网络之外共同协作去更新仅部分签署了的交易，才具有意义。\r\n> \r\n> 有三个SIGHASH标志：ALL，NONE和SINGLE，如下表所示。\r\n> \r\n> ![signhash-flag](https://user-images.githubusercontent.com/7078104/40353351-e25da10c-5de3-11e8-94cb-530035366cb9.png)\r\n> \r\n> 另外还有一个修饰符标志SIGHASH_ANYONECANPAY，它可以与前面的每个标志组合。 当设置ANYONECANPAY时，只有一个输入被签名，其余的（及其序列号）打开以进行修改。 ANYONECANPAY的值为0x80，并通过按位OR运算，得到如下所示的组合标志：\r\n> \r\n> ![signhash-flag2 png](https://user-images.githubusercontent.com/7078104/40353556-5bbdc81a-5de4-11e8-8da0-ac6fd5f3cc57.png)\r\n> \r\n> SIGHASH标志在签名和验证期间应用的方式是建立交易的副本和删节其中的某些字段（设置长度为零并清空），继而生成的交易被序列化，SIGHASH标志被添加到序列化交易的结尾，并将结果哈希化 ，得到的哈希值本身即是被签名的“消息”。 基于SIGHASH标志的使用，交易的不同部分被删节。 所得到的哈希值取决于交易中数据的不同子集。 在哈希化前，SIGHASH作为最后一步被包含在内，签名也会对SIGHASH类型进行签署，因此不能更改（例如，被矿工）。\r\n\r\n## Public Key\r\nPublic Key有两种表示方式，分别是非压缩格式和压缩格式，这两种方式算出来的比特币地址不同，所以不能混用。\r\n\r\n压缩格式就是数据中只有公钥的X，没有Y。压缩公钥以0x21开头，0x02或0x03代表Y值在X轴的上方还是下方，后面是X点的数据(32 bytes)。示例：\r\n```txt\r\n21 03 0b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478\r\n```\r\n\r\n非压缩格式的数据，开头是0x41,0x04，后面紧跟着X点的数据(32 bytes)和Y点的数据(32 bytes)。示例：\r\n```txt\r\n41 04\r\n0bf69616981e5970c992a0762f441abcadfed9fc4630fa5e1b82ab00e81d1690 // X\r\n5d3820e073e1bd4a9dcfed336f4bf25edc634c2e174989767d299748359c2daf // Y\r\n```\r\n\r\n# 示例\r\n比特币testnet的一笔交易示例：[912d470a1178ac09e31c43ee5696138fc51e94c7834864ed5c8eff29e5f54370](https://live.blockcypher.com/btc-testnet/tx/912d470a1178ac09e31c43ee5696138fc51e94c7834864ed5c8eff29e5f54370)\r\n\r\n![tx912d](https://user-images.githubusercontent.com/7078104/40401451-05b80a9e-5e79-11e8-8bb2-5eab9380105a.png)\r\n\r\n通过blockcypher的API接口可以拿到更加详细的[JSON数据](https://api.blockcypher.com/v1/btc/test3/txs/912d470a1178ac09e31c43ee5696138fc51e94c7834864ed5c8eff29e5f54370?limit=50&includeHex=true)\r\n\r\n这笔交易的JSON返回数据：\r\n```json\r\n{\r\n  \"block_hash\": \"000000003b5f089b739219d8f40ec34ca66b051c627cbb8e5d7a3dd031ff47d2\",\r\n  \"block_height\": 1298300,\r\n  \"block_index\": 1,\r\n  \"hash\": \"912d470a1178ac09e31c43ee5696138fc51e94c7834864ed5c8eff29e5f54370\",\r\n  \"hex\": \"010000000184f3684abd720033ff7a7654b48936088cd22c8d9e96d3a12e64559562e0fd93000000006b483045022100ea03e8414011fffc00f10a25a771076ee1cb4b0b24a02607c67462009e3d2c1d022070a7a1c74e6bb71c32d78043bccf7bbc353334eb6e517162b2270c85d6bb54d20121030b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478ffffffff0100a92d01000000001976a914d9c637cc30bb0fe9add3a185c1f5d884d12b7b7888ac00000000\",\r\n  \"addresses\": [\r\n    \"mv24N7xJZySdMrLeQHvKTJYWmRyv9DY82Q\",\r\n    \"n1NSP78VQ5iZqVVRMA9ZZ2r77eeGLnwdj8\"\r\n  ],\r\n  \"total\": 19769600,\r\n  \"fees\": 134400,\r\n  \"size\": 192,\r\n  \"preference\": \"high\",\r\n  \"relayed_by\": \"35.205.92.62:18333\",\r\n  \"confirmed\": \"2018-05-22T03:22:51Z\",\r\n  \"received\": \"2018-05-22T03:18:51.259Z\",\r\n  \"ver\": 1,\r\n  \"double_spend\": false,\r\n  \"vin_sz\": 1,\r\n  \"vout_sz\": 1,\r\n  \"confirmations\": 1,\r\n  \"confidence\": 1,\r\n  \"inputs\": [\r\n    {\r\n      \"prev_hash\": \"93fde0629555642ea1d3969e8d2cd28c083689b454767aff330072bd4a68f384\",\r\n      \"output_index\": 0,\r\n      \"script\": \"483045022100ea03e8414011fffc00f10a25a771076ee1cb4b0b24a02607c67462009e3d2c1d022070a7a1c74e6bb71c32d78043bccf7bbc353334eb6e517162b2270c85d6bb54d20121030b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478\",\r\n      \"output_value\": 19904000,\r\n      \"sequence\": 4294967295,\r\n      \"addresses\": [\r\n        \"mv24N7xJZySdMrLeQHvKTJYWmRyv9DY82Q\"\r\n      ],\r\n      \"script_type\": \"pay-to-pubkey-hash\",\r\n      \"age\": 1298299\r\n    }\r\n  ],\r\n  \"outputs\": [\r\n    {\r\n      \"value\": 19769600,\r\n      \"script\": \"76a914d9c637cc30bb0fe9add3a185c1f5d884d12b7b7888ac\",\r\n      \"addresses\": [\r\n        \"n1NSP78VQ5iZqVVRMA9ZZ2r77eeGLnwdj8\"\r\n      ],\r\n      \"script_type\": \"pay-to-pubkey-hash\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n解析交易中的hex原始数据（[如何解析比特币中的交易原始数据rawData](https://github.com/itlgl/note/issues/15)）：\r\n```txt\r\n01000000 // version，4字节，倒序\r\n01 // 输入脚本个数\r\n84f3684abd720033ff7a7654b48936088cd22c8d9e96d3a12e64559562e0fd93 // UTXO(Unspent Transaction Output，未花费的交易输出)，倒序\r\n00000000 // UTXO的index，从0开始\r\n6b // 解锁脚本长度\r\n48 3045022100ea03e8414011fffc00f10a25a771076ee1cb4b0b24a02607c67462009e3d2c1d022070a7a1c74e6bb71c32d78043bccf7bbc353334eb6e517162b2270c85d6bb54d201 21030b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478 // 解锁脚本\r\nffffffff // sequence,序列号\r\n01 // 输出脚本个数\r\n00a92d0100000000 // 转账金额,8字节,倒序\r\n19 // 锁定脚本长度\r\n76a914d9c637cc30bb0fe9add3a185c1f5d884d12b7b7888ac // 锁定脚本\r\n00000000 // lock time,时间戳\r\n```\r\n\r\n这是一笔普通地址转账给普通地址的交易，正好用来解释P2PKH的锁定脚本和解锁脚本。\r\n\r\n# 锁定脚本\r\n例子中，锁定脚本为：\r\n```txt\r\n76a914d9c637cc30bb0fe9add3a185c1f5d884d12b7b7888ac // 锁定脚本\r\n```\r\n\r\n对照锁定脚本的格式，可以解析这段脚本如下：\r\n```txt\r\n// OP_DUP OP_HASH160 <Cafe Public Key Hash> OP_EQUALVERIFY OP_CHECKSIG\r\n\r\n76 // OP_DUP \r\na9 // OP_HASH160 \r\n14 // 公钥的HASH值的长度，PUSHDATA\r\nd9c637cc30bb0fe9add3a185c1f5d884d12b7b78 // 公钥的HASH值\r\n88 // OP_EQUALVERIFY \r\nac // OP_CHECKSIG\r\n```\r\n\r\n## 公钥HASH值的计算方法\r\n按常理来说，公钥HASH值计算方法是拿到公钥的byte数据做SHA256，再做RIPEMD160计算，结果为20字节HASH值。\r\n\r\n但是这里做的是转账，输入项肯定只有转账地址`n1NSP78VQ5iZqVVRMA9ZZ2r77eeGLnwdj8`。因为地址就是公钥的HASH值再加入一个头的network type和最后的四个字节checkSum后做base58生成的，所以可以反向操作：\r\n\r\n将比特币地址`n1NSP78VQ5iZqVVRMA9ZZ2r77eeGLnwdj8`进行base58解码，得到：`6fd9c637cc30bb0fe9add3a185c1f5d884d12b7b783bcba0fb`，其中`0x6f`代表是测试网络地址。将上面的结果去掉一字节头和尾部4字节校验和，得到：`d9c637cc30bb0fe9add3a185c1f5d884d12b7b78`，即为公钥HASH值\r\n\r\n# 解锁脚本\r\n例子中，解锁脚本为：\r\n```txt\r\n48 3045022100ea03e8414011fffc00f10a25a771076ee1cb4b0b24a02607c67462009e3d2c1d022070a7a1c74e6bb71c32d78043bccf7bbc353334eb6e517162b2270c85d6bb54d201 21030b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478 // 解锁脚本\r\n```\r\n\r\n将解锁脚本按照PUSHDATA的规则解析成两个字段：\r\nSignature=`483045022100ea03e8414011fffc00f10a25a771076ee1cb4b0b24a02607c67462009e3d2c1d022070a7a1c74e6bb71c32d78043bccf7bbc353334eb6e517162b2270c85d6bb54d201`\r\nPublic Key=`21030b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478`\r\n\r\n解析一下Signature：\r\n\r\n> 48 // PUSHDATA\r\n> 3045022100\r\n> ea03e8414011fffc00f10a25a771076ee1cb4b0b24a02607c67462009e3d2c1d // signature r\r\n> 0220\r\n> 70a7a1c74e6bb71c32d78043bccf7bbc353334eb6e517162b2270c85d6bb54d2 // signature s\r\n> 01 // SIGHASH\r\n\r\n解析一下Public Key：\r\n\r\n> // 压缩格式的公钥\r\n> 21 03 0b461bf0f1253c9dacde9992594042d77798c5f0e7c76a1c587518606fb35478\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/16/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/15",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/15/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/15/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/15/events",
        "html_url": "https://github.com/itlgl/note/issues/15",
        "id": 325235654,
        "node_id": "MDU6SXNzdWUzMjUyMzU2NTQ=",
        "number": 15,
        "title": "如何解析比特币中的交易原始数据rawData",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834726986,
                "node_id": "MDU6TGFiZWw4MzQ3MjY5ODY=",
                "url": "https://api.github.com/repos/itlgl/note/labels/wontfix",
                "name": "wontfix",
                "color": "ffffff",
                "default": true,
                "description": "This will not be worked on"
            },
            {
                "id": 1041171311,
                "node_id": "MDU6TGFiZWwxMDQxMTcxMzEx",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E6%AF%94%E7%89%B9%E5%B8%81",
                "name": "比特币",
                "color": "c5def5",
                "default": false,
                "description": "bitcoin"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-22T10:36:36Z",
        "updated_at": "2018-08-31T05:31:43Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "## 交易数据结构\r\n有关交易的详细信息可以查看比特币的wiki网站：[Transaction](https://en.bitcoin.it/wiki/Transaction)\r\n\r\nTxBinaryMap：\r\n![txbinarymap](https://user-images.githubusercontent.com/7078104/40460881-7200fbbc-5f3b-11e8-9aea-ba1b62e67f7b.png)\r\n原始图片[地址](https://en.bitcoin.it/wiki/File:TxBinaryMap.png)\r\n\r\n交易的结构表格（[Transaction](https://en.bitcoin.it/wiki/Transaction)）：\r\n![txf](https://user-images.githubusercontent.com/7078104/40461068-2f447c80-5f3c-11e8-8d44-a6b8b4530bfa.png)\r\n\r\n\r\n## 示例数据\r\n以一个正式网络的一笔交易为例分析：[ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53](https://live.blockcypher.com/btc/tx/ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53/)\r\n\r\n![交易详情图片](https://user-images.githubusercontent.com/7078104/40401564-9caebe2a-5e79-11e8-8650-42f22d14e038.png)\r\n\r\n\r\n通过blockcypher的API接口可以拿到更加详细的[JSON数据](https://api.blockcypher.com/v1/btc/main/txs/ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53?limit=50&includeHex=true)\r\n\r\n这笔交易的JSON返回数据：\r\n```json\r\n{\r\n  \"block_hash\": \"0000000000000000011edeab34b5145125efa596fbc2e6a88825acd9570aa4d8\",\r\n  \"block_height\": 423431,\r\n  \"block_index\": 927,\r\n  \"hash\": \"ac89b280cc21854b82b4cc111a0e6c0d10315117b6001e3f4f3af3d2f7b2fd53\",\r\n  \"hex\": \"0100000001f744bec7dd6c33cf384c8a4cb33269ca48c940e5852410d395807f6e56f6734301000000fd5e0100483045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01483045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b014cc9524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653aeffffffff0100090000000000001976a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac00000000\",\r\n  \"addresses\": [\r\n    \"1EKXAAiJDntbEK3WSVW3vTcwYJ5ciJ5kSL\",\r\n    \"38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B\"\r\n  ],\r\n  \"total\": 2304,\r\n  \"fees\": 2304,\r\n  \"size\": 437,\r\n  \"preference\": \"low\",\r\n  \"relayed_by\": \"124.205.119.164\",\r\n  \"confirmed\": \"2016-08-03T06:18:06Z\",\r\n  \"received\": \"2016-08-03T03:26:33.685Z\",\r\n  \"ver\": 1,\r\n  \"double_spend\": false,\r\n  \"vin_sz\": 1,\r\n  \"vout_sz\": 1,\r\n  \"confirmations\": 100505,\r\n  \"confidence\": 1,\r\n  \"inputs\": [\r\n    {\r\n      \"prev_hash\": \"4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7\",\r\n      \"output_index\": 1,\r\n      \"script\": \"00483045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01483045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b014cc9524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653ae\",\r\n      \"output_value\": 4608,\r\n      \"sequence\": 4294967295,\r\n      \"addresses\": [\r\n        \"38bPsA6ZXfRuxFD7efVXTkQd69422uzD4B\"\r\n      ],\r\n      \"script_type\": \"pay-to-script-hash\",\r\n      \"age\": 423147\r\n    }\r\n  ],\r\n  \"outputs\": [\r\n    {\r\n      \"value\": 2304,\r\n      \"script\": \"76a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac\",\r\n      \"addresses\": [\r\n        \"1EKXAAiJDntbEK3WSVW3vTcwYJ5ciJ5kSL\"\r\n      ],\r\n      \"script_type\": \"pay-to-pubkey-hash\"\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n接口数据中的hex字段是发送到区块链上的交易原文，接下来主要分析这一段数据。\r\n\r\n## 先看解析结果\r\n\r\n> 01000000 **// Version，4字节**\r\n> 01 **// 交易输入个数，变长VarInt**\r\n> f744bec7dd6c33cf384c8a4cb33269ca48c940e5852410d395807f6e56f67343 **// UTXO(Unspent Transaction Output)，32字节**\r\n> 01000000 **// UTXO的index，4字节**\r\n> fd5e01 **// 解锁脚本长度，VarInt，变长**\r\n> 00483045022100bd16b2ffa112937856716909162c00a66e7c5e6cccd0093ec9aece127632f8dc02205a567c53161e5fb62ac8d202acf8f8cc2f5a6496f47a878555dae7ffde85a41d01483045022100ac3c0365e103d97d3cc935755d5177e8f383993a558998200f8537e64f6b520002202216716f7fa54adc69095c4127ff6f97d42e28517a103f7691808db3cde6ee5b014cc9524104a7ada7c84ae36e98735597ee770a7cfd2d5d9398154b088ee352d3a83b21bbf537c0b8e4ea0acc172285b37571a9b1e36c0da387d6d1f361f0b65cad5c3f659e4104fe411f77e5aa50b54e0f2be0204b26cd1d2bf77bf95f2108a6b012e34637289121cd351c696c8a519b4b58674a87e7907385b4a5e7c0cfa5019346c1b04040914104eeffa9bbfe6dd2c99a9747ca5d1c1ebd15fe0344f52ff2915e3c11b3be9be11236895e5514b085c1f8a1bd8ef9c3db0cf1095aaf442cae11d88c3af026fabd1653ae **// 解锁脚本，变长**\r\n> ffffffff **// 交易序列号，4字节**\r\n> 01 **// 交易输出个数，变长VarInt***\r\n> 0009000000000000 **// 输出金额，8字节**\r\n> 19 **// 锁定脚本长度，VarInt，变长**\r\n> 76a914921a4c141746bbd7beb8e81b05ba93d84b076a0088ac **// 锁定脚本，变长**\r\n> 00000000 **// Time Lock，4字节**\r\n\r\n下面进行说明：\r\n## Lettle-endian 小端编码\r\n比特币中很多数据都是小端编码的，除了交易输入脚本和交易输出脚本，其余内容全部是小端编码的。这个在第一张图片TxBinaryMap左下角的字可以看出来。\r\n\r\n## 比特币交易的数据结构\r\n可以看到比特币交易数据最外层的结构包括：Version，交易输入个数，交易输入，交易输出个数，交易输出，TimeLock。\r\n\r\n示例图：\r\n![default](https://user-images.githubusercontent.com/7078104/40402595-326d2cbc-5e7f-11e8-8431-04b7595aa630.png)\r\n\r\n一个完整的交易中，交易输入和输出可以为多个。\r\n\r\n但是只有这个结构是不能解析整个交易的，因为交易输入的长度和交易输出的长度是变长的，还需要解析交易输入和交易输出的长度。\r\n\r\n**交易输入的结构图：**\r\n![交易输入结构](https://user-images.githubusercontent.com/7078104/40350215-b8a7f36a-5ddb-11e8-960b-13e7750009ef.png)\r\n\r\n**交易输出的结构图：**\r\n![交易输出结构](https://user-images.githubusercontent.com/7078104/40350139-65fd5cd6-5ddb-11e8-934d-71510f0bbbdd.png)\r\n\r\n有了基本的结构图，基本可以解析了。\r\n\r\n但是在交易输入和交易输出的结构图中，都提到了一个VarInt的变长参数，需要这个变长参数的规则才能知道后续脚本的长度。\r\n\r\n**VarInt变长**\r\nVarInt的长度规则为：\r\n\r\n> **假设脚本长度定义为len**\r\n> **如果0 < len < 0xFD，那么脚本长度就是一个字节的len**\r\n> **如果0xFD <= len <= 0xFFFF，脚本长度为：0xFD + len转换为两个字节bytes以后倒序**\r\n> **如果0xFFFF < len <= 0xFFFF FFFF，脚本长度为：0xFE + len转换为四个字节bytes后倒序**\r\n> **如果0xFFFF FFFF < len，脚本长度为：0xFF + len转换为八个字节bytes后倒序**\r\n> \r\n> 例子：\r\n> (1) len=200(0xC8)，那么脚本的长度为：0xC8\r\n> (2) len=40000(0x9C40)，那么脚本的长度为：0xFD，0x40，0x9C\r\n> (3) len=100000(0x186A0)，那么脚本的长度为：0xFE，0xA0，0x86，0x01，0x00\r\n> (4) len=5000000000(0x12A05F200)，那么脚本的长度为：0xFF，0x00，0xF2，0x05，0x2A，0x01，0x00，0x00，0x00\r\n\r\n比如上面的解锁脚本开头为0xfd，0xfd表示后续两个字节0x5e01表示长度，那么脚本的实际长度是0x15e，注意后面的长度是小端编码的。\r\n\r\n有了上面的东西，就可以解析比特币交易的原始数据了。\r\n\r\n## 比特币各项数据的说明\r\n\r\n### Version\r\n\r\n> 01000000 // version，4字节，小端编码\r\n\r\n交易的版本号在比特币中是固定的值1，填充为4个字节数据并倒序即为hex中的版本号。\r\n\r\n### UTXO\r\n\r\n> f744bec7dd6c33cf384c8a4cb33269ca48c940e5852410d395807f6e56f67343// UTXO(Unspent Transaction Output，未花费的交易输出)，小端编码\r\n\r\n输入交易的HASH是交易输入中的一项，实际填充时是倒序的，上面的输入正序排列以后为`4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7`，可以在blockcypher网站上查询到这笔交易的详细信息，[网页展示](https://live.blockcypher.com/btc/tx/4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7/)和[api调用的JSON数据](https://api.blockcypher.com/v1/btc/main/txs/4373f6566e7f8095d3102485e540c948ca6932b34c8a4c38cf336cddc7be44f7?limit=50&includeHex=true)\r\n\r\n### 交易序列号sequence\r\n\r\n> ffffffff // sequence,序列号\r\n\r\n交易序列号为4个字节数据，一般都填写0xffffffff。\r\n\r\n附上精通比特币中对sequence的描述：\r\n\r\n> ![seq01](https://user-images.githubusercontent.com/7078104/40354582-c919c48e-5de6-11e8-8767-d8fed6c1c350.png)\r\n> ![seq02](https://user-images.githubusercontent.com/7078104/40354590-cdaa235e-5de6-11e8-8320-55ad439851e2.png)\r\n\r\n### lock time\r\n\r\n> 00000000 // lock time,时间戳\r\n\r\n交易锁定时间，4字节，默认情况下为全0，表示立刻可以消费掉。\r\n\r\n附上精通比特币里面关于锁定时间的描述：\r\n\r\n> ![timelock01](https://user-images.githubusercontent.com/7078104/40357490-e7926f12-5dee-11e8-9faf-f9e5cb9ad8e6.png)\r\n> ![timelock02 png](https://user-images.githubusercontent.com/7078104/40357495-ecae8c9c-5dee-11e8-8169-4f2a8104b090.png)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/15/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/14",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/14/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/14/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/14/events",
        "html_url": "https://github.com/itlgl/note/issues/14",
        "id": 320228176,
        "node_id": "MDU6SXNzdWUzMjAyMjgxNzY=",
        "number": 14,
        "title": "解决APP中fragment重叠问题",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-04T10:39:38Z",
        "updated_at": "2018-05-04T10:39:38Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "**此文章来源于：[http://www.cnblogs.com/shuijilove/p/5592439.html](http://www.cnblogs.com/shuijilove/p/5592439.html)**\r\n\r\n由于内存重启，导致的frgament重叠，其原因就是FragmentState没有保存Fragment的显示状态，即mHidden，导致页面重启后，该值为默认的false，即show状态，所以导致了Fragment的重叠。\r\n\r\n那么解决方案就是自己写一些代码去保存fragment的显示状态。\r\n\r\n当发生内存重启的时候，fragment会触onSaveInstanceState方法，那么我们可以在这个方法内部去保存当前状态，然后在onCreate中进行取值回复，代码如下：\r\n\r\n```java\r\npublic class BaseFragment extends Fragment {\r\n    private static final String STATE_SAVE_IS_HIDDEN = \"STATE_SAVE_IS_HIDDEN\";\r\n\r\n    @Override\r\n    public void onCreate(@Nullable Bundle savedInstanceState) {\r\n    ...\r\n    if (savedInstanceState != null) {\r\n        boolean isSupportHidden = savedInstanceState.getBoolean(STATE_SAVE_IS_HIDDEN);\r\n\r\n        FragmentTransaction ft = getFragmentManager().beginTransaction();\r\n        if (isSupportHidden) {\r\n            ft.hide(this);\r\n        } else {\r\n            ft.show(this);\r\n        }\r\n        ft.commit();\r\n    }\r\n\r\n    @Override\r\n    public void onSaveInstanceState(Bundle outState) {\r\n        outState.putBoolean(STATE_SAVE_IS_HIDDEN, isHidden());\r\n    }\r\n}\r\n```\r\n\r\n参考开源项目：[https://github.com/YoKeyword/Fragmentation](https://github.com/YoKeyword/Fragmentation)\r\n\r\n参考文章：\r\n\r\n- [Fragment全解析系列（一）：那些年踩过的坑](http://www.jianshu.com/p/d9143a92ad94)\r\n- [Fragment全解析系列（二）：正确的使用姿势](http://www.jianshu.com/p/fd71d65f0ec6)\r\n- [Fragment之我的解决方案：Fragmentation](http://www.jianshu.com/p/38f7994faa6b)\r\n- [Android Fragment 你应该知道的一切](http://blog.csdn.net/lmj623565791/article/details/42628537)",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/14/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/13",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/13/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/13/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/13/events",
        "html_url": "https://github.com/itlgl/note/issues/13",
        "id": 319799833,
        "node_id": "MDU6SXNzdWUzMTk3OTk4MzM=",
        "number": 13,
        "title": "在Intellij IDEA社区版中开发SpringBoot",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-05-03T06:23:23Z",
        "updated_at": "2018-05-03T06:23:43Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "Intellij IDEA社区版不添加Tomcat等容器也可以支持SpringBoot web项目的开发，但是没有新建项目的插件功能。\r\n\r\n从网页[http://start.spring.io/](http://start.spring.io/)上生成一个项目然后导入到IDE中，然后就可以进行开发了。\r\n\r\n如果为了日常新建项目方便，还可以将项目保存为模板，在IDEA中选择`Tools -> Save Project as Template...`，输入`Name`和`Description`，增加模板项保存即可。当再新建项目时，选择新增的模板即可。\r\n\r\n参考： https://sivalabs.in/2016/09/getting-started-springboot-intellij-idea-community-edition/",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/13/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/12",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/12/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/12/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/12/events",
        "html_url": "https://github.com/itlgl/note/issues/12",
        "id": 316677320,
        "node_id": "MDU6SXNzdWUzMTY2NzczMjA=",
        "number": 12,
        "title": "Base64、Base64Url、Base32、Base16编码算法",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-23T06:24:00Z",
        "updated_at": "2018-04-23T06:30:02Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "[RFC4648](https://tools.ietf.org/html/rfc4648) 介绍了 base64、base32 以及 base16编码方案，[txt下载](https://tools.ietf.org/rfc/rfc4648.txt)。\r\n\r\n在Guava的包中，有Base64、Base64Url、Base32、Base32Hex、Base16编码算法的实现，实现类为：`com.google.common.io.BaseEncoding`。\r\n\r\nBase64和BaseUrl编码原理相同，编码表略有区别。\r\n\r\n>### Base 64 编码\r\n>Base 64 编码被设计为允许使用大小写字母但不需要人类可读的形式表示任意八位字节序列。使用US-ASCII的65个字符的子集，用每个可打印字符表示6位。额外的第65个字符`=`用于编码填充。\r\n>\r\n>```text\r\n>                      Table 1: The Base 64 Alphabet\r\n>\r\n>     Value Encoding  Value Encoding  Value Encoding  Value Encoding\r\n>         0 A            17 R            34 i            51 z\r\n>         1 B            18 S            35 j            52 0\r\n>         2 C            19 T            36 k            53 1\r\n>         3 D            20 U            37 l            54 2\r\n>         4 E            21 V            38 m            55 3\r\n>         5 F            22 W            39 n            56 4\r\n>         6 G            23 X            40 o            57 5\r\n>         7 H            24 Y            41 p            58 6\r\n>         8 I            25 Z            42 q            59 7\r\n>         9 J            26 a            43 r            60 8\r\n>        10 K            27 b            44 s            61 9\r\n>        11 L            28 c            45 t            62 +\r\n>        12 M            29 d            46 u            63 /\r\n>        13 N            30 e            47 v\r\n>        14 O            31 f            48 w         (pad) =\r\n>        15 P            32 g            49 x\r\n>        16 Q            33 h            50 y\r\n>```\r\n>对一个被编码的字符串，从左到右，每3个8位输入组形成一个24位输入组，然后将这24位视为4个级联的6位组，每组都被转换为base64字母表中的单个字符。6位组可以表示为0-63的数字，并作为字母表的索引对应到某个字母。\r\n>\r\n>对于编码结尾少于24位的数据，对结尾进行填充处理。由于所有 base64 输入都是整数个八位字节，因此只会出现以下情况：\r\n>\r\n>```text\r\n>  1) 结尾为三个字节，此时不用填充\r\n>  2) 结尾为两个字节，此时需要填充8个0形成24位，编码结果为⌈16/6⌉=3个编码位，一个\"=\"填充位\r\n>  3) 结尾为一个字节，此时需要填充16个0以形成24位，编码结果为⌈8/6⌉=2个编码位，两个\"=\"填充位\r\n>```\r\n>\r\n>当然，依据应用场景的不同，可以将填充位忽略（如数据长度已知的情况下）。\r\n>\r\n>### Base64url 编码\r\n>\r\n>该编码应该与base64编码区别对待，除非特殊说明，base64 编码通常为 `Table1` 中的字母表。\r\n>\r\n>base64url 与 base64 在技术上等同，只是字母表中最后两个编码有所区别。\r\n>\r\n>```text\r\n>         Table 2: The \"URL and Filename safe\" Base 64 Alphabet\r\n>\r\n>     Value Encoding  Value Encoding  Value Encoding  Value Encoding\r\n>         0 A            17 R            34 i            51 z\r\n>         1 B            18 S            35 j            52 0\r\n>         2 C            19 T            36 k            53 1\r\n>         3 D            20 U            37 l            54 2\r\n>         4 E            21 V            38 m            55 3\r\n>         5 F            22 W            39 n            56 4\r\n>         6 G            23 X            40 o            57 5\r\n>         7 H            24 Y            41 p            58 6\r\n>         8 I            25 Z            42 q            59 7\r\n>         9 J            26 a            43 r            60 8\r\n>        10 K            27 b            44 s            61 9\r\n>        11 L            28 c            45 t            62 - (minus)\r\n>        12 M            29 d            46 u            63 _\r\n>        13 N            30 e            47 v           (underline)\r\n>        14 O            31 f            48 w\r\n>        15 P            32 g            49 x\r\n>        16 Q            33 h            50 y         (pad) =\r\n>```\r\n>内容摘抄自：http://zhjwpku.com/rfc/2017/10/10/RFC4648-the-base16-base32-base64-data-encodings.html\r\n\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/12/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/11",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/11/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/11/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/11/events",
        "html_url": "https://github.com/itlgl/note/issues/11",
        "id": 315752147,
        "node_id": "MDU6SXNzdWUzMTU3NTIxNDc=",
        "number": 11,
        "title": "java SHA3算法实现",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-19T07:07:28Z",
        "updated_at": "2018-06-21T10:31:57Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "SHA3算法即为Keccak算法\r\n\r\n贴一张维基百科的图\r\n![sha](https://user-images.githubusercontent.com/7078104/39904005-7c7c26d0-5508-11e8-9501-090ca6cb03e2.png)\r\n\r\n### BouncyCastle中的实现\r\nBouncyCastle中实现了SHA3算法家族的所有实现，对应实现在`org.bouncycastle.crypto.digests.SHA3Digest`和`org.bouncycastle.crypto.digests.SHAKEDigest`中，（但是现在还没有搞清楚SHAKE算法的调用方法，维基百科上写的SHAKE算法输出长度不固定，所以调用的示例都是`SHAKE128(\"\", 256) 7f9c2ba4e88f827d616045507605853ed73b8093f6efbc88eb1a6eacfa66ef26`这种，貌似传了一个最大长度？），示例代码：\r\n```java\r\n// SHA3家族：SHA3-224,SHA3-256,SHA3-384,SHA3-512,SHAKE128,SHAKE256\r\nprivate static final Digest _SHA3_224Digest = new SHA3Digest(224);\r\nprivate static final Digest _SHA3_256Digest = new SHA3Digest(256);\r\nprivate static final Digest _SHA3_384Digest = new SHA3Digest(384);\r\nprivate static final Digest _SHA3_512Digest = new SHA3Digest(512);\r\n// private static final Digest _SHA3_SHAKE128Digest = new SHAKEDigest(128);\r\n// private static final Digest _SHA3_SHAKE256Digest = new SHAKEDigest(256);\r\n\r\nprivate static byte[] doDigest(Digest digest, byte[] src) {\r\n    digest.reset();\r\n    byte[] result = new byte[digest.getDigestSize()];\r\n    digest.update(src, 0, src.length);\r\n    digest.doFinal(result, 0);\r\n    return result;\r\n}\r\n\r\npublic static byte[] sha3_224(byte[] src) {\r\n    return doDigest(_SHA3_224Digest, src);\r\n}\r\n\r\npublic static byte[] sha3_256(byte[] src) {\r\n    return doDigest(_SHA3_256Digest, src);\r\n}\r\n\r\npublic static byte[] sha3_384(byte[] src) {\r\n    return doDigest(_SHA3_384Digest, src);\r\n}\r\n\r\npublic static byte[] sha3_512(byte[] src) {\r\n    return doDigest(_SHA3_512Digest, src);\r\n}\r\n```\r\n\r\n### 以太坊中的实现(Keccak256，和sha3哈希结果不同)\r\n在以太坊的java实现代码中，有sha3算法的实现：[https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/main/java/org/ethereum/crypto/cryptohash/Keccak256.java](https://github.com/ethereum/ethereumj/blob/develop/ethereumj-core/src/main/java/org/ethereum/crypto/cryptohash/Keccak256.java)\r\n\r\n> 注意：Keccak256算法和sha3算法略有区别，结果是不一样的。以太坊使用Keccak256算法来进行HASH运算，而不是sha3算法。\r\n\r\n在代码中，作者将算法实现加入到[SpongyCastle](https://rtyley.github.io/spongycastle/)的算法集中：\r\n```java\r\n// 代码位于:org.ethereum.crypto.jce.SpongyCastleProvider\r\nprivate static final Provider INSTANCE;\r\nstatic{\r\n    Provider p = Security.getProvider(\"SC\");\r\n    \r\n    INSTANCE = (p != null) ? p : new BouncyCastleProvider();\r\n        \r\n    INSTANCE.put(\"MessageDigest.ETH-KECCAK-256\", \"org.ethereum.crypto.cryptohash.Keccak256\");\r\n    INSTANCE.put(\"MessageDigest.ETH-KECCAK-512\", \"org.ethereum.crypto.cryptohash.Keccak512\");\r\n}\r\n```\r\n\r\n而后调用sha3算法时，只需要在Digest算法中填写\"ETH-KECCAK-256\"串即可调用sha3算法：\r\n```java\r\n// 代码位于:org.ethereum.crypto.HashUtil，为了方便查看，将方法中的变量直接替换为字符串\r\npublic static byte[] sha3(byte[] input) {\r\n    MessageDigest digest;\r\n    try {\r\n        digest = MessageDigest.getInstance(\"ETH-KECCAK-256\", “SC”);\r\n        digest.update(input);\r\n        return digest.digest();\r\n    } catch (NoSuchAlgorithmException e) {\r\n        LOG.error(\"Can't find such algorithm\", e);\r\n        throw new RuntimeException(e);\r\n    }\r\n\r\n}\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/11/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/10",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/10/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/10/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/10/events",
        "html_url": "https://github.com/itlgl/note/issues/10",
        "id": 315304877,
        "node_id": "MDU6SXNzdWUzMTUzMDQ4Nzc=",
        "number": 10,
        "title": "Window7安装比特币客户端electrum-3.1.2.exe报错",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-18T02:16:58Z",
        "updated_at": "2018-04-18T06:38:05Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "### 现象\r\n双击安装包报错：`Error loading Python DLL: C:\\Users\\root\\AppData\\Local\\Temp\\_MEI36242\\python35.dll`\r\n\r\n### 解决过程\r\n1、开始是以为python3没安装，发现python安装了，版本为`3.6.3`。\r\n2、以太坊的网页中说有的电脑可能需要[KB2999226](https://download.microsoft.com/download/4/F/E/4FE73868-5EDD-4B47-8B33-CE1BB7B2B16A/Windows6.1-KB2999226-x86.msu)更新，从微软网站下载以后，安装提示`此更新不适用`。\r\n3、查找网页，发现一个类似的python写的应用也报这个错误，[网页链接1](https://github.com/mitmproxy/mitmproxy/issues/1763)和[网页链接2](https://github.com/mitmproxy/mitmproxy/issues/2025)，网页中有人提到之前他也有相同的问题，通过安装`vc_redist.x86.exe`问题得到了解决。我的电脑是64位系统，从微软网站下载64位的安装包[vc_redist.x64.exe](https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe)安装后，问题解决。",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/10/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/9",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/9/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/9/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/9/events",
        "html_url": "https://github.com/itlgl/note/issues/9",
        "id": 314034673,
        "node_id": "MDU6SXNzdWUzMTQwMzQ2NzM=",
        "number": 9,
        "title": "Gradle java项目使用shadow导出带有所有依赖包的可执行jar包",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-13T09:30:28Z",
        "updated_at": "2018-04-13T09:30:48Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "### 1、在`build.gradle`文件中增加：\r\n```groovy\r\n//设置编码\r\ntasks.withType(JavaCompile) {\r\n    options.encoding = \"UTF-8\"\r\n}\r\n\r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'\r\n    }\r\n}\r\n\r\napply plugin: 'com.github.johnrengelman.shadow'\r\n\r\n//使用shadow插件打包，代替jar功能。\r\njar {\r\n    manifest {  //incubating版本，以后版本可能会改API\r\n        attributes(\"Main-Class\": \"com.itlgl.tool.crypto.CryptoToolUI\",\r\n                \"Implementation-Title\": \"Gradle\")\r\n    }\r\n}\r\n```\r\n\r\n### 2、在IDEA中的gradle面板中找到`Tasks -> shadow -> shadowJar`执行，即可在`build/libs/`目录下找到生成的jar包，双击即可运行。\r\n\r\n### 3、如果要修改生成jar包的名字，可以在`build.gradle`文件中增加：\r\n```groovy\r\nshadowJar {\r\n   baseName = 'shadow'\r\n   classifier = null\r\n   version = null\r\n}\r\n```\r\n生成的jar包名字就是`shadow.jar`。\r\n\r\n### 4、shadow的说明文档：http://imperceptiblethoughts.com/shadow/",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/9/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/8",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/8/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/8/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/8/events",
        "html_url": "https://github.com/itlgl/note/issues/8",
        "id": 313564123,
        "node_id": "MDU6SXNzdWUzMTM1NjQxMjM=",
        "number": 8,
        "title": "Android SDK下载OpenMobile api",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            },
            {
                "id": 898979240,
                "node_id": "MDU6TGFiZWw4OTg5NzkyNDA=",
                "url": "https://api.github.com/repos/itlgl/note/labels/OpenMobile",
                "name": "OpenMobile",
                "color": "f9d0c4",
                "default": false,
                "description": "seek-for-android SmartCardApi"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-12T03:27:29Z",
        "updated_at": "2018-06-29T08:14:13Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "在`Android SDK Manager`的`Tools -> Manager Add-on sites... -> User Defined Sites`中，添加以下地址：\r\n```\r\nhttp://seek-for-android.github.io/repository/15/addon.xml\r\nhttp://seek-for-android.github.io/repository/17/addon.xml\r\nhttp://seek-for-android.github.io/repository/18/addon.xml\r\nhttp://seek-for-android.github.io/repository/19/addon.xml\r\nhttp://seek-for-android.github.io/repository/21/addon.xml\r\n```\r\n然后更新SDK即可。\r\n\r\n![687474703a2f2f7365656b2d666f722d616e64726f69642e6769746875622e696f2f696d672f77696b692f5573696e6753434150495f4164646f6e2d53697465732e706e67](https://user-images.githubusercontent.com/7078104/38654948-64dc896e-3e44-11e8-9e1c-e1a803e5889b.png)\r\n\r\n\r\nwiki网址： https://github.com/seek-for-android/pool/wiki/UsingSmartCardAPI\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/8/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/7",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/7/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/7/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/7/events",
        "html_url": "https://github.com/itlgl/note/issues/7",
        "id": 312370730,
        "node_id": "MDU6SXNzdWUzMTIzNzA3MzA=",
        "number": 7,
        "title": "Ledger nano S在linux上不能识别的解决方法",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-04-09T02:25:54Z",
        "updated_at": "2018-04-09T02:25:54Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "```bash\r\nwget -q -O - https://raw.githubusercontent.com/LedgerHQ/udev-rules/master/add_udev_rules.sh | sudo bash\r\n```\r\n\r\n原网址：https://support.ledgerwallet.com/hc/en-us/articles/115005165269-What-to-do-if-my-Ledger-Nano-S-is-not-recognized-on-Windows-and-or-Linux-\r\n\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/7/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/6",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/6/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/6/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/6/events",
        "html_url": "https://github.com/itlgl/note/issues/6",
        "id": 306370783,
        "node_id": "MDU6SXNzdWUzMDYzNzA3ODM=",
        "number": 6,
        "title": "使用LinkedBlockingQueue将异步的callback转换为同步调用",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-03-19T08:30:30Z",
        "updated_at": "2018-03-19T08:30:30Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "示例代码：\r\n```java\r\nfinal LinkedBlockingQueue<Boolean> waitConnected = new LinkedBlockingQueue<Boolean>(1);\r\nboolean result = transportFactory.connect(context, new BTChipTransportFactoryCallback() {\r\n\r\n   @Override\r\n   public void onConnected(boolean success) {\r\n      try {\r\n         waitConnected.put(success);\r\n      } catch (InterruptedException ignore) {\r\n      }\r\n   }\r\n\r\n});\r\nif (result) {\r\n   try {\r\n      initialized = waitConnected.poll(CONNECT_TIMEOUT, TimeUnit.MILLISECONDS);\r\n   } catch (InterruptedException ignore) {\r\n   }\r\n   if (initialized) {\r\n      initialized = proxy.init();\r\n   }\r\n}\r\n```\r\n\r\n使用上面示例代码的方式，不用额外的同步代码或者线程，不用担心异步的方法返回太快导致Object.wait()方法获取不到notify通知，而且代码精简，是个好办法。",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/6/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/5",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/5/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/5/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/5/events",
        "html_url": "https://github.com/itlgl/note/issues/5",
        "id": 305840953,
        "node_id": "MDU6SXNzdWUzMDU4NDA5NTM=",
        "number": 5,
        "title": "Android Studio 中文注释编译报错 \"编码 GBK 的不可映射字符\"",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 857595983,
                "node_id": "MDU6TGFiZWw4NTc1OTU5ODM=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android%20Studio",
                "name": "Android Studio",
                "color": "c2e0c6",
                "default": false,
                "description": "Android Studio"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-03-16T08:31:20Z",
        "updated_at": "2018-06-29T08:13:17Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "项目中使用了中文注释，编译时报错\"编码 GBK 的不可映射字符\"\r\n\r\n#### 解决方法：\r\n设置Android Studio的编码格式为UTF-8。\r\n`File -> Setting -> Editor -> File Encodings`，将`IDE Encoding`、`Project Encoding`的编码都更改为UTF-8即可。\r\n\r\n下面的`Default encoding for properties files`和单选框`Transparent native-to-ascii conversion`是编辑properties文件时的编码格式和是否自动转码为unicode，也勾选上，方便编辑properties文件。\r\n",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/5/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/4",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/4/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/4/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/4/events",
        "html_url": "https://github.com/itlgl/note/issues/4",
        "id": 304315318,
        "node_id": "MDU6SXNzdWUzMDQzMTUzMTg=",
        "number": 4,
        "title": "Android设置TextView可以上下和左右同时滑动",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 864262455,
                "node_id": "MDU6TGFiZWw4NjQyNjI0NTU=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android",
                "name": "Android",
                "color": "c5def5",
                "default": false,
                "description": "Android"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-03-12T10:28:35Z",
        "updated_at": "2018-03-12T10:31:31Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "布局文件：\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<GridLayout\r\n        xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:rowCount=\"2\"\r\n        android:columnCount=\"1\"\r\n        android:paddingTop=\"10sp\"\r\n        android:paddingLeft=\"10sp\">\r\n\r\n    <TextView\r\n            android:layout_width=\"wrap_content\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:text=\"@string/last_log_entries\"\r\n            android:layout_gravity=\"left\"\r\n            />\r\n\r\n    <TextView\r\n            android:id=\"@+id/tvLogDisplay\"\r\n            android:layout_width=\"fill_parent\"\r\n            android:layout_height=\"fill_parent\"\r\n            android:fontFamily=\"monospace\"\r\n            android:textSize=\"14sp\"\r\n            android:scrollbars=\"horizontal|vertical\"\r\n            android:padding=\"5sp\"/>\r\n\r\n</GridLayout>\r\n```\r\n\r\n设置的代码：\r\n```java\r\nTextView tvLogDisplay = (TextView) findViewById(R.id.tvLogDisplay);\r\ntvLogDisplay.setText(logs);\r\ntvLogDisplay.setHorizontallyScrolling(true);\r\ntvLogDisplay.setMovementMethod(new ScrollingMovementMethod());\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/4/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/3",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/3/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/3/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/3/events",
        "html_url": "https://github.com/itlgl/note/issues/3",
        "id": 302612919,
        "node_id": "MDU6SXNzdWUzMDI2MTI5MTk=",
        "number": 3,
        "title": "github的三个API测试：获取issue列表、获取单个issue、渲染markdown文本",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-03-06T08:53:42Z",
        "updated_at": "2018-03-06T08:53:42Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "### 1、获取issue列表(HTTP GET)\r\nurl：\r\n```url\r\nhttps://api.github.com/repos/itlgl/note/issues?per_page=10&page=1&access_token=4a27c49affe39dd9fd9fe27c49e1c24cdbaac18d\r\n```\r\n\r\n返回结果：\r\n\r\n```json\r\n[\r\n  {\r\n    \"url\": \"https://api.github.com/repos/itlgl/note/issues/2\",\r\n    \"repository_url\": \"https://api.github.com/repos/itlgl/note\",\r\n    \"labels_url\": \"https://api.github.com/repos/itlgl/note/issues/2/labels{/name}\",\r\n    \"comments_url\": \"https://api.github.com/repos/itlgl/note/issues/2/comments\",\r\n    \"events_url\": \"https://api.github.com/repos/itlgl/note/issues/2/events\",\r\n    \"html_url\": \"https://github.com/itlgl/note/issues/2\",\r\n    \"id\": 302602184,\r\n    \"number\": 2,\r\n    \"title\": \"Android Studio新版本gradle4.1的bug\",\r\n    \"user\": {\r\n      \"login\": \"itlgl\",\r\n      \"id\": 7078104,\r\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/7078104?v=4\",\r\n      \"gravatar_id\": \"\",\r\n      \"url\": \"https://api.github.com/users/itlgl\",\r\n      \"html_url\": \"https://github.com/itlgl\",\r\n      \"followers_url\": \"https://api.github.com/users/itlgl/followers\",\r\n      \"following_url\": \"https://api.github.com/users/itlgl/following{/other_user}\",\r\n      \"gists_url\": \"https://api.github.com/users/itlgl/gists{/gist_id}\",\r\n      \"starred_url\": \"https://api.github.com/users/itlgl/starred{/owner}{/repo}\",\r\n      \"subscriptions_url\": \"https://api.github.com/users/itlgl/subscriptions\",\r\n      \"organizations_url\": \"https://api.github.com/users/itlgl/orgs\",\r\n      \"repos_url\": \"https://api.github.com/users/itlgl/repos\",\r\n      \"events_url\": \"https://api.github.com/users/itlgl/events{/privacy}\",\r\n      \"received_events_url\": \"https://api.github.com/users/itlgl/received_events\",\r\n      \"type\": \"User\",\r\n      \"site_admin\": false\r\n    },\r\n    \"labels\": [\r\n      {\r\n        \"id\": 857595983,\r\n        \"url\": \"https://api.github.com/repos/itlgl/note/labels/Android%20Studio\",\r\n        \"name\": \"Android Studio\",\r\n        \"color\": \"c2e0c6\",\r\n        \"default\": false\r\n      }\r\n    ],\r\n    \"state\": \"open\",\r\n    \"locked\": false,\r\n    \"assignee\": null,\r\n    \"assignees\": [\r\n\r\n    ],\r\n    \"milestone\": null,\r\n    \"comments\": 0,\r\n    \"created_at\": \"2018-03-06T08:14:02Z\",\r\n    \"updated_at\": \"2018-03-06T08:16:59Z\",\r\n    \"closed_at\": null,\r\n    \"author_association\": \"OWNER\",\r\n    \"body\": \"升级完Android Studio以后，默认使用`classpath 'com.android.tools.build:gradle:3.0.0'`。  \\r\\n新建Android项目后，再新建一个java library，如果java library使用了第三方jar包，运行时会报类找不到的异常。\\r\\n如果把项目的gradle版本降级，换成`classpath 'com.android.tools.build:gradle:2.3.3'`，则没有这个问题，java项目可以正常运行。\"\r\n  },\r\n  {\r\n    \"url\": \"https://api.github.com/repos/itlgl/note/issues/1\",\r\n    \"repository_url\": \"https://api.github.com/repos/itlgl/note\",\r\n    \"labels_url\": \"https://api.github.com/repos/itlgl/note/issues/1/labels{/name}\",\r\n    \"comments_url\": \"https://api.github.com/repos/itlgl/note/issues/1/comments\",\r\n    \"events_url\": \"https://api.github.com/repos/itlgl/note/issues/1/events\",\r\n    \"html_url\": \"https://github.com/itlgl/note/issues/1\",\r\n    \"id\": 296273797,\r\n    \"number\": 1,\r\n    \"title\": \"PKCS5padding和PKCS7padding\",\r\n    \"user\": {\r\n      \"login\": \"itlgl\",\r\n      \"id\": 7078104,\r\n      \"avatar_url\": \"https://avatars0.githubusercontent.com/u/7078104?v=4\",\r\n      \"gravatar_id\": \"\",\r\n      \"url\": \"https://api.github.com/users/itlgl\",\r\n      \"html_url\": \"https://github.com/itlgl\",\r\n      \"followers_url\": \"https://api.github.com/users/itlgl/followers\",\r\n      \"following_url\": \"https://api.github.com/users/itlgl/following{/other_user}\",\r\n      \"gists_url\": \"https://api.github.com/users/itlgl/gists{/gist_id}\",\r\n      \"starred_url\": \"https://api.github.com/users/itlgl/starred{/owner}{/repo}\",\r\n      \"subscriptions_url\": \"https://api.github.com/users/itlgl/subscriptions\",\r\n      \"organizations_url\": \"https://api.github.com/users/itlgl/orgs\",\r\n      \"repos_url\": \"https://api.github.com/users/itlgl/repos\",\r\n      \"events_url\": \"https://api.github.com/users/itlgl/events{/privacy}\",\r\n      \"received_events_url\": \"https://api.github.com/users/itlgl/received_events\",\r\n      \"type\": \"User\",\r\n      \"site_admin\": false\r\n    },\r\n    \"labels\": [\r\n      {\r\n        \"id\": 834740541,\r\n        \"url\": \"https://api.github.com/repos/itlgl/note/labels/%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95\",\r\n        \"name\": \"填充算法\",\r\n        \"color\": \"c5def5\",\r\n        \"default\": false\r\n      }\r\n    ],\r\n    \"state\": \"open\",\r\n    \"locked\": false,\r\n    \"assignee\": null,\r\n    \"assignees\": [\r\n\r\n    ],\r\n    \"milestone\": null,\r\n    \"comments\": 0,\r\n    \"created_at\": \"2018-02-12T05:58:14Z\",\r\n    \"updated_at\": \"2018-02-12T05:58:14Z\",\r\n    \"closed_at\": null,\r\n    \"author_association\": \"OWNER\",\r\n    \"body\": \"### PKCS5padding\\r\\n在PKCS5Padding中，明确定义Block的大小是8位。\\r\\n补padding时，如果源数据不是8(Block的长度)的整数倍，补足到8的整数倍，差1位就补1个字节0x01，差2位就补2个字节0x02，以此类推；如果源数据是8的整数倍，在后面补8个字节0x08。\\r\\n### PKCS7padding\\r\\nPKCS7padding和PKCS5padding类似，但是没有明确定义Block的长度，可以在1-255之间（块长度超出255的尚待研究），填充的算法和PKCS5psdding一致。\\r\\n\\r\\n参考： http://www.cnblogs.com/AloneSword/p/3491466.html\"\r\n  }\r\n]\r\n```\r\n\r\n### 2、获取单个issue内容(HTTP GET)\r\nurl：\r\n```url\r\nhttps://api.github.com/repos/itlgl/note/issues/1?access_token=4a27c49affe39dd9fd9fe27c49e1c24cdbaac18d\r\n```\r\n\r\n返回结果：\r\n\r\n```json\r\n{\r\n  \"url\": \"https://api.github.com/repos/itlgl/note/issues/1\",\r\n  \"repository_url\": \"https://api.github.com/repos/itlgl/note\",\r\n  \"labels_url\": \"https://api.github.com/repos/itlgl/note/issues/1/labels{/name}\",\r\n  \"comments_url\": \"https://api.github.com/repos/itlgl/note/issues/1/comments\",\r\n  \"events_url\": \"https://api.github.com/repos/itlgl/note/issues/1/events\",\r\n  \"html_url\": \"https://github.com/itlgl/note/issues/1\",\r\n  \"id\": 296273797,\r\n  \"number\": 1,\r\n  \"title\": \"PKCS5padding和PKCS7padding\",\r\n  \"user\": {\r\n    \"login\": \"itlgl\",\r\n    \"id\": 7078104,\r\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/7078104?v=4\",\r\n    \"gravatar_id\": \"\",\r\n    \"url\": \"https://api.github.com/users/itlgl\",\r\n    \"html_url\": \"https://github.com/itlgl\",\r\n    \"followers_url\": \"https://api.github.com/users/itlgl/followers\",\r\n    \"following_url\": \"https://api.github.com/users/itlgl/following{/other_user}\",\r\n    \"gists_url\": \"https://api.github.com/users/itlgl/gists{/gist_id}\",\r\n    \"starred_url\": \"https://api.github.com/users/itlgl/starred{/owner}{/repo}\",\r\n    \"subscriptions_url\": \"https://api.github.com/users/itlgl/subscriptions\",\r\n    \"organizations_url\": \"https://api.github.com/users/itlgl/orgs\",\r\n    \"repos_url\": \"https://api.github.com/users/itlgl/repos\",\r\n    \"events_url\": \"https://api.github.com/users/itlgl/events{/privacy}\",\r\n    \"received_events_url\": \"https://api.github.com/users/itlgl/received_events\",\r\n    \"type\": \"User\",\r\n    \"site_admin\": false\r\n  },\r\n  \"labels\": [\r\n    {\r\n      \"id\": 834740541,\r\n      \"url\": \"https://api.github.com/repos/itlgl/note/labels/%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95\",\r\n      \"name\": \"填充算法\",\r\n      \"color\": \"c5def5\",\r\n      \"default\": false\r\n    }\r\n  ],\r\n  \"state\": \"open\",\r\n  \"locked\": false,\r\n  \"assignee\": null,\r\n  \"assignees\": [\r\n\r\n  ],\r\n  \"milestone\": null,\r\n  \"comments\": 0,\r\n  \"created_at\": \"2018-02-12T05:58:14Z\",\r\n  \"updated_at\": \"2018-02-12T05:58:14Z\",\r\n  \"closed_at\": null,\r\n  \"author_association\": \"OWNER\",\r\n  \"body\": \"### PKCS5padding\\r\\n在PKCS5Padding中，明确定义Block的大小是8位。\\r\\n补padding时，如果源数据不是8(Block的长度)的整数倍，补足到8的整数倍，差1位就补1个字节0x01，差2位就补2个字节0x02，以此类推；如果源数据是8的整数倍，在后面补8个字节0x08。\\r\\n### PKCS7padding\\r\\nPKCS7padding和PKCS5padding类似，但是没有明确定义Block的长度，可以在1-255之间（块长度超出255的尚待研究），填充的算法和PKCS5psdding一致。\\r\\n\\r\\n参考： http://www.cnblogs.com/AloneSword/p/3491466.html\",\r\n  \"closed_by\": null\r\n}\r\n```\r\n\r\n### 3、渲染markdown文本(HTTP POST)\r\nurl：\r\n```url\r\nhttps://api.github.com/markdown?access_token=4a27c49affe39dd9fd9fe27c49e1c24cdbaac18d\r\n```\r\n\r\n报文头：\r\n```\r\n\"Accept\", \"application/json, text/javascript, */*; q=0.01\"\r\n```\r\n\r\njson报文：\r\n```text\r\n{\"text\":\"### PKCS5padding\\r\\n在PKCS5Padding中，明确定义Block的大小是8位。\\r\\n补padding时，如果源数据不是8(Block的长度)的整数倍，补足到8的整数倍，差1位就补1个字节0x01，差2位就补2个字节0x02，以此类推；如果源数据是8的整数倍，在后面补8个字节0x08。\\r\\n### PKCS7padding\\r\\nPKCS7padding和PKCS5padding类似，但是没有明确定义Block的长度，可以在1-255之间（块长度超出255的尚待研究），填充的算法和PKCS5psdding一致。\\r\\n\\r\\n参考： http://www.cnblogs.com/AloneSword/p/3491466.html\",\"mode\":\"gfm\"}\r\n```\r\n\r\n返回结果：\r\n```json\r\n<h3>PKCS5padding</h3>\r\n<p>在PKCS5Padding中，明确定义Block的大小是8位。<br>\r\n补padding时，如果源数据不是8(Block的长度)的整数倍，补足到8的整数倍，差1位就补1个字节0x01，差2位就补2个字节0x02，以此类推；如果源数据是8的整数倍，在后面补8个字节0x08。</p>\r\n<h3>PKCS7padding</h3>\r\n<p>PKCS7padding和PKCS5padding类似，但是没有明确定义Block的长度，可以在1-255之间（块长度超出255的尚待研究），填充的算法和PKCS5psdding一致。</p>\r\n<p>参考： <a href=\"http://www.cnblogs.com/AloneSword/p/3491466.html\" rel=\"nofollow\">http://www.cnblogs.com/AloneSword/p/3491466.html</a></p>\r\n```",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/3/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/2",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/2/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/2/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/2/events",
        "html_url": "https://github.com/itlgl/note/issues/2",
        "id": 302602184,
        "node_id": "MDU6SXNzdWUzMDI2MDIxODQ=",
        "number": 2,
        "title": "Android Studio新版本gradle4.1的bug",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 857595983,
                "node_id": "MDU6TGFiZWw4NTc1OTU5ODM=",
                "url": "https://api.github.com/repos/itlgl/note/labels/Android%20Studio",
                "name": "Android Studio",
                "color": "c2e0c6",
                "default": false,
                "description": "Android Studio"
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-03-06T08:14:02Z",
        "updated_at": "2018-07-25T03:32:22Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "升级完Android Studio以后，默认使用`classpath 'com.android.tools.build:gradle:3.0.0'`。  \r\n新建Android项目后，再新建一个java library，如果java library使用了第三方jar包，运行时会报类找不到的异常。\r\n如果把项目的gradle版本降级，换成`classpath 'com.android.tools.build:gradle:2.3.3'`，则没有这个问题，java项目可以正常运行。\r\n\r\n在GreenDao的集成文档([http://greenrobot.org/greendao/documentation/generator/](http://greenrobot.org/greendao/documentation/generator/))中，提到了这个问题的一个解决方法：\r\n\r\n> Note: If you have **issues running the `main()` method in Android Studio** (NoClassDefFoundError, ClassNotFoundException or TemplateNotFoundException), try running the generator using the Gradle application plugin. Configure the class with your `main()` method in your `build.gradle` file:\r\n> ```java\r\n> apply plugin: 'application'\r\n> mainClassName = \"com.example.YourGeneratorClass\"\r\n> ```\r\n> Then execute the Gradle `run` task.",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/2/timeline",
        "performed_via_github_app": null
    },
    {
        "url": "https://api.github.com/repos/itlgl/note/issues/1",
        "repository_url": "https://api.github.com/repos/itlgl/note",
        "labels_url": "https://api.github.com/repos/itlgl/note/issues/1/labels{/name}",
        "comments_url": "https://api.github.com/repos/itlgl/note/issues/1/comments",
        "events_url": "https://api.github.com/repos/itlgl/note/issues/1/events",
        "html_url": "https://github.com/itlgl/note/issues/1",
        "id": 296273797,
        "node_id": "MDU6SXNzdWUyOTYyNzM3OTc=",
        "number": 1,
        "title": "PKCS5padding和PKCS7padding",
        "user": {
            "login": "itlgl",
            "id": 7078104,
            "node_id": "MDQ6VXNlcjcwNzgxMDQ=",
            "avatar_url": "https://avatars.githubusercontent.com/u/7078104?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/itlgl",
            "html_url": "https://github.com/itlgl",
            "followers_url": "https://api.github.com/users/itlgl/followers",
            "following_url": "https://api.github.com/users/itlgl/following{/other_user}",
            "gists_url": "https://api.github.com/users/itlgl/gists{/gist_id}",
            "starred_url": "https://api.github.com/users/itlgl/starred{/owner}{/repo}",
            "subscriptions_url": "https://api.github.com/users/itlgl/subscriptions",
            "organizations_url": "https://api.github.com/users/itlgl/orgs",
            "repos_url": "https://api.github.com/users/itlgl/repos",
            "events_url": "https://api.github.com/users/itlgl/events{/privacy}",
            "received_events_url": "https://api.github.com/users/itlgl/received_events",
            "type": "User",
            "site_admin": false
        },
        "labels": [
            {
                "id": 834740541,
                "node_id": "MDU6TGFiZWw4MzQ3NDA1NDE=",
                "url": "https://api.github.com/repos/itlgl/note/labels/%E5%A1%AB%E5%85%85%E7%AE%97%E6%B3%95",
                "name": "填充算法",
                "color": "c5def5",
                "default": false,
                "description": null
            }
        ],
        "state": "open",
        "locked": false,
        "assignee": null,
        "assignees": [],
        "milestone": null,
        "comments": 0,
        "created_at": "2018-02-12T05:58:14Z",
        "updated_at": "2018-02-12T05:58:14Z",
        "closed_at": null,
        "author_association": "OWNER",
        "active_lock_reason": null,
        "body": "### PKCS5padding\r\n在PKCS5Padding中，明确定义Block的大小是8位。\r\n补padding时，如果源数据不是8(Block的长度)的整数倍，补足到8的整数倍，差1位就补1个字节0x01，差2位就补2个字节0x02，以此类推；如果源数据是8的整数倍，在后面补8个字节0x08。\r\n### PKCS7padding\r\nPKCS7padding和PKCS5padding类似，但是没有明确定义Block的长度，可以在1-255之间（块长度超出255的尚待研究），填充的算法和PKCS5psdding一致。\r\n\r\n参考： http://www.cnblogs.com/AloneSword/p/3491466.html",
        "timeline_url": "https://api.github.com/repos/itlgl/note/issues/1/timeline",
        "performed_via_github_app": null
    }
]